#! /usr/bin/env python
# encoding: utf-8

import shutil, subprocess, os

PLINGELING = 'plingeling-ayv-86bf266-140429'

def options(opt):
    pass

def configure(conf):
    sourceclean(conf)
    root = conf.path.abspath()
    subprocess.check_call(['wget', 'http://fmv.jku.at/lingeling/' + PLINGELING + '.zip', '--directory-prefix', root])
    subprocess.check_call(['unzip', root + '/' + PLINGELING + '.zip', 'code/*', '-d', root])
    subprocess.check_call(['unzip', root + '/' + PLINGELING + '.zip', 'build.sh', '-d', root])

def build(bld):

    def sh(task):
        src = task.inputs[0].abspath()
        tgt = task.outputs[0].abspath()
        subprocess.check_call('cd ' + os.path.dirname(src) + ' && ./' + os.path.basename(src), shell=True)
        subprocess.check_call(['mv', os.path.dirname(src) + '/binary/plingeling', tgt])
        return 0
        
    bld(rule = sh,
        source = 'build.sh',
        target = 'plingeling')
    
    bld.install_files('${LIBDIR}', 'plingeling', chmod=755)

def distclean(ctx):
    from waflib import Scripting
    Scripting.distclean(ctx)
    sourceclean(ctx)

def sourceclean(ctx):
    shutil.rmtree(ctx.path.abspath() + '/binary', True)
    shutil.rmtree(ctx.path.abspath() + '/code', True)
    try:
        os.remove(ctx.path.abspath() + '/' + PLINGELING + '.zip')
    except OSError:
        pass
    try:
        os.remove(ctx.path.abspath() + '/build.sh')
    except OSError:
        pass
