package kodkod.examples.models.model.typography;

import java.util.Arrays;
import java.util.List;
import kodkod.ast.*;
import kodkod.ast.operator.*;
import kodkod.examples.ExampleMetadata;
import kodkod.instance.*;
import kodkod.engine.*;
import kodkod.engine.satlab.SATFactory;
import kodkod.engine.config.Options;

@ExampleMetadata(
        Name = "paragraph-numbering",
        Note = "",
        IsCheck = true,
        PartialModel = true,
        BinaryRelations = 6,
        TernaryRelations = 2,
        NaryRelations = 0,
        HierarchicalTypes =2,
        NestedRelationalJoins = 10,
        TransitiveClosure = 3,
        NestedQuantifiers = 4,
        SetCardinality = 0,
        Additions = 0,
        Subtractions = 0,
        Comparison = 8,
        OrderedRelations = 0,
        Constraints = 15
)


public final class paragraphNumberingPreserveForestCheck {

    public static void main(String[] args) throws Exception {

        Relation x0 = Relation.unary("Int/min");
        Relation x1 = Relation.unary("Int/zero");
        Relation x2 = Relation.unary("Int/max");
        Relation x3 = Relation.nary("Int/next", 2);
        Relation x4 = Relation.unary("seq/Int");
        Relation x5 = Relation.unary("String");
        Relation x6 = Relation.unary("this/NumberedStyle");
        Relation x7 = Relation.unary("this/Style remainder");
        Relation x8 = Relation.unary("this/NumberedState");
        Relation x9 = Relation.unary("this/State remainder");
        Relation x10 = Relation.unary("this/Value");
        Relation x11 = Relation.nary("this/Style.replaces", 2);
        Relation x12 = Relation.nary("this/Style.parents", 2);
        Relation x13 = Relation.nary("this/State.context", 2);
        Relation x14 = Relation.nary("this/State.ancestors", 3);
        Relation x15 = Relation.nary("this/Value.next", 2);
        Relation x16 = Relation.nary("this/NumberedStyle.initial", 2);
        Relation x17 = Relation.nary("this/NumberedState.value", 3);

        List<String> atomlist = Arrays.asList(
                "-1", "-2", "-3", "-4", "-5",
                "-6", "-7", "-8", "0", "1", "2",
                "3", "4", "5", "6", "7", "State$0",
                "State$1", "State$2", "State$3", "Style$0", "Style$1", "Style$2",
                "Style$3", "Value$0", "Value$1", "Value$2", "Value$3"
        );

        Universe universe = new Universe(atomlist);
        TupleFactory factory = universe.factory();
        Bounds bounds = new Bounds(universe);

        TupleSet x0_upper = factory.noneOf(1);
        x0_upper.add(factory.tuple("-8"));
        bounds.boundExactly(x0, x0_upper);

        TupleSet x1_upper = factory.noneOf(1);
        x1_upper.add(factory.tuple("0"));
        bounds.boundExactly(x1, x1_upper);

        TupleSet x2_upper = factory.noneOf(1);
        x2_upper.add(factory.tuple("7"));
        bounds.boundExactly(x2, x2_upper);

        TupleSet x3_upper = factory.noneOf(2);
        x3_upper.add(factory.tuple("-8").product(factory.tuple("-7")));
        x3_upper.add(factory.tuple("-7").product(factory.tuple("-6")));
        x3_upper.add(factory.tuple("-6").product(factory.tuple("-5")));
        x3_upper.add(factory.tuple("-5").product(factory.tuple("-4")));
        x3_upper.add(factory.tuple("-4").product(factory.tuple("-3")));
        x3_upper.add(factory.tuple("-3").product(factory.tuple("-2")));
        x3_upper.add(factory.tuple("-2").product(factory.tuple("-1")));
        x3_upper.add(factory.tuple("-1").product(factory.tuple("0")));
        x3_upper.add(factory.tuple("0").product(factory.tuple("1")));
        x3_upper.add(factory.tuple("1").product(factory.tuple("2")));
        x3_upper.add(factory.tuple("2").product(factory.tuple("3")));
        x3_upper.add(factory.tuple("3").product(factory.tuple("4")));
        x3_upper.add(factory.tuple("4").product(factory.tuple("5")));
        x3_upper.add(factory.tuple("5").product(factory.tuple("6")));
        x3_upper.add(factory.tuple("6").product(factory.tuple("7")));
        bounds.boundExactly(x3, x3_upper);

        TupleSet x4_upper = factory.noneOf(1);
        x4_upper.add(factory.tuple("0"));
        x4_upper.add(factory.tuple("1"));
        x4_upper.add(factory.tuple("2"));
        x4_upper.add(factory.tuple("3"));
        bounds.boundExactly(x4, x4_upper);

        TupleSet x5_upper = factory.noneOf(1);
        bounds.boundExactly(x5, x5_upper);

        TupleSet x6_upper = factory.noneOf(1);
        x6_upper.add(factory.tuple("Style$0"));
        x6_upper.add(factory.tuple("Style$1"));
        x6_upper.add(factory.tuple("Style$2"));
        x6_upper.add(factory.tuple("Style$3"));
        bounds.bound(x6, x6_upper);

        TupleSet x7_upper = factory.noneOf(1);
        x7_upper.add(factory.tuple("Style$0"));
        x7_upper.add(factory.tuple("Style$1"));
        x7_upper.add(factory.tuple("Style$2"));
        x7_upper.add(factory.tuple("Style$3"));
        bounds.bound(x7, x7_upper);

        TupleSet x8_upper = factory.noneOf(1);
        x8_upper.add(factory.tuple("State$0"));
        x8_upper.add(factory.tuple("State$1"));
        x8_upper.add(factory.tuple("State$2"));
        x8_upper.add(factory.tuple("State$3"));
        bounds.bound(x8, x8_upper);

        TupleSet x9_upper = factory.noneOf(1);
        x9_upper.add(factory.tuple("State$0"));
        x9_upper.add(factory.tuple("State$1"));
        x9_upper.add(factory.tuple("State$2"));
        x9_upper.add(factory.tuple("State$3"));
        bounds.bound(x9, x9_upper);

        TupleSet x10_upper = factory.noneOf(1);
        x10_upper.add(factory.tuple("Value$0"));
        x10_upper.add(factory.tuple("Value$1"));
        x10_upper.add(factory.tuple("Value$2"));
        x10_upper.add(factory.tuple("Value$3"));
        bounds.bound(x10, x10_upper);

        TupleSet x11_upper = factory.noneOf(2);
        x11_upper.add(factory.tuple("Style$0").product(factory.tuple("Style$0")));
        x11_upper.add(factory.tuple("Style$0").product(factory.tuple("Style$1")));
        x11_upper.add(factory.tuple("Style$0").product(factory.tuple("Style$2")));
        x11_upper.add(factory.tuple("Style$0").product(factory.tuple("Style$3")));
        x11_upper.add(factory.tuple("Style$1").product(factory.tuple("Style$0")));
        x11_upper.add(factory.tuple("Style$1").product(factory.tuple("Style$1")));
        x11_upper.add(factory.tuple("Style$1").product(factory.tuple("Style$2")));
        x11_upper.add(factory.tuple("Style$1").product(factory.tuple("Style$3")));
        x11_upper.add(factory.tuple("Style$2").product(factory.tuple("Style$0")));
        x11_upper.add(factory.tuple("Style$2").product(factory.tuple("Style$1")));
        x11_upper.add(factory.tuple("Style$2").product(factory.tuple("Style$2")));
        x11_upper.add(factory.tuple("Style$2").product(factory.tuple("Style$3")));
        x11_upper.add(factory.tuple("Style$3").product(factory.tuple("Style$0")));
        x11_upper.add(factory.tuple("Style$3").product(factory.tuple("Style$1")));
        x11_upper.add(factory.tuple("Style$3").product(factory.tuple("Style$2")));
        x11_upper.add(factory.tuple("Style$3").product(factory.tuple("Style$3")));
        bounds.bound(x11, x11_upper);

        TupleSet x12_upper = factory.noneOf(2);
        x12_upper.add(factory.tuple("Style$0").product(factory.tuple("Style$0")));
        x12_upper.add(factory.tuple("Style$0").product(factory.tuple("Style$1")));
        x12_upper.add(factory.tuple("Style$0").product(factory.tuple("Style$2")));
        x12_upper.add(factory.tuple("Style$0").product(factory.tuple("Style$3")));
        x12_upper.add(factory.tuple("Style$1").product(factory.tuple("Style$0")));
        x12_upper.add(factory.tuple("Style$1").product(factory.tuple("Style$1")));
        x12_upper.add(factory.tuple("Style$1").product(factory.tuple("Style$2")));
        x12_upper.add(factory.tuple("Style$1").product(factory.tuple("Style$3")));
        x12_upper.add(factory.tuple("Style$2").product(factory.tuple("Style$0")));
        x12_upper.add(factory.tuple("Style$2").product(factory.tuple("Style$1")));
        x12_upper.add(factory.tuple("Style$2").product(factory.tuple("Style$2")));
        x12_upper.add(factory.tuple("Style$2").product(factory.tuple("Style$3")));
        x12_upper.add(factory.tuple("Style$3").product(factory.tuple("Style$0")));
        x12_upper.add(factory.tuple("Style$3").product(factory.tuple("Style$1")));
        x12_upper.add(factory.tuple("Style$3").product(factory.tuple("Style$2")));
        x12_upper.add(factory.tuple("Style$3").product(factory.tuple("Style$3")));
        bounds.bound(x12, x12_upper);

        TupleSet x13_upper = factory.noneOf(2);
        x13_upper.add(factory.tuple("State$0").product(factory.tuple("Style$0")));
        x13_upper.add(factory.tuple("State$0").product(factory.tuple("Style$1")));
        x13_upper.add(factory.tuple("State$0").product(factory.tuple("Style$2")));
        x13_upper.add(factory.tuple("State$0").product(factory.tuple("Style$3")));
        x13_upper.add(factory.tuple("State$1").product(factory.tuple("Style$0")));
        x13_upper.add(factory.tuple("State$1").product(factory.tuple("Style$1")));
        x13_upper.add(factory.tuple("State$1").product(factory.tuple("Style$2")));
        x13_upper.add(factory.tuple("State$1").product(factory.tuple("Style$3")));
        x13_upper.add(factory.tuple("State$2").product(factory.tuple("Style$0")));
        x13_upper.add(factory.tuple("State$2").product(factory.tuple("Style$1")));
        x13_upper.add(factory.tuple("State$2").product(factory.tuple("Style$2")));
        x13_upper.add(factory.tuple("State$2").product(factory.tuple("Style$3")));
        x13_upper.add(factory.tuple("State$3").product(factory.tuple("Style$0")));
        x13_upper.add(factory.tuple("State$3").product(factory.tuple("Style$1")));
        x13_upper.add(factory.tuple("State$3").product(factory.tuple("Style$2")));
        x13_upper.add(factory.tuple("State$3").product(factory.tuple("Style$3")));
        bounds.bound(x13, x13_upper);

        TupleSet x14_upper = factory.noneOf(3);
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Style$0")).product(factory.tuple("Style$0")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Style$0")).product(factory.tuple("Style$1")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Style$0")).product(factory.tuple("Style$2")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Style$0")).product(factory.tuple("Style$3")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Style$1")).product(factory.tuple("Style$0")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Style$1")).product(factory.tuple("Style$1")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Style$1")).product(factory.tuple("Style$2")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Style$1")).product(factory.tuple("Style$3")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Style$2")).product(factory.tuple("Style$0")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Style$2")).product(factory.tuple("Style$1")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Style$2")).product(factory.tuple("Style$2")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Style$2")).product(factory.tuple("Style$3")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Style$3")).product(factory.tuple("Style$0")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Style$3")).product(factory.tuple("Style$1")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Style$3")).product(factory.tuple("Style$2")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Style$3")).product(factory.tuple("Style$3")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Style$0")).product(factory.tuple("Style$0")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Style$0")).product(factory.tuple("Style$1")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Style$0")).product(factory.tuple("Style$2")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Style$0")).product(factory.tuple("Style$3")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Style$1")).product(factory.tuple("Style$0")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Style$1")).product(factory.tuple("Style$1")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Style$1")).product(factory.tuple("Style$2")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Style$1")).product(factory.tuple("Style$3")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Style$2")).product(factory.tuple("Style$0")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Style$2")).product(factory.tuple("Style$1")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Style$2")).product(factory.tuple("Style$2")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Style$2")).product(factory.tuple("Style$3")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Style$3")).product(factory.tuple("Style$0")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Style$3")).product(factory.tuple("Style$1")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Style$3")).product(factory.tuple("Style$2")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Style$3")).product(factory.tuple("Style$3")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Style$0")).product(factory.tuple("Style$0")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Style$0")).product(factory.tuple("Style$1")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Style$0")).product(factory.tuple("Style$2")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Style$0")).product(factory.tuple("Style$3")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Style$1")).product(factory.tuple("Style$0")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Style$1")).product(factory.tuple("Style$1")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Style$1")).product(factory.tuple("Style$2")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Style$1")).product(factory.tuple("Style$3")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Style$2")).product(factory.tuple("Style$0")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Style$2")).product(factory.tuple("Style$1")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Style$2")).product(factory.tuple("Style$2")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Style$2")).product(factory.tuple("Style$3")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Style$3")).product(factory.tuple("Style$0")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Style$3")).product(factory.tuple("Style$1")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Style$3")).product(factory.tuple("Style$2")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Style$3")).product(factory.tuple("Style$3")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Style$0")).product(factory.tuple("Style$0")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Style$0")).product(factory.tuple("Style$1")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Style$0")).product(factory.tuple("Style$2")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Style$0")).product(factory.tuple("Style$3")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Style$1")).product(factory.tuple("Style$0")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Style$1")).product(factory.tuple("Style$1")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Style$1")).product(factory.tuple("Style$2")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Style$1")).product(factory.tuple("Style$3")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Style$2")).product(factory.tuple("Style$0")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Style$2")).product(factory.tuple("Style$1")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Style$2")).product(factory.tuple("Style$2")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Style$2")).product(factory.tuple("Style$3")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Style$3")).product(factory.tuple("Style$0")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Style$3")).product(factory.tuple("Style$1")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Style$3")).product(factory.tuple("Style$2")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Style$3")).product(factory.tuple("Style$3")));
        bounds.bound(x14, x14_upper);

        TupleSet x15_upper = factory.noneOf(2);
        x15_upper.add(factory.tuple("Value$0").product(factory.tuple("Value$0")));
        x15_upper.add(factory.tuple("Value$0").product(factory.tuple("Value$1")));
        x15_upper.add(factory.tuple("Value$0").product(factory.tuple("Value$2")));
        x15_upper.add(factory.tuple("Value$0").product(factory.tuple("Value$3")));
        x15_upper.add(factory.tuple("Value$1").product(factory.tuple("Value$0")));
        x15_upper.add(factory.tuple("Value$1").product(factory.tuple("Value$1")));
        x15_upper.add(factory.tuple("Value$1").product(factory.tuple("Value$2")));
        x15_upper.add(factory.tuple("Value$1").product(factory.tuple("Value$3")));
        x15_upper.add(factory.tuple("Value$2").product(factory.tuple("Value$0")));
        x15_upper.add(factory.tuple("Value$2").product(factory.tuple("Value$1")));
        x15_upper.add(factory.tuple("Value$2").product(factory.tuple("Value$2")));
        x15_upper.add(factory.tuple("Value$2").product(factory.tuple("Value$3")));
        x15_upper.add(factory.tuple("Value$3").product(factory.tuple("Value$0")));
        x15_upper.add(factory.tuple("Value$3").product(factory.tuple("Value$1")));
        x15_upper.add(factory.tuple("Value$3").product(factory.tuple("Value$2")));
        x15_upper.add(factory.tuple("Value$3").product(factory.tuple("Value$3")));
        bounds.bound(x15, x15_upper);

        TupleSet x16_upper = factory.noneOf(2);
        x16_upper.add(factory.tuple("Style$0").product(factory.tuple("Value$0")));
        x16_upper.add(factory.tuple("Style$0").product(factory.tuple("Value$1")));
        x16_upper.add(factory.tuple("Style$0").product(factory.tuple("Value$2")));
        x16_upper.add(factory.tuple("Style$0").product(factory.tuple("Value$3")));
        x16_upper.add(factory.tuple("Style$1").product(factory.tuple("Value$0")));
        x16_upper.add(factory.tuple("Style$1").product(factory.tuple("Value$1")));
        x16_upper.add(factory.tuple("Style$1").product(factory.tuple("Value$2")));
        x16_upper.add(factory.tuple("Style$1").product(factory.tuple("Value$3")));
        x16_upper.add(factory.tuple("Style$2").product(factory.tuple("Value$0")));
        x16_upper.add(factory.tuple("Style$2").product(factory.tuple("Value$1")));
        x16_upper.add(factory.tuple("Style$2").product(factory.tuple("Value$2")));
        x16_upper.add(factory.tuple("Style$2").product(factory.tuple("Value$3")));
        x16_upper.add(factory.tuple("Style$3").product(factory.tuple("Value$0")));
        x16_upper.add(factory.tuple("Style$3").product(factory.tuple("Value$1")));
        x16_upper.add(factory.tuple("Style$3").product(factory.tuple("Value$2")));
        x16_upper.add(factory.tuple("Style$3").product(factory.tuple("Value$3")));
        bounds.bound(x16, x16_upper);

        TupleSet x17_upper = factory.noneOf(3);
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("Style$0")).product(factory.tuple("Value$0")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("Style$0")).product(factory.tuple("Value$1")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("Style$0")).product(factory.tuple("Value$2")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("Style$0")).product(factory.tuple("Value$3")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("Style$1")).product(factory.tuple("Value$0")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("Style$1")).product(factory.tuple("Value$1")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("Style$1")).product(factory.tuple("Value$2")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("Style$1")).product(factory.tuple("Value$3")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("Style$2")).product(factory.tuple("Value$0")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("Style$2")).product(factory.tuple("Value$1")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("Style$2")).product(factory.tuple("Value$2")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("Style$2")).product(factory.tuple("Value$3")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("Style$3")).product(factory.tuple("Value$0")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("Style$3")).product(factory.tuple("Value$1")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("Style$3")).product(factory.tuple("Value$2")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("Style$3")).product(factory.tuple("Value$3")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("Style$0")).product(factory.tuple("Value$0")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("Style$0")).product(factory.tuple("Value$1")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("Style$0")).product(factory.tuple("Value$2")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("Style$0")).product(factory.tuple("Value$3")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("Style$1")).product(factory.tuple("Value$0")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("Style$1")).product(factory.tuple("Value$1")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("Style$1")).product(factory.tuple("Value$2")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("Style$1")).product(factory.tuple("Value$3")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("Style$2")).product(factory.tuple("Value$0")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("Style$2")).product(factory.tuple("Value$1")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("Style$2")).product(factory.tuple("Value$2")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("Style$2")).product(factory.tuple("Value$3")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("Style$3")).product(factory.tuple("Value$0")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("Style$3")).product(factory.tuple("Value$1")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("Style$3")).product(factory.tuple("Value$2")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("Style$3")).product(factory.tuple("Value$3")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("Style$0")).product(factory.tuple("Value$0")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("Style$0")).product(factory.tuple("Value$1")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("Style$0")).product(factory.tuple("Value$2")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("Style$0")).product(factory.tuple("Value$3")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("Style$1")).product(factory.tuple("Value$0")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("Style$1")).product(factory.tuple("Value$1")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("Style$1")).product(factory.tuple("Value$2")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("Style$1")).product(factory.tuple("Value$3")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("Style$2")).product(factory.tuple("Value$0")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("Style$2")).product(factory.tuple("Value$1")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("Style$2")).product(factory.tuple("Value$2")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("Style$2")).product(factory.tuple("Value$3")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("Style$3")).product(factory.tuple("Value$0")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("Style$3")).product(factory.tuple("Value$1")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("Style$3")).product(factory.tuple("Value$2")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("Style$3")).product(factory.tuple("Value$3")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("Style$0")).product(factory.tuple("Value$0")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("Style$0")).product(factory.tuple("Value$1")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("Style$0")).product(factory.tuple("Value$2")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("Style$0")).product(factory.tuple("Value$3")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("Style$1")).product(factory.tuple("Value$0")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("Style$1")).product(factory.tuple("Value$1")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("Style$1")).product(factory.tuple("Value$2")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("Style$1")).product(factory.tuple("Value$3")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("Style$2")).product(factory.tuple("Value$0")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("Style$2")).product(factory.tuple("Value$1")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("Style$2")).product(factory.tuple("Value$2")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("Style$2")).product(factory.tuple("Value$3")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("Style$3")).product(factory.tuple("Value$0")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("Style$3")).product(factory.tuple("Value$1")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("Style$3")).product(factory.tuple("Value$2")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("Style$3")).product(factory.tuple("Value$3")));
        bounds.bound(x17, x17_upper);

        bounds.boundExactly(-8,factory.range(factory.tuple("-8"),factory.tuple("-8")));
        bounds.boundExactly(-7,factory.range(factory.tuple("-7"),factory.tuple("-7")));
        bounds.boundExactly(-6,factory.range(factory.tuple("-6"),factory.tuple("-6")));
        bounds.boundExactly(-5,factory.range(factory.tuple("-5"),factory.tuple("-5")));
        bounds.boundExactly(-4,factory.range(factory.tuple("-4"),factory.tuple("-4")));
        bounds.boundExactly(-3,factory.range(factory.tuple("-3"),factory.tuple("-3")));
        bounds.boundExactly(-2,factory.range(factory.tuple("-2"),factory.tuple("-2")));
        bounds.boundExactly(-1,factory.range(factory.tuple("-1"),factory.tuple("-1")));
        bounds.boundExactly(0,factory.range(factory.tuple("0"),factory.tuple("0")));
        bounds.boundExactly(1,factory.range(factory.tuple("1"),factory.tuple("1")));
        bounds.boundExactly(2,factory.range(factory.tuple("2"),factory.tuple("2")));
        bounds.boundExactly(3,factory.range(factory.tuple("3"),factory.tuple("3")));
        bounds.boundExactly(4,factory.range(factory.tuple("4"),factory.tuple("4")));
        bounds.boundExactly(5,factory.range(factory.tuple("5"),factory.tuple("5")));
        bounds.boundExactly(6,factory.range(factory.tuple("6"),factory.tuple("6")));
        bounds.boundExactly(7,factory.range(factory.tuple("7"),factory.tuple("7")));

        Variable x21=Variable.unary("PreserveForest_this");
        Decls x20=x21.oneOf(x6);
        Expression x24=x21.join(x16);
        Formula x23=x24.one();
        Formula x25=x24.in(x10);
        Formula x22=x23.and(x25);
        Formula x19=x22.forAll(x20);
        Expression x27=x16.join(Expression.UNIV);
        Formula x26=x27.in(x6);
        Variable x31=Variable.unary("PreserveForest_this");
        Expression x32=x6.union(x7);
        Decls x30=x31.oneOf(x32);
        Expression x34=x31.join(x11);
        Formula x33=x34.in(x32);
        Formula x29=x33.forAll(x30);
        Expression x36=x11.join(Expression.UNIV);
        Formula x35=x36.in(x32);
        Variable x39=Variable.unary("PreserveForest_this");
        Decls x38=x39.oneOf(x32);
        Expression x41=x39.join(x12);
        Formula x40=x41.in(x32);
        Formula x37=x40.forAll(x38);
        Expression x43=x12.join(Expression.UNIV);
        Formula x42=x43.in(x32);
        Variable x46=Variable.unary("PreserveForest_this");
        Decls x45=x46.oneOf(x8);
        Expression x50=x46.join(x17);
        Expression x51=x32.product(x10);
        Formula x49=x50.in(x51);
        Variable x54=Variable.unary("");
        Decls x53=x54.oneOf(x32);
        Expression x57=x54.join(x50);
        Formula x56=x57.one();
        Formula x58=x57.in(x10);
        Formula x55=x56.and(x58);
        Formula x52=x55.forAll(x53);
        Formula x48=x49.and(x52);
        Variable x61=Variable.unary("");
        Decls x60=x61.oneOf(x10);
        Expression x63=x50.join(x61);
        Formula x62=x63.in(x32);
        Formula x59=x62.forAll(x60);
        Formula x47=x48.and(x59);
        Formula x44=x47.forAll(x45);
        Expression x66=x17.join(Expression.UNIV);
        Expression x65=x66.join(Expression.UNIV);
        Formula x64=x65.in(x8);
        Variable x69=Variable.unary("PreserveForest_this");
        Expression x70=x8.union(x9);
        Decls x68=x69.oneOf(x70);
        Expression x72=x69.join(x13);
        Formula x71=x72.in(x32);
        Formula x67=x71.forAll(x68);
        Expression x74=x13.join(Expression.UNIV);
        Formula x73=x74.in(x70);
        Variable x77=Variable.unary("PreserveForest_this");
        Decls x76=x77.oneOf(x70);
        Expression x79=x77.join(x14);
        Expression x80=x32.product(x32);
        Formula x78=x79.in(x80);
        Formula x75=x78.forAll(x76);
        Expression x83=x14.join(Expression.UNIV);
        Expression x82=x83.join(Expression.UNIV);
        Formula x81=x82.in(x70);
        Variable x86=Variable.unary("PreserveForest_this");
        Decls x85=x86.oneOf(x10);
        Expression x89=x86.join(x15);
        Formula x88=x89.one();
        Formula x90=x89.in(x10);
        Formula x87=x88.and(x90);
        Formula x84=x87.forAll(x85);
        Expression x92=x15.join(Expression.UNIV);
        Formula x91=x92.in(x10);
        Expression x97=x32.product(Expression.UNIV);
        Expression x104=Expression.INTS.union(x5);
        Expression x103=x104.union(x32);
        Expression x102=x103.union(x70);
        Expression x101=x102.union(x10);
        Expression x100=x101.product(Expression.UNIV);
        Expression x98=Expression.IDEN.intersection(x100);
        Expression x96=x97.intersection(x98);
        Formula x95=x96.in(x11);
        Expression x107=x11.join(x11);
        Formula x106=x107.in(x11);
        Formula x94=x95.and(x106);
        Expression x109=x11.transpose();
        Formula x108=x109.in(x11);
        Formula x93=x94.and(x108);
        Variable x112=Variable.unary("acyclic_x");
        Decls x111=x112.oneOf(x32);
        Expression x116=x12.closure();
        Expression x115=x112.join(x116);
        Formula x114=x112.in(x115);
        Formula x113=x114.not();
        Formula x110=x113.forAll(x111);
        Variable x119=Variable.unary("PreserveForest_x");
        Decls x118=x119.oneOf(x32);
        Expression x124=x119.join(x11);
        Expression x123=x124.join(x12);
        Expression x122=x123.join(x11);
        Expression x125=x119.join(x12);
        Formula x121=x122.eq(x125);
        Variable x129=Variable.unary("PreserveForest_y");
        Expression x130=x119.join(x12);
        Decls x128=x129.oneOf(x130);
        Variable x132=Variable.unary("PreserveForest_z");
        Decls x131=x132.oneOf(x130);
        Decls x127=x128.and(x131);
        Expression x134=x132.join(x11);
        Formula x133=x129.in(x134);
        Formula x126=x133.forAll(x127);
        Formula x120=x121.and(x126);
        Formula x117=x120.forAll(x118);
        Variable x138=Variable.unary("PreserveForest_s");
        Decls x137=x138.oneOf(x70);
        Variable x140=Variable.unary("PreserveForest_x");
        Decls x139=x140.oneOf(x32);
        Decls x136=x137.and(x139);
        Expression x143=x138.join(x14);
        Expression x142=x140.join(x143);
        Expression x147=x12.closure();
        Expression x149=x101.product(Expression.UNIV);
        Expression x148=Expression.IDEN.intersection(x149);
        Expression x146=x147.union(x148);
        Expression x145=x140.join(x146);
        Expression x150=x138.join(x13);
        Expression x144=x145.intersection(x150);
        Formula x141=x142.eq(x144);
        Formula x135=x141.forAll(x136);
        Formula x151=x32.eq(x6);
        Formula x152=x70.eq(x8);
        Variable x157=Variable.unary("PreserveForest_s");
        Decls x156=x157.oneOf(x70);
        Variable x159=Variable.unary("PreserveForest_s'");
        Decls x158=x159.oneOf(x70);
        Variable x161=Variable.unary("PreserveForest_z");
        Decls x160=x161.oneOf(x32);
        Decls x155=x156.and(x158).and(x160);
        Variable x168=Variable.unary("Forest_x");
        Expression x169=x157.join(x13);
        Decls x167=x168.oneOf(x169);
        Variable x172=Variable.unary("Forest_root");
        Expression x174=x157.join(x14);
        Expression x173=x168.join(x174);
        Decls x171=x172.oneOf(x173);
        Expression x177=x172.join(x12);
        Formula x176=x177.no();
        Variable x180=Variable.unary("Forest_y");
        Expression x183=x157.join(x14);
        Expression x182=x168.join(x183);
        Expression x181=x182.difference(x172);
        Decls x179=x180.oneOf(x181);
        Expression x186=x180.join(x12);
        Expression x187=x157.join(x13);
        Expression x185=x186.intersection(x187);
        Formula x184=x185.one();
        Formula x178=x184.forAll(x179);
        Formula x175=x176.and(x178);
        Formula x170=x175.forSome(x171);
        Formula x166=x170.forAll(x167);
        Variable x190=Variable.unary("Forest_x");
        Decls x189=x190.oneOf(x32);
        Expression x193=x190.join(x11);
        Expression x194=x157.join(x13);
        Expression x192=x193.intersection(x194);
        Formula x191=x192.lone();
        Formula x188=x191.forAll(x189);
        Formula x165=x166.and(x188);
        Variable x198=Variable.unary("AddStyleToContext_x");
        Expression x200=x12.closure();
        Expression x199=x161.join(x200);
        Decls x197=x198.oneOf(x199);
        Expression x203=x198.join(x11);
        Expression x204=x157.join(x13);
        Expression x202=x203.intersection(x204);
        Formula x201=x202.some();
        Formula x196=x201.forAll(x197);
        Expression x206=x159.join(x13);
        Expression x209=x157.join(x13);
        Expression x210=x161.join(x11);
        Expression x208=x209.difference(x210);
        Expression x207=x208.union(x161);
        Formula x205=x206.eq(x207);
        Formula x195=x196.and(x205);
        Formula x164=x165.and(x195);
        Formula x163=x164.not();
        Variable x214=Variable.unary("Forest_x");
        Expression x215=x159.join(x13);
        Decls x213=x214.oneOf(x215);
        Variable x218=Variable.unary("Forest_root");
        Expression x220=x159.join(x14);
        Expression x219=x214.join(x220);
        Decls x217=x218.oneOf(x219);
        Expression x223=x218.join(x12);
        Formula x222=x223.no();
        Variable x226=Variable.unary("Forest_y");
        Expression x229=x159.join(x14);
        Expression x228=x214.join(x229);
        Expression x227=x228.difference(x218);
        Decls x225=x226.oneOf(x227);
        Expression x232=x226.join(x12);
        Expression x233=x159.join(x13);
        Expression x231=x232.intersection(x233);
        Formula x230=x231.one();
        Formula x224=x230.forAll(x225);
        Formula x221=x222.and(x224);
        Formula x216=x221.forSome(x217);
        Formula x212=x216.forAll(x213);
        Variable x236=Variable.unary("Forest_x");
        Decls x235=x236.oneOf(x32);
        Expression x239=x236.join(x11);
        Expression x240=x159.join(x13);
        Expression x238=x239.intersection(x240);
        Formula x237=x238.lone();
        Formula x234=x237.forAll(x235);
        Formula x211=x212.and(x234);
        Formula x162=x163.or(x211);
        Formula x154=x162.forAll(x155);
        Formula x153=x154.not();
        Formula x241=x0.eq(x0);
        Formula x242=x1.eq(x1);
        Formula x243=x2.eq(x2);
        Formula x244=x3.eq(x3);
        Formula x245=x4.eq(x4);
        Formula x246=x5.eq(x5);
        Formula x247=x6.eq(x6);
        Formula x248=x7.eq(x7);
        Formula x249=x8.eq(x8);
        Formula x250=x9.eq(x9);
        Formula x251=x10.eq(x10);
        Formula x252=x11.eq(x11);
        Formula x253=x12.eq(x12);
        Formula x254=x13.eq(x13);
        Formula x255=x14.eq(x14);
        Formula x256=x15.eq(x15);
        Formula x257=x16.eq(x16);
        Formula x258=x17.eq(x17);
        Formula x18=Formula.compose(FormulaOperator.AND, x19, x26, x29, x35, x37, x42, x44, x64, x67, x73, x75, x81, x84, x91, x93, x110, x117, x135, x151, x152, x153, x241, x242, x243, x244, x245, x246, x247, x248, x249, x250, x251, x252, x253, x254, x255, x256, x257, x258);

        Solver solver = new Solver();
        solver.options().setSolver(SATFactory.MiniSat);
        solver.options().setBitwidth(4);
        //solver.options().setFlatten(false);
        solver.options().setIntEncoding(Options.IntEncoding.TWOSCOMPLEMENT);
        solver.options().setSymmetryBreaking(20);
        solver.options().setSkolemDepth(0);
        System.out.println("Solving...");
        System.out.flush();
        Solution sol = solver.solve(x18,bounds);
        System.out.println(sol.toString());
    }}