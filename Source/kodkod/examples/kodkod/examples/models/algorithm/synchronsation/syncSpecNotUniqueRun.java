package kodkod.examples.models.algorithm.synchronsation;

import java.util.Arrays;
import java.util.List;
import kodkod.ast.*;
import kodkod.ast.operator.*;
import kodkod.examples.ExampleMetadata;
import kodkod.instance.*;
import kodkod.engine.*;
import kodkod.engine.satlab.SATFactory;
import kodkod.engine.config.Options;

@ExampleMetadata(
        Name = "sync",
        Note = "",
        IsCheck = false,
        PartialModel = true,
        BinaryRelations = 2,
        TernaryRelations = 0,
        NaryRelations = 0,
        HierarchicalTypes = 2,
        NestedRelationalJoins = 4,
        TransitiveClosure = 36,
        NestedQuantifiers = 2,
        SetCardinality = 0,
        Additions = 0,
        Subtractions = 0,
        Comparison = 18,
        OrderedRelations = 0,
        Constraints = 22
)


public final class syncSpecNotUniqueRun {

    public static void main(String[] args) throws Exception {

        Relation x0 = Relation.unary("Int/min");
        Relation x1 = Relation.unary("Int/zero");
        Relation x2 = Relation.unary("Int/max");
        Relation x3 = Relation.nary("Int/next", 2);
        Relation x4 = Relation.unary("seq/Int");
        Relation x5 = Relation.unary("String");
        Relation x6 = Relation.unary("this/RootName");
        Relation x7 = Relation.unary("this/Name remainder");
        Relation x8 = Relation.unary("this/Dir");
        Relation x9 = Relation.unary("this/FileContents remainder");
        Relation x10 = Relation.nary("this/Name.children", 2);

        List<String> atomlist = Arrays.asList(
                "-1", "-2", "-3", "-4", "-5",
                "-6", "-7", "-8", "0", "1", "2",
                "3", "4", "5", "6", "7", "Dir$0",
                "FileContents$0", "FileContents$1", "FileContents$2", "FileContents$3", "Name$0", "Name$1",
                "Name$2", "Name$3", "RootName$0"
        );

        Universe universe = new Universe(atomlist);
        TupleFactory factory = universe.factory();
        Bounds bounds = new Bounds(universe);

        TupleSet x0_upper = factory.noneOf(1);
        x0_upper.add(factory.tuple("-8"));
        bounds.boundExactly(x0, x0_upper);

        TupleSet x1_upper = factory.noneOf(1);
        x1_upper.add(factory.tuple("0"));
        bounds.boundExactly(x1, x1_upper);

        TupleSet x2_upper = factory.noneOf(1);
        x2_upper.add(factory.tuple("7"));
        bounds.boundExactly(x2, x2_upper);

        TupleSet x3_upper = factory.noneOf(2);
        x3_upper.add(factory.tuple("-8").product(factory.tuple("-7")));
        x3_upper.add(factory.tuple("-7").product(factory.tuple("-6")));
        x3_upper.add(factory.tuple("-6").product(factory.tuple("-5")));
        x3_upper.add(factory.tuple("-5").product(factory.tuple("-4")));
        x3_upper.add(factory.tuple("-4").product(factory.tuple("-3")));
        x3_upper.add(factory.tuple("-3").product(factory.tuple("-2")));
        x3_upper.add(factory.tuple("-2").product(factory.tuple("-1")));
        x3_upper.add(factory.tuple("-1").product(factory.tuple("0")));
        x3_upper.add(factory.tuple("0").product(factory.tuple("1")));
        x3_upper.add(factory.tuple("1").product(factory.tuple("2")));
        x3_upper.add(factory.tuple("2").product(factory.tuple("3")));
        x3_upper.add(factory.tuple("3").product(factory.tuple("4")));
        x3_upper.add(factory.tuple("4").product(factory.tuple("5")));
        x3_upper.add(factory.tuple("5").product(factory.tuple("6")));
        x3_upper.add(factory.tuple("6").product(factory.tuple("7")));
        bounds.boundExactly(x3, x3_upper);

        TupleSet x4_upper = factory.noneOf(1);
        x4_upper.add(factory.tuple("0"));
        x4_upper.add(factory.tuple("1"));
        x4_upper.add(factory.tuple("2"));
        x4_upper.add(factory.tuple("3"));
        x4_upper.add(factory.tuple("4"));
        bounds.boundExactly(x4, x4_upper);

        TupleSet x5_upper = factory.noneOf(1);
        bounds.boundExactly(x5, x5_upper);

        TupleSet x6_upper = factory.noneOf(1);
        x6_upper.add(factory.tuple("RootName$0"));
        bounds.boundExactly(x6, x6_upper);

        TupleSet x7_upper = factory.noneOf(1);
        x7_upper.add(factory.tuple("Name$0"));
        x7_upper.add(factory.tuple("Name$1"));
        x7_upper.add(factory.tuple("Name$2"));
        x7_upper.add(factory.tuple("Name$3"));
        bounds.bound(x7, x7_upper);

        TupleSet x8_upper = factory.noneOf(1);
        x8_upper.add(factory.tuple("Dir$0"));
        bounds.boundExactly(x8, x8_upper);

        TupleSet x9_upper = factory.noneOf(1);
        x9_upper.add(factory.tuple("FileContents$0"));
        x9_upper.add(factory.tuple("FileContents$1"));
        x9_upper.add(factory.tuple("FileContents$2"));
        x9_upper.add(factory.tuple("FileContents$3"));
        bounds.bound(x9, x9_upper);

        TupleSet x10_upper = factory.noneOf(2);
        x10_upper.add(factory.tuple("RootName$0").product(factory.tuple("RootName$0")));
        x10_upper.add(factory.tuple("RootName$0").product(factory.tuple("Name$0")));
        x10_upper.add(factory.tuple("RootName$0").product(factory.tuple("Name$1")));
        x10_upper.add(factory.tuple("RootName$0").product(factory.tuple("Name$2")));
        x10_upper.add(factory.tuple("RootName$0").product(factory.tuple("Name$3")));
        x10_upper.add(factory.tuple("Name$0").product(factory.tuple("RootName$0")));
        x10_upper.add(factory.tuple("Name$0").product(factory.tuple("Name$0")));
        x10_upper.add(factory.tuple("Name$0").product(factory.tuple("Name$1")));
        x10_upper.add(factory.tuple("Name$0").product(factory.tuple("Name$2")));
        x10_upper.add(factory.tuple("Name$0").product(factory.tuple("Name$3")));
        x10_upper.add(factory.tuple("Name$1").product(factory.tuple("RootName$0")));
        x10_upper.add(factory.tuple("Name$1").product(factory.tuple("Name$0")));
        x10_upper.add(factory.tuple("Name$1").product(factory.tuple("Name$1")));
        x10_upper.add(factory.tuple("Name$1").product(factory.tuple("Name$2")));
        x10_upper.add(factory.tuple("Name$1").product(factory.tuple("Name$3")));
        x10_upper.add(factory.tuple("Name$2").product(factory.tuple("RootName$0")));
        x10_upper.add(factory.tuple("Name$2").product(factory.tuple("Name$0")));
        x10_upper.add(factory.tuple("Name$2").product(factory.tuple("Name$1")));
        x10_upper.add(factory.tuple("Name$2").product(factory.tuple("Name$2")));
        x10_upper.add(factory.tuple("Name$2").product(factory.tuple("Name$3")));
        x10_upper.add(factory.tuple("Name$3").product(factory.tuple("RootName$0")));
        x10_upper.add(factory.tuple("Name$3").product(factory.tuple("Name$0")));
        x10_upper.add(factory.tuple("Name$3").product(factory.tuple("Name$1")));
        x10_upper.add(factory.tuple("Name$3").product(factory.tuple("Name$2")));
        x10_upper.add(factory.tuple("Name$3").product(factory.tuple("Name$3")));
        bounds.bound(x10, x10_upper);

        bounds.boundExactly(-8,factory.range(factory.tuple("-8"),factory.tuple("-8")));
        bounds.boundExactly(-7,factory.range(factory.tuple("-7"),factory.tuple("-7")));
        bounds.boundExactly(-6,factory.range(factory.tuple("-6"),factory.tuple("-6")));
        bounds.boundExactly(-5,factory.range(factory.tuple("-5"),factory.tuple("-5")));
        bounds.boundExactly(-4,factory.range(factory.tuple("-4"),factory.tuple("-4")));
        bounds.boundExactly(-3,factory.range(factory.tuple("-3"),factory.tuple("-3")));
        bounds.boundExactly(-2,factory.range(factory.tuple("-2"),factory.tuple("-2")));
        bounds.boundExactly(-1,factory.range(factory.tuple("-1"),factory.tuple("-1")));
        bounds.boundExactly(0,factory.range(factory.tuple("0"),factory.tuple("0")));
        bounds.boundExactly(1,factory.range(factory.tuple("1"),factory.tuple("1")));
        bounds.boundExactly(2,factory.range(factory.tuple("2"),factory.tuple("2")));
        bounds.boundExactly(3,factory.range(factory.tuple("3"),factory.tuple("3")));
        bounds.boundExactly(4,factory.range(factory.tuple("4"),factory.tuple("4")));
        bounds.boundExactly(5,factory.range(factory.tuple("5"),factory.tuple("5")));
        bounds.boundExactly(6,factory.range(factory.tuple("6"),factory.tuple("6")));
        bounds.boundExactly(7,factory.range(factory.tuple("7"),factory.tuple("7")));

        Variable x14=Variable.unary("SyncSpecNotUnique_this");
        Expression x15=x6.union(x7);
        Decls x13=x14.oneOf(x15);
        Expression x17=x14.join(x10);
        Formula x16=x17.in(x15);
        Formula x12=x16.forAll(x13);
        Expression x19=x10.join(Expression.UNIV);
        Formula x18=x19.in(x15);
        Variable x25=Variable.unary("acyclic_x");
        Decls x24=x25.oneOf(x15);
        Expression x29=x10.closure();
        Expression x28=x25.join(x29);
        Formula x27=x25.in(x28);
        Formula x26=x27.not();
        Formula x23=x26.forAll(x24);
        Variable x32=Variable.unary("forest_n");
        Decls x31=x32.oneOf(x15);
        Expression x34=x10.join(x32);
        Formula x33=x34.lone();
        Formula x30=x33.forAll(x31);
        Formula x22=x23.and(x30);
        Variable x38=Variable.unary("tree_root");
        Decls x37=x38.oneOf(x15);
        Expression x40=x10.join(x38);
        Formula x39=x40.no();
        Expression x36=x39.comprehension(x37);
        Formula x35=x36.lone();
        Formula x21=x22.and(x35);
        Expression x44=x10.closure();
        Expression x50=Expression.INTS.union(x5);
        Expression x49=x50.union(x15);
        Expression x52=x8.union(x9);
        Expression x48=x49.union(x52);
        Expression x47=x48.product(Expression.UNIV);
        Expression x45=Expression.IDEN.intersection(x47);
        Expression x43=x44.union(x45);
        Expression x42=x6.join(x43);
        Formula x41=x15.in(x42);
        Variable x56=Variable.nary("SyncSpecNotUnique_A",2);
        Expression x57=x15.product(x52);
        Decls x55=x56.setOf(x57);
        Variable x59=Variable.nary("SyncSpecNotUnique_B",2);
        Decls x58=x59.setOf(x57);
        Variable x61=Variable.nary("SyncSpecNotUnique_A1'",2);
        Decls x60=x61.setOf(x57);
        Variable x63=Variable.nary("SyncSpecNotUnique_B1'",2);
        Decls x62=x63.setOf(x57);
        Variable x65=Variable.nary("SyncSpecNotUnique_A2'",2);
        Decls x64=x65.setOf(x57);
        Variable x67=Variable.nary("SyncSpecNotUnique_B2'",2);
        Decls x66=x67.setOf(x57);
        Variable x69=Variable.unary("SyncSpecNotUnique_Adirty");
        Decls x68=x69.setOf(x15);
        Variable x71=Variable.unary("SyncSpecNotUnique_Bdirty");
        Decls x70=x71.setOf(x15);
        Decls x54=x55.and(x58).and(x60).and(x62).and(x64).and(x66).and(x68).and(x70);
        Expression x76=x15.product(x52);
        Formula x75=x56.in(x76);
        Variable x79=Variable.unary("");
        Decls x78=x79.oneOf(x15);
        Expression x82=x79.join(x56);
        Formula x81=x82.lone();
        Formula x83=x82.in(x52);
        Formula x80=x81.and(x83);
        Formula x77=x80.forAll(x78);
        Formula x74=x75.and(x77);
        Variable x86=Variable.unary("");
        Decls x85=x86.oneOf(x52);
        Expression x88=x56.join(x86);
        Formula x87=x88.in(x15);
        Formula x84=x87.forAll(x85);
        Formula x73=x74.and(x84);
        Expression x92=x15.product(x52);
        Formula x91=x59.in(x92);
        Variable x95=Variable.unary("");
        Decls x94=x95.oneOf(x15);
        Expression x98=x95.join(x59);
        Formula x97=x98.lone();
        Formula x99=x98.in(x52);
        Formula x96=x97.and(x99);
        Formula x93=x96.forAll(x94);
        Formula x90=x91.and(x93);
        Variable x102=Variable.unary("");
        Decls x101=x102.oneOf(x52);
        Expression x104=x59.join(x102);
        Formula x103=x104.in(x15);
        Formula x100=x103.forAll(x101);
        Formula x89=x90.and(x100);
        Expression x108=x15.product(x52);
        Formula x107=x61.in(x108);
        Variable x111=Variable.unary("");
        Decls x110=x111.oneOf(x15);
        Expression x114=x111.join(x61);
        Formula x113=x114.lone();
        Formula x115=x114.in(x52);
        Formula x112=x113.and(x115);
        Formula x109=x112.forAll(x110);
        Formula x106=x107.and(x109);
        Variable x118=Variable.unary("");
        Decls x117=x118.oneOf(x52);
        Expression x120=x61.join(x118);
        Formula x119=x120.in(x15);
        Formula x116=x119.forAll(x117);
        Formula x105=x106.and(x116);
        Expression x124=x15.product(x52);
        Formula x123=x63.in(x124);
        Variable x127=Variable.unary("");
        Decls x126=x127.oneOf(x15);
        Expression x130=x127.join(x63);
        Formula x129=x130.lone();
        Formula x131=x130.in(x52);
        Formula x128=x129.and(x131);
        Formula x125=x128.forAll(x126);
        Formula x122=x123.and(x125);
        Variable x134=Variable.unary("");
        Decls x133=x134.oneOf(x52);
        Expression x136=x63.join(x134);
        Formula x135=x136.in(x15);
        Formula x132=x135.forAll(x133);
        Formula x121=x122.and(x132);
        Expression x140=x15.product(x52);
        Formula x139=x65.in(x140);
        Variable x143=Variable.unary("");
        Decls x142=x143.oneOf(x15);
        Expression x146=x143.join(x65);
        Formula x145=x146.lone();
        Formula x147=x146.in(x52);
        Formula x144=x145.and(x147);
        Formula x141=x144.forAll(x142);
        Formula x138=x139.and(x141);
        Variable x150=Variable.unary("");
        Decls x149=x150.oneOf(x52);
        Expression x152=x65.join(x150);
        Formula x151=x152.in(x15);
        Formula x148=x151.forAll(x149);
        Formula x137=x138.and(x148);
        Expression x156=x15.product(x52);
        Formula x155=x67.in(x156);
        Variable x159=Variable.unary("");
        Decls x158=x159.oneOf(x15);
        Expression x162=x159.join(x67);
        Formula x161=x162.lone();
        Formula x163=x162.in(x52);
        Formula x160=x161.and(x163);
        Formula x157=x160.forAll(x158);
        Formula x154=x155.and(x157);
        Variable x166=Variable.unary("");
        Decls x165=x166.oneOf(x52);
        Expression x168=x67.join(x166);
        Formula x167=x168.in(x15);
        Formula x164=x167.forAll(x165);
        Formula x153=x154.and(x164);
        Variable x174=Variable.unary("IsValidFS_n");
        Expression x175=x15.difference(x6);
        Decls x173=x174.oneOf(x175);
        Expression x181=x174.join(x56);
        Formula x180=x181.eq(x8);
        Formula x179=x180.not();
        Formula x178=x179.not();
        Expression x185=x10.closure();
        Expression x184=x174.join(x185);
        Expression x183=x184.join(x56);
        Formula x182=x183.no();
        Formula x177=x178.or(x182);
        Expression x189=x174.join(x56);
        Formula x188=x189.some();
        Formula x187=x188.not();
        Expression x193=x10.transpose();
        Expression x192=x174.join(x193);
        Expression x191=x192.join(x56);
        Formula x190=x191.some();
        Formula x186=x187.or(x190);
        Formula x176=x177.and(x186);
        Formula x172=x176.forAll(x173);
        Expression x195=x6.join(x56);
        Formula x194=x195.eq(x8);
        Formula x171=x172.and(x194);
        Variable x201=Variable.unary("IsValidFS_n");
        Expression x202=x15.difference(x6);
        Decls x200=x201.oneOf(x202);
        Expression x208=x201.join(x59);
        Formula x207=x208.eq(x8);
        Formula x206=x207.not();
        Formula x205=x206.not();
        Expression x212=x10.closure();
        Expression x211=x201.join(x212);
        Expression x210=x211.join(x59);
        Formula x209=x210.no();
        Formula x204=x205.or(x209);
        Expression x216=x201.join(x59);
        Formula x215=x216.some();
        Formula x214=x215.not();
        Expression x220=x10.transpose();
        Expression x219=x201.join(x220);
        Expression x218=x219.join(x59);
        Formula x217=x218.some();
        Formula x213=x214.or(x217);
        Formula x203=x204.and(x213);
        Formula x199=x203.forAll(x200);
        Expression x222=x6.join(x59);
        Formula x221=x222.eq(x8);
        Formula x198=x199.and(x221);
        Variable x226=Variable.unary("IsValidDirty_n");
        Decls x225=x226.oneOf(x71);
        Expression x229=x10.transpose();
        Expression x228=x226.join(x229);
        Formula x227=x228.in(x71);
        Formula x224=x227.forAll(x225);
        Formula x232=x6.in(x71);
        Formula x231=x232.not();
        Expression x234=x71.difference(x6);
        Formula x233=x234.some();
        Formula x230=x231.or(x233);
        Formula x223=x224.and(x230);
        Formula x197=x198.and(x223);
        Formula x237=x61.eq(x65);
        Formula x236=x237.not();
        Formula x239=x63.eq(x67);
        Formula x238=x239.not();
        Formula x235=x236.or(x238);
        Formula x196=x197.and(x235);
        Formula x170=x171.and(x196);
        Variable x245=Variable.unary("IsValidDirty_n");
        Decls x244=x245.oneOf(x69);
        Expression x248=x10.transpose();
        Expression x247=x245.join(x248);
        Formula x246=x247.in(x69);
        Formula x243=x246.forAll(x244);
        Formula x251=x6.in(x69);
        Formula x250=x251.not();
        Expression x253=x69.difference(x6);
        Formula x252=x253.some();
        Formula x249=x250.or(x252);
        Formula x242=x243.and(x249);
        Variable x261=Variable.unary("IsValidFS_n");
        Expression x262=x15.difference(x6);
        Decls x260=x261.oneOf(x262);
        Expression x268=x261.join(x56);
        Formula x267=x268.eq(x8);
        Formula x266=x267.not();
        Formula x265=x266.not();
        Expression x272=x10.closure();
        Expression x271=x261.join(x272);
        Expression x270=x271.join(x56);
        Formula x269=x270.no();
        Formula x264=x265.or(x269);
        Expression x276=x261.join(x56);
        Formula x275=x276.some();
        Formula x274=x275.not();
        Expression x280=x10.transpose();
        Expression x279=x261.join(x280);
        Expression x278=x279.join(x56);
        Formula x277=x278.some();
        Formula x273=x274.or(x277);
        Formula x263=x264.and(x273);
        Formula x259=x263.forAll(x260);
        Expression x282=x6.join(x56);
        Formula x281=x282.eq(x8);
        Formula x258=x259.and(x281);
        Variable x287=Variable.unary("IsValidFS_n");
        Expression x288=x15.difference(x6);
        Decls x286=x287.oneOf(x288);
        Expression x294=x287.join(x59);
        Formula x293=x294.eq(x8);
        Formula x292=x293.not();
        Formula x291=x292.not();
        Expression x298=x10.closure();
        Expression x297=x287.join(x298);
        Expression x296=x297.join(x59);
        Formula x295=x296.no();
        Formula x290=x291.or(x295);
        Expression x302=x287.join(x59);
        Formula x301=x302.some();
        Formula x300=x301.not();
        Expression x306=x10.transpose();
        Expression x305=x287.join(x306);
        Expression x304=x305.join(x59);
        Formula x303=x304.some();
        Formula x299=x300.or(x303);
        Formula x289=x290.and(x299);
        Formula x285=x289.forAll(x286);
        Expression x308=x6.join(x59);
        Formula x307=x308.eq(x8);
        Formula x284=x285.and(x307);
        Variable x312=Variable.unary("IsValidDirty_n");
        Decls x311=x312.oneOf(x71);
        Expression x315=x10.transpose();
        Expression x314=x312.join(x315);
        Formula x313=x314.in(x71);
        Formula x310=x313.forAll(x311);
        Formula x318=x6.in(x71);
        Formula x317=x318.not();
        Expression x320=x71.difference(x6);
        Formula x319=x320.some();
        Formula x316=x317.or(x319);
        Formula x309=x310.and(x316);
        Formula x283=x284.and(x309);
        Formula x257=x258.and(x283);
        Variable x324=Variable.unary("IsValidDirty_n");
        Decls x323=x324.oneOf(x69);
        Expression x327=x10.transpose();
        Expression x326=x324.join(x327);
        Formula x325=x326.in(x69);
        Formula x322=x325.forAll(x323);
        Formula x330=x6.in(x69);
        Formula x329=x330.not();
        Expression x332=x69.difference(x6);
        Formula x331=x332.some();
        Formula x328=x329.or(x331);
        Formula x321=x322.and(x328);
        Formula x256=x257.and(x321);
        Formula x255=x256.not();
        Variable x337=Variable.unary("SyncSpec_p");
        Decls x336=x337.oneOf(x15);
        Formula x341=x337.eq(x6);
        Expression x346=x10.transpose();
        Expression x345=x337.join(x346);
        Expression x344=x345.join(x56);
        Formula x343=x344.eq(x8);
        Expression x350=x10.transpose();
        Expression x349=x337.join(x350);
        Expression x348=x349.join(x59);
        Formula x347=x348.eq(x8);
        Formula x342=x343.and(x347);
        Formula x340=x341.or(x342);
        Formula x339=x340.not();
        Expression x356=x337.join(x56);
        Expression x357=x337.join(x59);
        Formula x355=x356.eq(x357);
        Formula x354=x355.not();
        Expression x360=x337.join(x61);
        Expression x361=x337.join(x56);
        Formula x359=x360.eq(x361);
        Expression x363=x337.join(x63);
        Expression x364=x337.join(x59);
        Formula x362=x363.eq(x364);
        Formula x358=x359.and(x362);
        Formula x353=x354.or(x358);
        Formula x369=x337.in(x69);
        Formula x368=x369.not();
        Formula x367=x368.not();
        Expression x376=x10.closure();
        Expression x378=x48.product(Expression.UNIV);
        Expression x377=Expression.IDEN.intersection(x378);
        Expression x375=x376.union(x377);
        Expression x374=x337.join(x375);
        Expression x373=x374.product(x52);
        Expression x372=x61.intersection(x373);
        Expression x383=x10.closure();
        Expression x385=x48.product(Expression.UNIV);
        Expression x384=Expression.IDEN.intersection(x385);
        Expression x382=x383.union(x384);
        Expression x381=x337.join(x382);
        Expression x380=x381.product(x52);
        Expression x379=x59.intersection(x380);
        Formula x371=x372.eq(x379);
        Expression x391=x10.closure();
        Expression x393=x48.product(Expression.UNIV);
        Expression x392=Expression.IDEN.intersection(x393);
        Expression x390=x391.union(x392);
        Expression x389=x337.join(x390);
        Expression x388=x389.product(x52);
        Expression x387=x63.intersection(x388);
        Expression x398=x10.closure();
        Expression x400=x48.product(Expression.UNIV);
        Expression x399=Expression.IDEN.intersection(x400);
        Expression x397=x398.union(x399);
        Expression x396=x337.join(x397);
        Expression x395=x396.product(x52);
        Expression x394=x59.intersection(x395);
        Formula x386=x387.eq(x394);
        Formula x370=x371.and(x386);
        Formula x366=x367.or(x370);
        Formula x405=x337.in(x69);
        Formula x406=x337.in(x71);
        Formula x404=x405.and(x406);
        Expression x409=x337.join(x56);
        Expression x410=x337.join(x59);
        Formula x408=x409.eq(x410);
        Formula x407=x408.not();
        Formula x403=x404.and(x407);
        Formula x402=x403.not();
        Expression x417=x10.closure();
        Expression x419=x48.product(Expression.UNIV);
        Expression x418=Expression.IDEN.intersection(x419);
        Expression x416=x417.union(x418);
        Expression x415=x337.join(x416);
        Expression x414=x415.product(x52);
        Expression x413=x61.intersection(x414);
        Expression x424=x10.closure();
        Expression x426=x48.product(Expression.UNIV);
        Expression x425=Expression.IDEN.intersection(x426);
        Expression x423=x424.union(x425);
        Expression x422=x337.join(x423);
        Expression x421=x422.product(x52);
        Expression x420=x56.intersection(x421);
        Formula x412=x413.eq(x420);
        Expression x432=x10.closure();
        Expression x434=x48.product(Expression.UNIV);
        Expression x433=Expression.IDEN.intersection(x434);
        Expression x431=x432.union(x433);
        Expression x430=x337.join(x431);
        Expression x429=x430.product(x52);
        Expression x428=x63.intersection(x429);
        Expression x439=x10.closure();
        Expression x441=x48.product(Expression.UNIV);
        Expression x440=Expression.IDEN.intersection(x441);
        Expression x438=x439.union(x440);
        Expression x437=x337.join(x438);
        Expression x436=x437.product(x52);
        Expression x435=x59.intersection(x436);
        Formula x427=x428.eq(x435);
        Formula x411=x412.and(x427);
        Formula x401=x402.or(x411);
        Formula x365=x366.and(x401);
        Formula x352=x353.and(x365);
        Formula x445=x337.in(x71);
        Formula x444=x445.not();
        Formula x443=x444.not();
        Expression x452=x10.closure();
        Expression x454=x48.product(Expression.UNIV);
        Expression x453=Expression.IDEN.intersection(x454);
        Expression x451=x452.union(x453);
        Expression x450=x337.join(x451);
        Expression x449=x450.product(x52);
        Expression x448=x63.intersection(x449);
        Expression x459=x10.closure();
        Expression x461=x48.product(Expression.UNIV);
        Expression x460=Expression.IDEN.intersection(x461);
        Expression x458=x459.union(x460);
        Expression x457=x337.join(x458);
        Expression x456=x457.product(x52);
        Expression x455=x56.intersection(x456);
        Formula x447=x448.eq(x455);
        Expression x467=x10.closure();
        Expression x469=x48.product(Expression.UNIV);
        Expression x468=Expression.IDEN.intersection(x469);
        Expression x466=x467.union(x468);
        Expression x465=x337.join(x466);
        Expression x464=x465.product(x52);
        Expression x463=x61.intersection(x464);
        Expression x474=x10.closure();
        Expression x476=x48.product(Expression.UNIV);
        Expression x475=Expression.IDEN.intersection(x476);
        Expression x473=x474.union(x475);
        Expression x472=x337.join(x473);
        Expression x471=x472.product(x52);
        Expression x470=x56.intersection(x471);
        Formula x462=x463.eq(x470);
        Formula x446=x447.and(x462);
        Formula x442=x443.or(x446);
        Formula x351=x352.and(x442);
        Formula x338=x339.or(x351);
        Formula x335=x338.forAll(x336);
        Variable x480=Variable.unary("IsValidFS_n");
        Expression x481=x15.difference(x6);
        Decls x479=x480.oneOf(x481);
        Expression x487=x480.join(x61);
        Formula x486=x487.eq(x8);
        Formula x485=x486.not();
        Formula x484=x485.not();
        Expression x491=x10.closure();
        Expression x490=x480.join(x491);
        Expression x489=x490.join(x61);
        Formula x488=x489.no();
        Formula x483=x484.or(x488);
        Expression x495=x480.join(x61);
        Formula x494=x495.some();
        Formula x493=x494.not();
        Expression x499=x10.transpose();
        Expression x498=x480.join(x499);
        Expression x497=x498.join(x61);
        Formula x496=x497.some();
        Formula x492=x493.or(x496);
        Formula x482=x483.and(x492);
        Formula x478=x482.forAll(x479);
        Expression x501=x6.join(x61);
        Formula x500=x501.eq(x8);
        Formula x477=x478.and(x500);
        Formula x334=x335.and(x477);
        Variable x505=Variable.unary("IsValidFS_n");
        Expression x506=x15.difference(x6);
        Decls x504=x505.oneOf(x506);
        Expression x512=x505.join(x63);
        Formula x511=x512.eq(x8);
        Formula x510=x511.not();
        Formula x509=x510.not();
        Expression x516=x10.closure();
        Expression x515=x505.join(x516);
        Expression x514=x515.join(x63);
        Formula x513=x514.no();
        Formula x508=x509.or(x513);
        Expression x520=x505.join(x63);
        Formula x519=x520.some();
        Formula x518=x519.not();
        Expression x524=x10.transpose();
        Expression x523=x505.join(x524);
        Expression x522=x523.join(x63);
        Formula x521=x522.some();
        Formula x517=x518.or(x521);
        Formula x507=x508.and(x517);
        Formula x503=x507.forAll(x504);
        Expression x526=x6.join(x63);
        Formula x525=x526.eq(x8);
        Formula x502=x503.and(x525);
        Formula x333=x334.and(x502);
        Formula x254=x255.or(x333);
        Formula x241=x242.and(x254);
        Variable x534=Variable.unary("IsValidFS_n");
        Expression x535=x15.difference(x6);
        Decls x533=x534.oneOf(x535);
        Expression x541=x534.join(x56);
        Formula x540=x541.eq(x8);
        Formula x539=x540.not();
        Formula x538=x539.not();
        Expression x545=x10.closure();
        Expression x544=x534.join(x545);
        Expression x543=x544.join(x56);
        Formula x542=x543.no();
        Formula x537=x538.or(x542);
        Expression x549=x534.join(x56);
        Formula x548=x549.some();
        Formula x547=x548.not();
        Expression x553=x10.transpose();
        Expression x552=x534.join(x553);
        Expression x551=x552.join(x56);
        Formula x550=x551.some();
        Formula x546=x547.or(x550);
        Formula x536=x537.and(x546);
        Formula x532=x536.forAll(x533);
        Expression x555=x6.join(x56);
        Formula x554=x555.eq(x8);
        Formula x531=x532.and(x554);
        Variable x560=Variable.unary("IsValidFS_n");
        Expression x561=x15.difference(x6);
        Decls x559=x560.oneOf(x561);
        Expression x567=x560.join(x59);
        Formula x566=x567.eq(x8);
        Formula x565=x566.not();
        Formula x564=x565.not();
        Expression x571=x10.closure();
        Expression x570=x560.join(x571);
        Expression x569=x570.join(x59);
        Formula x568=x569.no();
        Formula x563=x564.or(x568);
        Expression x575=x560.join(x59);
        Formula x574=x575.some();
        Formula x573=x574.not();
        Expression x579=x10.transpose();
        Expression x578=x560.join(x579);
        Expression x577=x578.join(x59);
        Formula x576=x577.some();
        Formula x572=x573.or(x576);
        Formula x562=x563.and(x572);
        Formula x558=x562.forAll(x559);
        Expression x581=x6.join(x59);
        Formula x580=x581.eq(x8);
        Formula x557=x558.and(x580);
        Variable x585=Variable.unary("IsValidDirty_n");
        Decls x584=x585.oneOf(x71);
        Expression x588=x10.transpose();
        Expression x587=x585.join(x588);
        Formula x586=x587.in(x71);
        Formula x583=x586.forAll(x584);
        Formula x591=x6.in(x71);
        Formula x590=x591.not();
        Expression x593=x71.difference(x6);
        Formula x592=x593.some();
        Formula x589=x590.or(x592);
        Formula x582=x583.and(x589);
        Formula x556=x557.and(x582);
        Formula x530=x531.and(x556);
        Variable x597=Variable.unary("IsValidDirty_n");
        Decls x596=x597.oneOf(x69);
        Expression x600=x10.transpose();
        Expression x599=x597.join(x600);
        Formula x598=x599.in(x69);
        Formula x595=x598.forAll(x596);
        Formula x603=x6.in(x69);
        Formula x602=x603.not();
        Expression x605=x69.difference(x6);
        Formula x604=x605.some();
        Formula x601=x602.or(x604);
        Formula x594=x595.and(x601);
        Formula x529=x530.and(x594);
        Formula x528=x529.not();
        Variable x610=Variable.unary("SyncSpec_p");
        Decls x609=x610.oneOf(x15);
        Formula x614=x610.eq(x6);
        Expression x619=x10.transpose();
        Expression x618=x610.join(x619);
        Expression x617=x618.join(x56);
        Formula x616=x617.eq(x8);
        Expression x623=x10.transpose();
        Expression x622=x610.join(x623);
        Expression x621=x622.join(x59);
        Formula x620=x621.eq(x8);
        Formula x615=x616.and(x620);
        Formula x613=x614.or(x615);
        Formula x612=x613.not();
        Expression x629=x610.join(x56);
        Expression x630=x610.join(x59);
        Formula x628=x629.eq(x630);
        Formula x627=x628.not();
        Expression x633=x610.join(x65);
        Expression x634=x610.join(x56);
        Formula x632=x633.eq(x634);
        Expression x636=x610.join(x67);
        Expression x637=x610.join(x59);
        Formula x635=x636.eq(x637);
        Formula x631=x632.and(x635);
        Formula x626=x627.or(x631);
        Formula x642=x610.in(x69);
        Formula x641=x642.not();
        Formula x640=x641.not();
        Expression x649=x10.closure();
        Expression x651=x48.product(Expression.UNIV);
        Expression x650=Expression.IDEN.intersection(x651);
        Expression x648=x649.union(x650);
        Expression x647=x610.join(x648);
        Expression x646=x647.product(x52);
        Expression x645=x65.intersection(x646);
        Expression x656=x10.closure();
        Expression x658=x48.product(Expression.UNIV);
        Expression x657=Expression.IDEN.intersection(x658);
        Expression x655=x656.union(x657);
        Expression x654=x610.join(x655);
        Expression x653=x654.product(x52);
        Expression x652=x59.intersection(x653);
        Formula x644=x645.eq(x652);
        Expression x664=x10.closure();
        Expression x666=x48.product(Expression.UNIV);
        Expression x665=Expression.IDEN.intersection(x666);
        Expression x663=x664.union(x665);
        Expression x662=x610.join(x663);
        Expression x661=x662.product(x52);
        Expression x660=x67.intersection(x661);
        Expression x671=x10.closure();
        Expression x673=x48.product(Expression.UNIV);
        Expression x672=Expression.IDEN.intersection(x673);
        Expression x670=x671.union(x672);
        Expression x669=x610.join(x670);
        Expression x668=x669.product(x52);
        Expression x667=x59.intersection(x668);
        Formula x659=x660.eq(x667);
        Formula x643=x644.and(x659);
        Formula x639=x640.or(x643);
        Formula x678=x610.in(x69);
        Formula x679=x610.in(x71);
        Formula x677=x678.and(x679);
        Expression x682=x610.join(x56);
        Expression x683=x610.join(x59);
        Formula x681=x682.eq(x683);
        Formula x680=x681.not();
        Formula x676=x677.and(x680);
        Formula x675=x676.not();
        Expression x690=x10.closure();
        Expression x692=x48.product(Expression.UNIV);
        Expression x691=Expression.IDEN.intersection(x692);
        Expression x689=x690.union(x691);
        Expression x688=x610.join(x689);
        Expression x687=x688.product(x52);
        Expression x686=x65.intersection(x687);
        Expression x697=x10.closure();
        Expression x699=x48.product(Expression.UNIV);
        Expression x698=Expression.IDEN.intersection(x699);
        Expression x696=x697.union(x698);
        Expression x695=x610.join(x696);
        Expression x694=x695.product(x52);
        Expression x693=x56.intersection(x694);
        Formula x685=x686.eq(x693);
        Expression x705=x10.closure();
        Expression x707=x48.product(Expression.UNIV);
        Expression x706=Expression.IDEN.intersection(x707);
        Expression x704=x705.union(x706);
        Expression x703=x610.join(x704);
        Expression x702=x703.product(x52);
        Expression x701=x67.intersection(x702);
        Expression x712=x10.closure();
        Expression x714=x48.product(Expression.UNIV);
        Expression x713=Expression.IDEN.intersection(x714);
        Expression x711=x712.union(x713);
        Expression x710=x610.join(x711);
        Expression x709=x710.product(x52);
        Expression x708=x59.intersection(x709);
        Formula x700=x701.eq(x708);
        Formula x684=x685.and(x700);
        Formula x674=x675.or(x684);
        Formula x638=x639.and(x674);
        Formula x625=x626.and(x638);
        Formula x718=x610.in(x71);
        Formula x717=x718.not();
        Formula x716=x717.not();
        Expression x725=x10.closure();
        Expression x727=x48.product(Expression.UNIV);
        Expression x726=Expression.IDEN.intersection(x727);
        Expression x724=x725.union(x726);
        Expression x723=x610.join(x724);
        Expression x722=x723.product(x52);
        Expression x721=x67.intersection(x722);
        Expression x732=x10.closure();
        Expression x734=x48.product(Expression.UNIV);
        Expression x733=Expression.IDEN.intersection(x734);
        Expression x731=x732.union(x733);
        Expression x730=x610.join(x731);
        Expression x729=x730.product(x52);
        Expression x728=x56.intersection(x729);
        Formula x720=x721.eq(x728);
        Expression x740=x10.closure();
        Expression x742=x48.product(Expression.UNIV);
        Expression x741=Expression.IDEN.intersection(x742);
        Expression x739=x740.union(x741);
        Expression x738=x610.join(x739);
        Expression x737=x738.product(x52);
        Expression x736=x65.intersection(x737);
        Expression x747=x10.closure();
        Expression x749=x48.product(Expression.UNIV);
        Expression x748=Expression.IDEN.intersection(x749);
        Expression x746=x747.union(x748);
        Expression x745=x610.join(x746);
        Expression x744=x745.product(x52);
        Expression x743=x56.intersection(x744);
        Formula x735=x736.eq(x743);
        Formula x719=x720.and(x735);
        Formula x715=x716.or(x719);
        Formula x624=x625.and(x715);
        Formula x611=x612.or(x624);
        Formula x608=x611.forAll(x609);
        Variable x753=Variable.unary("IsValidFS_n");
        Expression x754=x15.difference(x6);
        Decls x752=x753.oneOf(x754);
        Expression x760=x753.join(x65);
        Formula x759=x760.eq(x8);
        Formula x758=x759.not();
        Formula x757=x758.not();
        Expression x764=x10.closure();
        Expression x763=x753.join(x764);
        Expression x762=x763.join(x65);
        Formula x761=x762.no();
        Formula x756=x757.or(x761);
        Expression x768=x753.join(x65);
        Formula x767=x768.some();
        Formula x766=x767.not();
        Expression x772=x10.transpose();
        Expression x771=x753.join(x772);
        Expression x770=x771.join(x65);
        Formula x769=x770.some();
        Formula x765=x766.or(x769);
        Formula x755=x756.and(x765);
        Formula x751=x755.forAll(x752);
        Expression x774=x6.join(x65);
        Formula x773=x774.eq(x8);
        Formula x750=x751.and(x773);
        Formula x607=x608.and(x750);
        Variable x778=Variable.unary("IsValidFS_n");
        Expression x779=x15.difference(x6);
        Decls x777=x778.oneOf(x779);
        Expression x785=x778.join(x67);
        Formula x784=x785.eq(x8);
        Formula x783=x784.not();
        Formula x782=x783.not();
        Expression x789=x10.closure();
        Expression x788=x778.join(x789);
        Expression x787=x788.join(x67);
        Formula x786=x787.no();
        Formula x781=x782.or(x786);
        Expression x793=x778.join(x67);
        Formula x792=x793.some();
        Formula x791=x792.not();
        Expression x797=x10.transpose();
        Expression x796=x778.join(x797);
        Expression x795=x796.join(x67);
        Formula x794=x795.some();
        Formula x790=x791.or(x794);
        Formula x780=x781.and(x790);
        Formula x776=x780.forAll(x777);
        Expression x799=x6.join(x67);
        Formula x798=x799.eq(x8);
        Formula x775=x776.and(x798);
        Formula x606=x607.and(x775);
        Formula x527=x528.or(x606);
        Formula x240=x241.and(x527);
        Formula x169=x170.and(x240);
        Formula x72=Formula.compose(FormulaOperator.AND, x73, x89, x105, x121, x137, x153, x169);
        Formula x53=x72.forSome(x54);
        Formula x800=x0.eq(x0);
        Formula x801=x1.eq(x1);
        Formula x802=x2.eq(x2);
        Formula x803=x3.eq(x3);
        Formula x804=x4.eq(x4);
        Formula x805=x5.eq(x5);
        Formula x806=x6.eq(x6);
        Formula x807=x7.eq(x7);
        Formula x808=x8.eq(x8);
        Formula x809=x9.eq(x9);
        Formula x810=x10.eq(x10);
        Formula x11=Formula.compose(FormulaOperator.AND, x12, x18, x21, x41, x53, x800, x801, x802, x803, x804, x805, x806, x807, x808, x809, x810);

        Solver solver = new Solver();
        solver.options().setSolver(SATFactory.MiniSat);
        solver.options().setBitwidth(4);
       // solver.options().setFlatten(false);
        solver.options().setIntEncoding(Options.IntEncoding.TWOSCOMPLEMENT);
        solver.options().setSymmetryBreaking(20);
        solver.options().setSkolemDepth(0);
        System.out.println("Solving...");
        System.out.flush();
        Solution sol = solver.solve(x11,bounds);
        System.out.println(sol.toString());
    }}