package kodkod.examples.models.algorithm.synchronsation;

import java.util.Arrays;
import java.util.List;
import kodkod.ast.*;
import kodkod.ast.operator.*;
import kodkod.examples.ExampleMetadata;
import kodkod.instance.*;
import kodkod.engine.*;
import kodkod.engine.satlab.SATFactory;
import kodkod.engine.config.Options;

@ExampleMetadata(
        Name = "syncimpl",
        Note = "",
        IsCheck = true,
        PartialModel = true,
        BinaryRelations = 8,
        TernaryRelations = 5,
        NaryRelations = 0,
        HierarchicalTypes = 3,
        NestedRelationalJoins = 8,
        TransitiveClosure = 65,
        NestedQuantifiers = 4,
        SetCardinality = 0,
        Additions = 0,
        Subtractions = 0,
        Comparison = 50,
        OrderedRelations = 1,
        Constraints = 52
)


public final class syncimplCorrectnessCheck {

    public static void main(String[] args) throws Exception {

        Relation x0 = Relation.unary("Int/min");
        Relation x1 = Relation.unary("Int/zero");
        Relation x2 = Relation.unary("Int/max");
        Relation x3 = Relation.nary("Int/next", 2);
        Relation x4 = Relation.unary("seq/Int");
        Relation x5 = Relation.unary("String");
        Relation x6 = Relation.unary("this/ReconName");
        Relation x7 = Relation.unary("sync/RootName");
        Relation x8 = Relation.unary("sync/Name remainder");
        Relation x9 = Relation.unary("sync/Dir");
        Relation x10 = Relation.unary("sync/FileContents remainder");
        Relation x11 = Relation.unary("ord/Ord");
        Relation x12 = Relation.nary("this/ReconName.Ain", 3);
        Relation x13 = Relation.nary("this/ReconName.Bin", 3);
        Relation x14 = Relation.nary("this/ReconName.Aout", 3);
        Relation x15 = Relation.nary("this/ReconName.Bout", 3);
        Relation x16 = Relation.nary("this/ReconName.p_children", 2);
        Relation x17 = Relation.nary("this/ReconName.first_p_child", 2);
        Relation x18 = Relation.nary("this/ReconName.last_p_child", 2);
        Relation x19 = Relation.nary("this/ReconName.prev_p_child", 3);
        Relation x20 = Relation.nary("sync/Name.children", 2);
        Relation x21 = Relation.unary("ord/Ord.First");
        Relation x22 = Relation.nary("ord/Ord.Next", 2);

        List<String> atomlist = Arrays.asList(
                "-1", "-2", "-3", "-4", "-5",
                "-6", "-7", "-8", "0", "1", "2",
                "3", "4", "5", "6", "7", "ord/Ord$0",
                "sync/Dir$0", "sync/FileContents$0", "sync/Name$0", "sync/Name$1", "sync/Name$2", "sync/RootName$0"
        );

        Universe universe = new Universe(atomlist);
        TupleFactory factory = universe.factory();
        Bounds bounds = new Bounds(universe);

        TupleSet x0_upper = factory.noneOf(1);
        x0_upper.add(factory.tuple("-8"));
        bounds.boundExactly(x0, x0_upper);

        TupleSet x1_upper = factory.noneOf(1);
        x1_upper.add(factory.tuple("0"));
        bounds.boundExactly(x1, x1_upper);

        TupleSet x2_upper = factory.noneOf(1);
        x2_upper.add(factory.tuple("7"));
        bounds.boundExactly(x2, x2_upper);

        TupleSet x3_upper = factory.noneOf(2);
        x3_upper.add(factory.tuple("-8").product(factory.tuple("-7")));
        x3_upper.add(factory.tuple("-7").product(factory.tuple("-6")));
        x3_upper.add(factory.tuple("-6").product(factory.tuple("-5")));
        x3_upper.add(factory.tuple("-5").product(factory.tuple("-4")));
        x3_upper.add(factory.tuple("-4").product(factory.tuple("-3")));
        x3_upper.add(factory.tuple("-3").product(factory.tuple("-2")));
        x3_upper.add(factory.tuple("-2").product(factory.tuple("-1")));
        x3_upper.add(factory.tuple("-1").product(factory.tuple("0")));
        x3_upper.add(factory.tuple("0").product(factory.tuple("1")));
        x3_upper.add(factory.tuple("1").product(factory.tuple("2")));
        x3_upper.add(factory.tuple("2").product(factory.tuple("3")));
        x3_upper.add(factory.tuple("3").product(factory.tuple("4")));
        x3_upper.add(factory.tuple("4").product(factory.tuple("5")));
        x3_upper.add(factory.tuple("5").product(factory.tuple("6")));
        x3_upper.add(factory.tuple("6").product(factory.tuple("7")));
        bounds.boundExactly(x3, x3_upper);

        TupleSet x4_upper = factory.noneOf(1);
        x4_upper.add(factory.tuple("0"));
        x4_upper.add(factory.tuple("1"));
        x4_upper.add(factory.tuple("2"));
        x4_upper.add(factory.tuple("3"));
        bounds.boundExactly(x4, x4_upper);

        TupleSet x5_upper = factory.noneOf(1);
        bounds.boundExactly(x5, x5_upper);

        TupleSet x6_upper = factory.noneOf(1);
        x6_upper.add(factory.tuple("sync/Name$0"));
        x6_upper.add(factory.tuple("sync/Name$1"));
        x6_upper.add(factory.tuple("sync/Name$2"));
        bounds.bound(x6, x6_upper);

        TupleSet x7_upper = factory.noneOf(1);
        x7_upper.add(factory.tuple("sync/RootName$0"));
        bounds.boundExactly(x7, x7_upper);

        TupleSet x8_upper = factory.noneOf(1);
        x8_upper.add(factory.tuple("sync/Name$0"));
        x8_upper.add(factory.tuple("sync/Name$1"));
        x8_upper.add(factory.tuple("sync/Name$2"));
        bounds.boundExactly(x8, x8_upper);

        TupleSet x9_upper = factory.noneOf(1);
        x9_upper.add(factory.tuple("sync/Dir$0"));
        bounds.boundExactly(x9, x9_upper);

        TupleSet x10_upper = factory.noneOf(1);
        x10_upper.add(factory.tuple("sync/FileContents$0"));
        bounds.bound(x10, x10_upper);

        TupleSet x11_upper = factory.noneOf(1);
        x11_upper.add(factory.tuple("ord/Ord$0"));
        bounds.boundExactly(x11, x11_upper);

        TupleSet x12_upper = factory.noneOf(3);
        x12_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Dir$0")));
        x12_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/FileContents$0")));
        x12_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Dir$0")));
        x12_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/FileContents$0")));
        x12_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Dir$0")));
        x12_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/FileContents$0")));
        x12_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Dir$0")));
        x12_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/FileContents$0")));
        x12_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Dir$0")));
        x12_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/FileContents$0")));
        x12_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Dir$0")));
        x12_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/FileContents$0")));
        x12_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Dir$0")));
        x12_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/FileContents$0")));
        x12_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Dir$0")));
        x12_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/FileContents$0")));
        x12_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Dir$0")));
        x12_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/FileContents$0")));
        x12_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Dir$0")));
        x12_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/FileContents$0")));
        x12_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Dir$0")));
        x12_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/FileContents$0")));
        x12_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Dir$0")));
        x12_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/FileContents$0")));
        bounds.bound(x12, x12_upper);

        TupleSet x13_upper = factory.noneOf(3);
        x13_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Dir$0")));
        x13_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/FileContents$0")));
        x13_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Dir$0")));
        x13_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/FileContents$0")));
        x13_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Dir$0")));
        x13_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/FileContents$0")));
        x13_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Dir$0")));
        x13_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/FileContents$0")));
        x13_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Dir$0")));
        x13_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/FileContents$0")));
        x13_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Dir$0")));
        x13_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/FileContents$0")));
        x13_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Dir$0")));
        x13_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/FileContents$0")));
        x13_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Dir$0")));
        x13_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/FileContents$0")));
        x13_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Dir$0")));
        x13_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/FileContents$0")));
        x13_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Dir$0")));
        x13_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/FileContents$0")));
        x13_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Dir$0")));
        x13_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/FileContents$0")));
        x13_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Dir$0")));
        x13_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/FileContents$0")));
        bounds.bound(x13, x13_upper);

        TupleSet x14_upper = factory.noneOf(3);
        x14_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Dir$0")));
        x14_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/FileContents$0")));
        x14_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Dir$0")));
        x14_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/FileContents$0")));
        x14_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Dir$0")));
        x14_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/FileContents$0")));
        x14_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Dir$0")));
        x14_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/FileContents$0")));
        x14_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Dir$0")));
        x14_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/FileContents$0")));
        x14_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Dir$0")));
        x14_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/FileContents$0")));
        x14_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Dir$0")));
        x14_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/FileContents$0")));
        x14_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Dir$0")));
        x14_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/FileContents$0")));
        x14_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Dir$0")));
        x14_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/FileContents$0")));
        x14_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Dir$0")));
        x14_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/FileContents$0")));
        x14_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Dir$0")));
        x14_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/FileContents$0")));
        x14_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Dir$0")));
        x14_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/FileContents$0")));
        bounds.bound(x14, x14_upper);

        TupleSet x15_upper = factory.noneOf(3);
        x15_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Dir$0")));
        x15_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/FileContents$0")));
        x15_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Dir$0")));
        x15_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/FileContents$0")));
        x15_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Dir$0")));
        x15_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/FileContents$0")));
        x15_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Dir$0")));
        x15_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/FileContents$0")));
        x15_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Dir$0")));
        x15_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/FileContents$0")));
        x15_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Dir$0")));
        x15_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/FileContents$0")));
        x15_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Dir$0")));
        x15_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/FileContents$0")));
        x15_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Dir$0")));
        x15_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/FileContents$0")));
        x15_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Dir$0")));
        x15_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/FileContents$0")));
        x15_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Dir$0")));
        x15_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/FileContents$0")));
        x15_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Dir$0")));
        x15_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/FileContents$0")));
        x15_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Dir$0")));
        x15_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/FileContents$0")));
        bounds.bound(x15, x15_upper);

        TupleSet x16_upper = factory.noneOf(2);
        x16_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")));
        x16_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")));
        x16_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")));
        x16_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")));
        x16_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")));
        x16_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")));
        x16_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")));
        x16_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")));
        x16_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")));
        x16_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")));
        x16_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")));
        x16_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")));
        bounds.bound(x16, x16_upper);

        TupleSet x17_upper = factory.noneOf(2);
        x17_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")));
        x17_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")));
        x17_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")));
        x17_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")));
        x17_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")));
        x17_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")));
        x17_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")));
        x17_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")));
        x17_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")));
        x17_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")));
        x17_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")));
        x17_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")));
        bounds.bound(x17, x17_upper);

        TupleSet x18_upper = factory.noneOf(2);
        x18_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")));
        x18_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")));
        x18_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")));
        x18_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")));
        x18_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")));
        x18_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")));
        x18_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")));
        x18_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")));
        x18_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")));
        x18_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")));
        x18_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")));
        x18_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")));
        bounds.bound(x18, x18_upper);

        TupleSet x19_upper = factory.noneOf(3);
        x19_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/RootName$0")));
        x19_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Name$0")));
        x19_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Name$1")));
        x19_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Name$2")));
        x19_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/RootName$0")));
        x19_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Name$0")));
        x19_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Name$1")));
        x19_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Name$2")));
        x19_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/RootName$0")));
        x19_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Name$0")));
        x19_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Name$1")));
        x19_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Name$2")));
        x19_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/RootName$0")));
        x19_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Name$0")));
        x19_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Name$1")));
        x19_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Name$2")));
        x19_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/RootName$0")));
        x19_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Name$0")));
        x19_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Name$1")));
        x19_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Name$2")));
        x19_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/RootName$0")));
        x19_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Name$0")));
        x19_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Name$1")));
        x19_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Name$2")));
        x19_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/RootName$0")));
        x19_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Name$0")));
        x19_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Name$1")));
        x19_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Name$2")));
        x19_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/RootName$0")));
        x19_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Name$0")));
        x19_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Name$1")));
        x19_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Name$2")));
        x19_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/RootName$0")));
        x19_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Name$0")));
        x19_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Name$1")));
        x19_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")).product(factory.tuple("sync/Name$2")));
        x19_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/RootName$0")));
        x19_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Name$0")));
        x19_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Name$1")));
        x19_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")).product(factory.tuple("sync/Name$2")));
        x19_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/RootName$0")));
        x19_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Name$0")));
        x19_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Name$1")));
        x19_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")).product(factory.tuple("sync/Name$2")));
        x19_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/RootName$0")));
        x19_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Name$0")));
        x19_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Name$1")));
        x19_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")).product(factory.tuple("sync/Name$2")));
        bounds.bound(x19, x19_upper);

        TupleSet x20_upper = factory.noneOf(2);
        x20_upper.add(factory.tuple("sync/RootName$0").product(factory.tuple("sync/RootName$0")));
        x20_upper.add(factory.tuple("sync/RootName$0").product(factory.tuple("sync/Name$0")));
        x20_upper.add(factory.tuple("sync/RootName$0").product(factory.tuple("sync/Name$1")));
        x20_upper.add(factory.tuple("sync/RootName$0").product(factory.tuple("sync/Name$2")));
        x20_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")));
        x20_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")));
        x20_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")));
        x20_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")));
        x20_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")));
        x20_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")));
        x20_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")));
        x20_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")));
        x20_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")));
        x20_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")));
        x20_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")));
        x20_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")));
        bounds.bound(x20, x20_upper);

        TupleSet x21_upper = factory.noneOf(1);
        x21_upper.add(factory.tuple("sync/RootName$0"));
        x21_upper.add(factory.tuple("sync/Name$0"));
        x21_upper.add(factory.tuple("sync/Name$1"));
        x21_upper.add(factory.tuple("sync/Name$2"));
        bounds.bound(x21, x21_upper);

        TupleSet x22_upper = factory.noneOf(2);
        x22_upper.add(factory.tuple("sync/RootName$0").product(factory.tuple("sync/RootName$0")));
        x22_upper.add(factory.tuple("sync/RootName$0").product(factory.tuple("sync/Name$0")));
        x22_upper.add(factory.tuple("sync/RootName$0").product(factory.tuple("sync/Name$1")));
        x22_upper.add(factory.tuple("sync/RootName$0").product(factory.tuple("sync/Name$2")));
        x22_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/RootName$0")));
        x22_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$0")));
        x22_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$1")));
        x22_upper.add(factory.tuple("sync/Name$0").product(factory.tuple("sync/Name$2")));
        x22_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/RootName$0")));
        x22_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$0")));
        x22_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$1")));
        x22_upper.add(factory.tuple("sync/Name$1").product(factory.tuple("sync/Name$2")));
        x22_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/RootName$0")));
        x22_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$0")));
        x22_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$1")));
        x22_upper.add(factory.tuple("sync/Name$2").product(factory.tuple("sync/Name$2")));
        bounds.bound(x22, x22_upper);

        bounds.boundExactly(-8,factory.range(factory.tuple("-8"),factory.tuple("-8")));
        bounds.boundExactly(-7,factory.range(factory.tuple("-7"),factory.tuple("-7")));
        bounds.boundExactly(-6,factory.range(factory.tuple("-6"),factory.tuple("-6")));
        bounds.boundExactly(-5,factory.range(factory.tuple("-5"),factory.tuple("-5")));
        bounds.boundExactly(-4,factory.range(factory.tuple("-4"),factory.tuple("-4")));
        bounds.boundExactly(-3,factory.range(factory.tuple("-3"),factory.tuple("-3")));
        bounds.boundExactly(-2,factory.range(factory.tuple("-2"),factory.tuple("-2")));
        bounds.boundExactly(-1,factory.range(factory.tuple("-1"),factory.tuple("-1")));
        bounds.boundExactly(0,factory.range(factory.tuple("0"),factory.tuple("0")));
        bounds.boundExactly(1,factory.range(factory.tuple("1"),factory.tuple("1")));
        bounds.boundExactly(2,factory.range(factory.tuple("2"),factory.tuple("2")));
        bounds.boundExactly(3,factory.range(factory.tuple("3"),factory.tuple("3")));
        bounds.boundExactly(4,factory.range(factory.tuple("4"),factory.tuple("4")));
        bounds.boundExactly(5,factory.range(factory.tuple("5"),factory.tuple("5")));
        bounds.boundExactly(6,factory.range(factory.tuple("6"),factory.tuple("6")));
        bounds.boundExactly(7,factory.range(factory.tuple("7"),factory.tuple("7")));

        Expression x25=x6.intersection(x7);
        Formula x24=x25.no();
        Variable x28=Variable.unary("Correctness_this");
        Decls x27=x28.oneOf(x6);
        Expression x30=x28.join(x12);
        Expression x33=x6.union(x7);
        Expression x32=x33.union(x8);
        Expression x34=x9.union(x10);
        Expression x31=x32.product(x34);
        Formula x29=x30.in(x31);
        Formula x26=x29.forAll(x27);
        Expression x37=x12.join(Expression.UNIV);
        Expression x36=x37.join(Expression.UNIV);
        Formula x35=x36.in(x6);
        Variable x41=Variable.unary("Correctness_this");
        Decls x40=x41.oneOf(x6);
        Expression x43=x41.join(x13);
        Expression x44=x32.product(x34);
        Formula x42=x43.in(x44);
        Formula x39=x42.forAll(x40);
        Expression x47=x13.join(Expression.UNIV);
        Expression x46=x47.join(Expression.UNIV);
        Formula x45=x46.in(x6);
        Variable x50=Variable.unary("Correctness_this");
        Decls x49=x50.oneOf(x6);
        Expression x52=x50.join(x14);
        Expression x53=x32.product(x34);
        Formula x51=x52.in(x53);
        Formula x48=x51.forAll(x49);
        Expression x56=x14.join(Expression.UNIV);
        Expression x55=x56.join(Expression.UNIV);
        Formula x54=x55.in(x6);
        Variable x59=Variable.unary("Correctness_this");
        Decls x58=x59.oneOf(x6);
        Expression x61=x59.join(x15);
        Expression x62=x32.product(x34);
        Formula x60=x61.in(x62);
        Formula x57=x60.forAll(x58);
        Expression x65=x15.join(Expression.UNIV);
        Expression x64=x65.join(Expression.UNIV);
        Formula x63=x64.in(x6);
        Variable x68=Variable.unary("Correctness_this");
        Decls x67=x68.oneOf(x6);
        Expression x70=x68.join(x16);
        Formula x69=x70.in(x32);
        Formula x66=x69.forAll(x67);
        Expression x72=x16.join(Expression.UNIV);
        Formula x71=x72.in(x6);
        Variable x75=Variable.unary("Correctness_this");
        Decls x74=x75.oneOf(x6);
        Expression x78=x75.join(x17);
        Formula x77=x78.lone();
        Formula x79=x78.in(x32);
        Formula x76=x77.and(x79);
        Formula x73=x76.forAll(x74);
        Expression x81=x17.join(Expression.UNIV);
        Formula x80=x81.in(x6);
        Variable x84=Variable.unary("Correctness_this");
        Decls x83=x84.oneOf(x6);
        Expression x87=x84.join(x18);
        Formula x86=x87.lone();
        Formula x88=x87.in(x32);
        Formula x85=x86.and(x88);
        Formula x82=x85.forAll(x83);
        Expression x90=x18.join(Expression.UNIV);
        Formula x89=x90.in(x6);
        Variable x93=Variable.unary("Correctness_this");
        Decls x92=x93.oneOf(x6);
        Expression x95=x93.join(x19);
        Expression x98=x93.join(x16);
        Expression x99=x93.join(x17);
        Expression x97=x98.difference(x99);
        Expression x100=x93.join(x16);
        Expression x96=x97.product(x100);
        Formula x94=x95.in(x96);
        Formula x91=x94.forAll(x92);
        Expression x103=x19.join(Expression.UNIV);
        Expression x102=x103.join(Expression.UNIV);
        Formula x101=x102.in(x6);
        Variable x106=Variable.unary("Correctness_this");
        Decls x105=x106.oneOf(x32);
        Expression x108=x106.join(x20);
        Formula x107=x108.in(x32);
        Formula x104=x107.forAll(x105);
        Expression x110=x20.join(Expression.UNIV);
        Formula x109=x110.in(x32);
        Expression x113=x11.product(x21);
        Expression x112=x11.join(x113);
        Formula x111=x112.in(x32);
        Expression x116=x11.product(x22);
        Expression x115=x11.join(x116);
        Expression x117=x32.product(x32);
        Formula x114=x115.in(x117);
        Variable x122=Variable.unary("");
        Decls x121=x122.oneOf(x32);
        Formula x126=x122.eq(x21);
        Expression x128=x22.join(x122);
        Formula x127=x128.one();
        Formula x125=x126.or(x127);
        Expression x132=x22.join(x32);
        Expression x131=x32.difference(x132);
        Formula x130=x122.eq(x131);
        Expression x134=x122.join(x22);
        Formula x133=x134.one();
        Formula x129=x130.or(x133);
        Formula x124=x125.and(x129);
        Expression x138=x22.closure();
        Expression x137=x122.join(x138);
        Formula x136=x122.in(x137);
        Formula x135=x136.not();
        Formula x123=x124.and(x135);
        Formula x120=x123.forAll(x121);
        Expression x141=x22.reflexiveClosure();
        Expression x140=x21.join(x141);
        Formula x139=x32.in(x140);
        Formula x119=x120.and(x139);
        Expression x143=x22.join(x21);
        Formula x142=x143.no();
        Formula x118=x119.and(x142);
        Variable x146=Variable.unary("Correctness_x");
        Decls x145=x146.oneOf(x6);
        Expression x150=x146.join(x16);
        Expression x152=x146.join(x20);
        Expression x155=x146.join(x12);
        Expression x159=Expression.INTS.union(x5);
        Expression x158=x159.union(x32);
        Expression x157=x158.union(x34);
        Expression x156=x157.union(x11);
        Expression x154=x155.join(x156);
        Expression x162=x146.join(x13);
        Expression x161=x162.join(x156);
        Expression x153=x154.union(x161);
        Expression x151=x152.intersection(x153);
        Formula x149=x150.eq(x151);
        Expression x165=x146.join(x17);
        Variable x168=Variable.unary("Correctness_pc");
        Expression x169=x146.join(x16);
        Decls x167=x168.oneOf(x169);
        Expression x171=x146.join(x16);
        Expression x174=x22.closure();
        Expression x173=x168.join(x174);
        Expression x172=x168.union(x173);
        Formula x170=x171.in(x172);
        Expression x166=x170.comprehension(x167);
        Formula x164=x165.eq(x166);
        Variable x177=Variable.unary("Correctness_p_child");
        Expression x179=x146.join(x16);
        Expression x180=x146.join(x17);
        Expression x178=x179.difference(x180);
        Decls x176=x177.oneOf(x178);
        Expression x183=x146.join(x19);
        Expression x182=x177.join(x183);
        Variable x186=Variable.unary("Correctness_earlierChild");
        Expression x190=x22.transpose();
        Expression x189=x190.closure();
        Expression x188=x177.join(x189);
        Expression x191=x146.join(x16);
        Expression x187=x188.intersection(x191);
        Decls x185=x186.oneOf(x187);
        Expression x196=x22.transpose();
        Expression x195=x196.closure();
        Expression x194=x186.join(x195);
        Expression x193=x186.union(x194);
        Formula x192=x187.in(x193);
        Expression x184=x192.comprehension(x185);
        Formula x181=x182.eq(x184);
        Formula x175=x181.forAll(x176);
        Formula x163=x164.and(x175);
        Formula x148=x149.and(x163);
        Expression x198=x146.join(x18);
        Variable x201=Variable.unary("Correctness_pc");
        Expression x202=x146.join(x16);
        Decls x200=x201.oneOf(x202);
        Expression x204=x146.join(x16);
        Expression x208=x22.transpose();
        Expression x207=x208.closure();
        Expression x206=x201.join(x207);
        Expression x205=x201.union(x206);
        Formula x203=x204.in(x205);
        Expression x199=x203.comprehension(x200);
        Formula x197=x198.eq(x199);
        Formula x147=x148.and(x197);
        Formula x144=x147.forAll(x145);
        Formula x209=x6.eq(x32);
        Variable x214=Variable.unary("acyclic_x");
        Decls x213=x214.oneOf(x32);
        Expression x218=x20.closure();
        Expression x217=x214.join(x218);
        Formula x216=x214.in(x217);
        Formula x215=x216.not();
        Formula x212=x215.forAll(x213);
        Variable x221=Variable.unary("forest_n");
        Decls x220=x221.oneOf(x32);
        Expression x223=x20.join(x221);
        Formula x222=x223.lone();
        Formula x219=x222.forAll(x220);
        Formula x211=x212.and(x219);
        Variable x227=Variable.unary("tree_root");
        Decls x226=x227.oneOf(x32);
        Expression x229=x20.join(x227);
        Formula x228=x229.no();
        Expression x225=x228.comprehension(x226);
        Formula x224=x225.lone();
        Formula x210=x211.and(x224);
        Expression x233=x20.closure();
        Expression x236=x156.product(Expression.UNIV);
        Expression x234=Expression.IDEN.intersection(x236);
        Expression x232=x233.union(x234);
        Expression x231=x7.join(x232);
        Formula x230=x32.in(x231);
        Variable x241=Variable.nary("Correctness_A",2);
        Expression x242=x32.product(x34);
        Decls x240=x241.setOf(x242);
        Variable x244=Variable.nary("Correctness_B",2);
        Decls x243=x244.setOf(x242);
        Variable x246=Variable.nary("Correctness_A'",2);
        Decls x245=x246.setOf(x242);
        Variable x248=Variable.nary("Correctness_B'",2);
        Decls x247=x248.setOf(x242);
        Variable x250=Variable.unary("Correctness_Adirty");
        Decls x249=x250.setOf(x32);
        Variable x252=Variable.unary("Correctness_Bdirty");
        Decls x251=x252.setOf(x32);
        Decls x239=x240.and(x243).and(x245).and(x247).and(x249).and(x251);
        Expression x258=x32.product(x34);
        Formula x257=x241.in(x258);
        Variable x261=Variable.unary("");
        Decls x260=x261.oneOf(x32);
        Expression x264=x261.join(x241);
        Formula x263=x264.lone();
        Formula x265=x264.in(x34);
        Formula x262=x263.and(x265);
        Formula x259=x262.forAll(x260);
        Formula x256=x257.and(x259);
        Variable x268=Variable.unary("");
        Decls x267=x268.oneOf(x34);
        Expression x270=x241.join(x268);
        Formula x269=x270.in(x32);
        Formula x266=x269.forAll(x267);
        Formula x255=x256.and(x266);
        Expression x274=x32.product(x34);
        Formula x273=x244.in(x274);
        Variable x277=Variable.unary("");
        Decls x276=x277.oneOf(x32);
        Expression x280=x277.join(x244);
        Formula x279=x280.lone();
        Formula x281=x280.in(x34);
        Formula x278=x279.and(x281);
        Formula x275=x278.forAll(x276);
        Formula x272=x273.and(x275);
        Variable x284=Variable.unary("");
        Decls x283=x284.oneOf(x34);
        Expression x286=x244.join(x284);
        Formula x285=x286.in(x32);
        Formula x282=x285.forAll(x283);
        Formula x271=x272.and(x282);
        Expression x290=x32.product(x34);
        Formula x289=x246.in(x290);
        Variable x293=Variable.unary("");
        Decls x292=x293.oneOf(x32);
        Expression x296=x293.join(x246);
        Formula x295=x296.lone();
        Formula x297=x296.in(x34);
        Formula x294=x295.and(x297);
        Formula x291=x294.forAll(x292);
        Formula x288=x289.and(x291);
        Variable x300=Variable.unary("");
        Decls x299=x300.oneOf(x34);
        Expression x302=x246.join(x300);
        Formula x301=x302.in(x32);
        Formula x298=x301.forAll(x299);
        Formula x287=x288.and(x298);
        Expression x306=x32.product(x34);
        Formula x305=x248.in(x306);
        Variable x309=Variable.unary("");
        Decls x308=x309.oneOf(x32);
        Expression x312=x309.join(x248);
        Formula x311=x312.lone();
        Formula x313=x312.in(x34);
        Formula x310=x311.and(x313);
        Formula x307=x310.forAll(x308);
        Formula x304=x305.and(x307);
        Variable x316=Variable.unary("");
        Decls x315=x316.oneOf(x34);
        Expression x318=x248.join(x316);
        Formula x317=x318.in(x32);
        Formula x314=x317.forAll(x315);
        Formula x303=x304.and(x314);
        Formula x254=Formula.compose(FormulaOperator.AND, x255, x271, x287, x303);
        Variable x324=Variable.nary("DirtiesValid_O",2);
        Expression x325=x32.product(x34);
        Decls x323=x324.setOf(x325);
        Expression x330=x32.product(x34);
        Formula x329=x324.in(x330);
        Variable x333=Variable.unary("");
        Decls x332=x333.oneOf(x32);
        Expression x336=x333.join(x324);
        Formula x335=x336.lone();
        Formula x337=x336.in(x34);
        Formula x334=x335.and(x337);
        Formula x331=x334.forAll(x332);
        Formula x328=x329.and(x331);
        Variable x340=Variable.unary("");
        Decls x339=x340.oneOf(x34);
        Expression x342=x324.join(x340);
        Formula x341=x342.in(x32);
        Formula x338=x341.forAll(x339);
        Formula x327=x328.and(x338);
        Variable x348=Variable.unary("IsValidFS_n");
        Expression x349=x32.difference(x7);
        Decls x347=x348.oneOf(x349);
        Expression x355=x348.join(x324);
        Formula x354=x355.eq(x9);
        Formula x353=x354.not();
        Formula x352=x353.not();
        Expression x359=x20.closure();
        Expression x358=x348.join(x359);
        Expression x357=x358.join(x324);
        Formula x356=x357.no();
        Formula x351=x352.or(x356);
        Expression x363=x348.join(x324);
        Formula x362=x363.some();
        Formula x361=x362.not();
        Expression x367=x20.transpose();
        Expression x366=x348.join(x367);
        Expression x365=x366.join(x324);
        Formula x364=x365.some();
        Formula x360=x361.or(x364);
        Formula x350=x351.and(x360);
        Formula x346=x350.forAll(x347);
        Expression x369=x7.join(x324);
        Formula x368=x369.eq(x9);
        Formula x345=x346.and(x368);
        Variable x373=Variable.unary("DirtiesValid_n");
        Decls x372=x373.oneOf(x32);
        Expression x376=x373.join(x324);
        Expression x377=x373.join(x241);
        Formula x375=x376.eq(x377);
        Formula x374=x375.not();
        Expression x371=x374.comprehension(x372);
        Formula x370=x371.in(x250);
        Formula x344=x345.and(x370);
        Variable x381=Variable.unary("DirtiesValid_n");
        Decls x380=x381.oneOf(x32);
        Expression x384=x381.join(x324);
        Expression x385=x381.join(x244);
        Formula x383=x384.eq(x385);
        Formula x382=x383.not();
        Expression x379=x382.comprehension(x380);
        Formula x378=x379.in(x252);
        Formula x343=x344.and(x378);
        Formula x326=x327.and(x343);
        Formula x322=x326.forSome(x323);
        Expression x389=x6.join(x12);
        Formula x388=x241.eq(x389);
        Expression x393=x6.join(x13);
        Formula x392=x244.eq(x393);
        Expression x395=x6.join(x15);
        Formula x394=x248.eq(x395);
        Formula x391=x392.and(x394);
        Variable x398=Variable.unary("reconHelper_p");
        Decls x397=x398.oneOf(x32);
        Expression x404=x398.join(x12);
        Expression x405=x398.join(x13);
        Expression x403=x404.union(x405);
        Expression x402=x398.join(x403);
        Formula x401=x402.some();
        Formula x400=x401.not();
        Formula x410=x398.in(x250);
        Formula x409=x410.not();
        Formula x412=x398.in(x252);
        Formula x411=x412.not();
        Formula x408=x409.and(x411);
        Expression x415=x398.join(x14);
        Formula x414=x415.eq(x404);
        Expression x417=x398.join(x15);
        Formula x416=x417.eq(x405);
        Formula x413=x414.and(x416);
        Formula x407=x408.implies(x413);
        Formula x419=x408.not();
        Expression x424=x398.join(x404);
        Formula x423=x424.eq(x9);
        Expression x426=x398.join(x405);
        Formula x425=x426.eq(x9);
        Formula x422=x423.and(x425);
        Formula x429=x16.no();
        Expression x432=x398.join(x14);
        Expression x433=x398.join(x12);
        Formula x431=x432.eq(x433);
        Expression x435=x398.join(x15);
        Expression x436=x398.join(x13);
        Formula x434=x435.eq(x436);
        Formula x430=x431.and(x434);
        Formula x428=x429.implies(x430);
        Formula x438=x429.not();
        Expression x443=x398.join(x17);
        Expression x442=x443.join(x12);
        Expression x444=x398.join(x12);
        Formula x441=x442.eq(x444);
        Expression x449=x398.join(x17);
        Expression x448=x449.join(x13);
        Expression x450=x398.join(x13);
        Formula x447=x448.eq(x450);
        Expression x452=x398.join(x15);
        Expression x454=x398.join(x18);
        Expression x453=x454.join(x15);
        Formula x451=x452.eq(x453);
        Formula x446=x447.and(x451);
        Variable x457=Variable.unary("reconHelper_pchild");
        Expression x459=x398.join(x16);
        Expression x460=x398.join(x17);
        Expression x458=x459.difference(x460);
        Decls x456=x457.oneOf(x458);
        Expression x463=x457.join(x12);
        Expression x466=x398.join(x19);
        Expression x465=x457.join(x466);
        Expression x464=x465.join(x14);
        Formula x462=x463.eq(x464);
        Expression x468=x457.join(x13);
        Expression x471=x398.join(x19);
        Expression x470=x457.join(x471);
        Expression x469=x470.join(x15);
        Formula x467=x468.eq(x469);
        Formula x461=x462.and(x467);
        Formula x455=x461.forAll(x456);
        Formula x445=x446.and(x455);
        Formula x440=x441.and(x445);
        Expression x473=x398.join(x14);
        Expression x475=x398.join(x18);
        Expression x474=x475.join(x14);
        Formula x472=x473.eq(x474);
        Formula x439=x440.and(x472);
        Formula x437=x438.implies(x439);
        Formula x427=x428.and(x437);
        Formula x421=x422.implies(x427);
        Formula x477=x422.not();
        Formula x481=x398.in(x250);
        Formula x480=x481.not();
        Expression x489=x20.closure();
        Expression x491=x156.product(Expression.UNIV);
        Expression x490=Expression.IDEN.intersection(x491);
        Expression x488=x489.union(x490);
        Expression x487=x398.join(x488);
        Expression x486=x487.product(x34);
        Expression x485=x405.intersection(x486);
        Expression x497=x20.closure();
        Expression x499=x156.product(Expression.UNIV);
        Expression x498=Expression.IDEN.intersection(x499);
        Expression x496=x497.union(x498);
        Expression x495=x398.join(x496);
        Expression x494=x32.difference(x495);
        Expression x493=x494.product(x34);
        Expression x492=x404.intersection(x493);
        Expression x484=x485.union(x492);
        Formula x483=x415.eq(x484);
        Formula x500=x417.eq(x405);
        Formula x482=x483.and(x500);
        Formula x479=x480.implies(x482);
        Formula x502=x480.not();
        Formula x506=x398.in(x252);
        Formula x505=x506.not();
        Formula x508=x415.eq(x404);
        Expression x515=x20.closure();
        Expression x517=x156.product(Expression.UNIV);
        Expression x516=Expression.IDEN.intersection(x517);
        Expression x514=x515.union(x516);
        Expression x513=x398.join(x514);
        Expression x512=x513.product(x34);
        Expression x511=x404.intersection(x512);
        Expression x523=x20.closure();
        Expression x525=x156.product(Expression.UNIV);
        Expression x524=Expression.IDEN.intersection(x525);
        Expression x522=x523.union(x524);
        Expression x521=x398.join(x522);
        Expression x520=x32.difference(x521);
        Expression x519=x520.product(x34);
        Expression x518=x405.intersection(x519);
        Expression x510=x511.union(x518);
        Formula x509=x417.eq(x510);
        Formula x507=x508.and(x509);
        Formula x504=x505.implies(x507);
        Formula x527=x505.not();
        Formula x529=x415.eq(x404);
        Formula x530=x417.eq(x405);
        Formula x528=x529.and(x530);
        Formula x526=x527.implies(x528);
        Formula x503=x504.and(x526);
        Formula x501=x502.implies(x503);
        Formula x478=x479.and(x501);
        Formula x476=x477.implies(x478);
        Formula x420=x421.and(x476);
        Formula x418=x419.implies(x420);
        Formula x406=x407.and(x418);
        Formula x399=x400.or(x406);
        Formula x396=x399.forAll(x397);
        Formula x390=x391.and(x396);
        Formula x387=x388.and(x390);
        Expression x532=x6.join(x14);
        Formula x531=x246.eq(x532);
        Formula x386=x387.and(x531);
        Formula x321=x322.and(x386);
        Formula x320=x321.not();
        Variable x540=Variable.unary("IsValidFS_n");
        Expression x541=x32.difference(x7);
        Decls x539=x540.oneOf(x541);
        Expression x547=x540.join(x241);
        Formula x546=x547.eq(x9);
        Formula x545=x546.not();
        Formula x544=x545.not();
        Expression x551=x20.closure();
        Expression x550=x540.join(x551);
        Expression x549=x550.join(x241);
        Formula x548=x549.no();
        Formula x543=x544.or(x548);
        Expression x555=x540.join(x241);
        Formula x554=x555.some();
        Formula x553=x554.not();
        Expression x559=x20.transpose();
        Expression x558=x540.join(x559);
        Expression x557=x558.join(x241);
        Formula x556=x557.some();
        Formula x552=x553.or(x556);
        Formula x542=x543.and(x552);
        Formula x538=x542.forAll(x539);
        Expression x561=x7.join(x241);
        Formula x560=x561.eq(x9);
        Formula x537=x538.and(x560);
        Variable x566=Variable.unary("IsValidFS_n");
        Expression x567=x32.difference(x7);
        Decls x565=x566.oneOf(x567);
        Expression x573=x566.join(x244);
        Formula x572=x573.eq(x9);
        Formula x571=x572.not();
        Formula x570=x571.not();
        Expression x577=x20.closure();
        Expression x576=x566.join(x577);
        Expression x575=x576.join(x244);
        Formula x574=x575.no();
        Formula x569=x570.or(x574);
        Expression x581=x566.join(x244);
        Formula x580=x581.some();
        Formula x579=x580.not();
        Expression x585=x20.transpose();
        Expression x584=x566.join(x585);
        Expression x583=x584.join(x244);
        Formula x582=x583.some();
        Formula x578=x579.or(x582);
        Formula x568=x569.and(x578);
        Formula x564=x568.forAll(x565);
        Expression x587=x7.join(x244);
        Formula x586=x587.eq(x9);
        Formula x563=x564.and(x586);
        Variable x591=Variable.unary("IsValidDirty_n");
        Decls x590=x591.oneOf(x252);
        Expression x594=x20.transpose();
        Expression x593=x591.join(x594);
        Formula x592=x593.in(x252);
        Formula x589=x592.forAll(x590);
        Formula x597=x7.in(x252);
        Formula x596=x597.not();
        Expression x599=x252.difference(x7);
        Formula x598=x599.some();
        Formula x595=x596.or(x598);
        Formula x588=x589.and(x595);
        Formula x562=x563.and(x588);
        Formula x536=x537.and(x562);
        Variable x603=Variable.unary("IsValidDirty_n");
        Decls x602=x603.oneOf(x250);
        Expression x606=x20.transpose();
        Expression x605=x603.join(x606);
        Formula x604=x605.in(x250);
        Formula x601=x604.forAll(x602);
        Formula x609=x7.in(x250);
        Formula x608=x609.not();
        Expression x611=x250.difference(x7);
        Formula x610=x611.some();
        Formula x607=x608.or(x610);
        Formula x600=x601.and(x607);
        Formula x535=x536.and(x600);
        Formula x534=x535.not();
        Variable x616=Variable.unary("SyncSpec_p");
        Decls x615=x616.oneOf(x32);
        Formula x620=x616.eq(x7);
        Expression x625=x20.transpose();
        Expression x624=x616.join(x625);
        Expression x623=x624.join(x241);
        Formula x622=x623.eq(x9);
        Expression x629=x20.transpose();
        Expression x628=x616.join(x629);
        Expression x627=x628.join(x244);
        Formula x626=x627.eq(x9);
        Formula x621=x622.and(x626);
        Formula x619=x620.or(x621);
        Formula x618=x619.not();
        Expression x635=x616.join(x241);
        Expression x636=x616.join(x244);
        Formula x634=x635.eq(x636);
        Formula x633=x634.not();
        Expression x639=x616.join(x246);
        Expression x640=x616.join(x241);
        Formula x638=x639.eq(x640);
        Expression x642=x616.join(x248);
        Expression x643=x616.join(x244);
        Formula x641=x642.eq(x643);
        Formula x637=x638.and(x641);
        Formula x632=x633.or(x637);
        Formula x648=x616.in(x250);
        Formula x647=x648.not();
        Formula x646=x647.not();
        Expression x655=x20.closure();
        Expression x657=x156.product(Expression.UNIV);
        Expression x656=Expression.IDEN.intersection(x657);
        Expression x654=x655.union(x656);
        Expression x653=x616.join(x654);
        Expression x652=x653.product(x34);
        Expression x651=x246.intersection(x652);
        Expression x662=x20.closure();
        Expression x664=x156.product(Expression.UNIV);
        Expression x663=Expression.IDEN.intersection(x664);
        Expression x661=x662.union(x663);
        Expression x660=x616.join(x661);
        Expression x659=x660.product(x34);
        Expression x658=x244.intersection(x659);
        Formula x650=x651.eq(x658);
        Expression x670=x20.closure();
        Expression x672=x156.product(Expression.UNIV);
        Expression x671=Expression.IDEN.intersection(x672);
        Expression x669=x670.union(x671);
        Expression x668=x616.join(x669);
        Expression x667=x668.product(x34);
        Expression x666=x248.intersection(x667);
        Expression x677=x20.closure();
        Expression x679=x156.product(Expression.UNIV);
        Expression x678=Expression.IDEN.intersection(x679);
        Expression x676=x677.union(x678);
        Expression x675=x616.join(x676);
        Expression x674=x675.product(x34);
        Expression x673=x244.intersection(x674);
        Formula x665=x666.eq(x673);
        Formula x649=x650.and(x665);
        Formula x645=x646.or(x649);
        Formula x684=x616.in(x250);
        Formula x685=x616.in(x252);
        Formula x683=x684.and(x685);
        Expression x688=x616.join(x241);
        Expression x689=x616.join(x244);
        Formula x687=x688.eq(x689);
        Formula x686=x687.not();
        Formula x682=x683.and(x686);
        Formula x681=x682.not();
        Expression x696=x20.closure();
        Expression x698=x156.product(Expression.UNIV);
        Expression x697=Expression.IDEN.intersection(x698);
        Expression x695=x696.union(x697);
        Expression x694=x616.join(x695);
        Expression x693=x694.product(x34);
        Expression x692=x246.intersection(x693);
        Expression x703=x20.closure();
        Expression x705=x156.product(Expression.UNIV);
        Expression x704=Expression.IDEN.intersection(x705);
        Expression x702=x703.union(x704);
        Expression x701=x616.join(x702);
        Expression x700=x701.product(x34);
        Expression x699=x241.intersection(x700);
        Formula x691=x692.eq(x699);
        Expression x711=x20.closure();
        Expression x713=x156.product(Expression.UNIV);
        Expression x712=Expression.IDEN.intersection(x713);
        Expression x710=x711.union(x712);
        Expression x709=x616.join(x710);
        Expression x708=x709.product(x34);
        Expression x707=x248.intersection(x708);
        Expression x718=x20.closure();
        Expression x720=x156.product(Expression.UNIV);
        Expression x719=Expression.IDEN.intersection(x720);
        Expression x717=x718.union(x719);
        Expression x716=x616.join(x717);
        Expression x715=x716.product(x34);
        Expression x714=x244.intersection(x715);
        Formula x706=x707.eq(x714);
        Formula x690=x691.and(x706);
        Formula x680=x681.or(x690);
        Formula x644=x645.and(x680);
        Formula x631=x632.and(x644);
        Formula x724=x616.in(x252);
        Formula x723=x724.not();
        Formula x722=x723.not();
        Expression x731=x20.closure();
        Expression x733=x156.product(Expression.UNIV);
        Expression x732=Expression.IDEN.intersection(x733);
        Expression x730=x731.union(x732);
        Expression x729=x616.join(x730);
        Expression x728=x729.product(x34);
        Expression x727=x248.intersection(x728);
        Expression x738=x20.closure();
        Expression x740=x156.product(Expression.UNIV);
        Expression x739=Expression.IDEN.intersection(x740);
        Expression x737=x738.union(x739);
        Expression x736=x616.join(x737);
        Expression x735=x736.product(x34);
        Expression x734=x241.intersection(x735);
        Formula x726=x727.eq(x734);
        Expression x746=x20.closure();
        Expression x748=x156.product(Expression.UNIV);
        Expression x747=Expression.IDEN.intersection(x748);
        Expression x745=x746.union(x747);
        Expression x744=x616.join(x745);
        Expression x743=x744.product(x34);
        Expression x742=x246.intersection(x743);
        Expression x753=x20.closure();
        Expression x755=x156.product(Expression.UNIV);
        Expression x754=Expression.IDEN.intersection(x755);
        Expression x752=x753.union(x754);
        Expression x751=x616.join(x752);
        Expression x750=x751.product(x34);
        Expression x749=x241.intersection(x750);
        Formula x741=x742.eq(x749);
        Formula x725=x726.and(x741);
        Formula x721=x722.or(x725);
        Formula x630=x631.and(x721);
        Formula x617=x618.or(x630);
        Formula x614=x617.forAll(x615);
        Variable x759=Variable.unary("IsValidFS_n");
        Expression x760=x32.difference(x7);
        Decls x758=x759.oneOf(x760);
        Expression x766=x759.join(x246);
        Formula x765=x766.eq(x9);
        Formula x764=x765.not();
        Formula x763=x764.not();
        Expression x770=x20.closure();
        Expression x769=x759.join(x770);
        Expression x768=x769.join(x246);
        Formula x767=x768.no();
        Formula x762=x763.or(x767);
        Expression x774=x759.join(x246);
        Formula x773=x774.some();
        Formula x772=x773.not();
        Expression x778=x20.transpose();
        Expression x777=x759.join(x778);
        Expression x776=x777.join(x246);
        Formula x775=x776.some();
        Formula x771=x772.or(x775);
        Formula x761=x762.and(x771);
        Formula x757=x761.forAll(x758);
        Expression x780=x7.join(x246);
        Formula x779=x780.eq(x9);
        Formula x756=x757.and(x779);
        Formula x613=x614.and(x756);
        Variable x784=Variable.unary("IsValidFS_n");
        Expression x785=x32.difference(x7);
        Decls x783=x784.oneOf(x785);
        Expression x791=x784.join(x248);
        Formula x790=x791.eq(x9);
        Formula x789=x790.not();
        Formula x788=x789.not();
        Expression x795=x20.closure();
        Expression x794=x784.join(x795);
        Expression x793=x794.join(x248);
        Formula x792=x793.no();
        Formula x787=x788.or(x792);
        Expression x799=x784.join(x248);
        Formula x798=x799.some();
        Formula x797=x798.not();
        Expression x803=x20.transpose();
        Expression x802=x784.join(x803);
        Expression x801=x802.join(x248);
        Formula x800=x801.some();
        Formula x796=x797.or(x800);
        Formula x786=x787.and(x796);
        Formula x782=x786.forAll(x783);
        Expression x805=x7.join(x248);
        Formula x804=x805.eq(x9);
        Formula x781=x782.and(x804);
        Formula x612=x613.and(x781);
        Formula x533=x534.or(x612);
        Formula x319=x320.or(x533);
        Formula x253=x254.implies(x319);
        Formula x238=x253.forAll(x239);
        Formula x237=x238.not();
        Formula x806=x0.eq(x0);
        Formula x807=x1.eq(x1);
        Formula x808=x2.eq(x2);
        Formula x809=x3.eq(x3);
        Formula x810=x4.eq(x4);
        Formula x811=x5.eq(x5);
        Formula x812=x6.eq(x6);
        Formula x813=x7.eq(x7);
        Formula x814=x8.eq(x8);
        Formula x815=x9.eq(x9);
        Formula x816=x10.eq(x10);
        Formula x817=x11.eq(x11);
        Formula x818=x12.eq(x12);
        Formula x819=x13.eq(x13);
        Formula x820=x14.eq(x14);
        Formula x821=x15.eq(x15);
        Formula x822=x16.eq(x16);
        Formula x823=x17.eq(x17);
        Formula x824=x18.eq(x18);
        Formula x825=x19.eq(x19);
        Formula x826=x20.eq(x20);
        Formula x827=x21.eq(x21);
        Formula x828=x22.eq(x22);
        Formula x23=Formula.compose(FormulaOperator.AND, x24, x26, x35, x39, x45, x48, x54, x57, x63, x66, x71, x73, x80, x82, x89, x91, x101, x104, x109, x111, x114, x118, x144, x209, x210, x230, x237, x806, x807, x808, x809, x810, x811, x812, x813, x814, x815, x816, x817, x818, x819, x820, x821, x822, x823, x824, x825, x826, x827, x828);

        Solver solver = new Solver();
        solver.options().setSolver(SATFactory.MiniSat);
        solver.options().setBitwidth(4);
        //solver.options().setFlatten(false);
        solver.options().setIntEncoding(Options.IntEncoding.TWOSCOMPLEMENT);
        solver.options().setSymmetryBreaking(20);
        solver.options().setSkolemDepth(0);
        System.out.println("Solving...");
        System.out.flush();
        Solution sol = solver.solve(x23,bounds);
        System.out.println(sol.toString());
    }}