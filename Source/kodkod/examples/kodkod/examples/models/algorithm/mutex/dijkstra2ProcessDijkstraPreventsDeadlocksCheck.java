package kodkod.examples.models.algorithm.mutex;

import java.util.Arrays;
import java.util.List;
import kodkod.ast.*;
import kodkod.ast.operator.*;
import kodkod.examples.ExampleMetadata;
import kodkod.instance.*;
import kodkod.engine.*;
import kodkod.engine.satlab.SATFactory;
import kodkod.engine.config.Options;

@ExampleMetadata(
        Name = "dijkstra-2-process",
        Note = "",
        IsCheck = true,
        PartialModel = true,
        BinaryRelations = 3,
        TernaryRelations = 2,
        NaryRelations = 0,
        HierarchicalTypes = 0,
        NestedRelationalJoins = 33,
        TransitiveClosure = 0,
        NestedQuantifiers = 1,
        SetCardinality = 0,
        Additions = 0,
        Subtractions = 0,
        Comparison = 13,
        OrderedRelations = 2,
        Constraints = 34
)


public final class dijkstra2ProcessDijkstraPreventsDeadlocksCheck {

    public static void main(String[] args) throws Exception {

        Relation x0 = Relation.unary("Int/min");
        Relation x1 = Relation.unary("Int/zero");
        Relation x2 = Relation.unary("Int/max");
        Relation x3 = Relation.nary("Int/next", 2);
        Relation x4 = Relation.unary("seq/Int");
        Relation x5 = Relation.unary("String");
        Relation x6 = Relation.unary("this/Process");
        Relation x7 = Relation.unary("this/Mutex");
        Relation x8 = Relation.unary("this/State");
        Relation x9 = Relation.unary("so/Ord");
        Relation x10 = Relation.unary("mo/Ord");
        Relation x11 = Relation.nary("this/State.holds", 3);
        Relation x12 = Relation.nary("this/State.waits", 3);
        Relation x13 = Relation.unary("so/Ord.First");
        Relation x14 = Relation.nary("so/Ord.Next", 2);
        Relation x15 = Relation.unary("mo/Ord.First");
        Relation x16 = Relation.nary("mo/Ord.Next", 2);
        Relation x17 = Relation.unary("");
        Relation x18 = Relation.unary("");

        List<String> atomlist = Arrays.asList(
                "-1", "-2", "-3", "-4", "-5",
                "-6", "-7", "-8", "0", "1", "2",
                "3", "4", "5", "6", "7", "Mutex$0",
                "Mutex$1", "Mutex$2", "Mutex$3", "Process$0", "Process$1", "Process$2",
                "Process$3", "Process$4", "State$0", "State$1", "State$2", "State$3",
                "State$4", "mo/Ord$0", "so/Ord$0"
        );

        Universe universe = new Universe(atomlist);
        TupleFactory factory = universe.factory();
        Bounds bounds = new Bounds(universe);

        TupleSet x0_upper = factory.noneOf(1);
        x0_upper.add(factory.tuple("-8"));
        bounds.boundExactly(x0, x0_upper);

        TupleSet x1_upper = factory.noneOf(1);
        x1_upper.add(factory.tuple("0"));
        bounds.boundExactly(x1, x1_upper);

        TupleSet x2_upper = factory.noneOf(1);
        x2_upper.add(factory.tuple("7"));
        bounds.boundExactly(x2, x2_upper);

        TupleSet x3_upper = factory.noneOf(2);
        x3_upper.add(factory.tuple("-8").product(factory.tuple("-7")));
        x3_upper.add(factory.tuple("-7").product(factory.tuple("-6")));
        x3_upper.add(factory.tuple("-6").product(factory.tuple("-5")));
        x3_upper.add(factory.tuple("-5").product(factory.tuple("-4")));
        x3_upper.add(factory.tuple("-4").product(factory.tuple("-3")));
        x3_upper.add(factory.tuple("-3").product(factory.tuple("-2")));
        x3_upper.add(factory.tuple("-2").product(factory.tuple("-1")));
        x3_upper.add(factory.tuple("-1").product(factory.tuple("0")));
        x3_upper.add(factory.tuple("0").product(factory.tuple("1")));
        x3_upper.add(factory.tuple("1").product(factory.tuple("2")));
        x3_upper.add(factory.tuple("2").product(factory.tuple("3")));
        x3_upper.add(factory.tuple("3").product(factory.tuple("4")));
        x3_upper.add(factory.tuple("4").product(factory.tuple("5")));
        x3_upper.add(factory.tuple("5").product(factory.tuple("6")));
        x3_upper.add(factory.tuple("6").product(factory.tuple("7")));
        bounds.boundExactly(x3, x3_upper);

        TupleSet x4_upper = factory.noneOf(1);
        x4_upper.add(factory.tuple("0"));
        x4_upper.add(factory.tuple("1"));
        x4_upper.add(factory.tuple("2"));
        x4_upper.add(factory.tuple("3"));
        bounds.boundExactly(x4, x4_upper);

        TupleSet x5_upper = factory.noneOf(1);
        bounds.boundExactly(x5, x5_upper);

        TupleSet x6_upper = factory.noneOf(1);
        x6_upper.add(factory.tuple("Process$0"));
        x6_upper.add(factory.tuple("Process$1"));
        x6_upper.add(factory.tuple("Process$2"));
        x6_upper.add(factory.tuple("Process$3"));
        x6_upper.add(factory.tuple("Process$4"));
        bounds.bound(x6, x6_upper);

        TupleSet x7_upper = factory.noneOf(1);
        x7_upper.add(factory.tuple("Mutex$0"));
        x7_upper.add(factory.tuple("Mutex$1"));
        x7_upper.add(factory.tuple("Mutex$2"));
        x7_upper.add(factory.tuple("Mutex$3"));
        bounds.boundExactly(x7, x7_upper);

        TupleSet x8_upper = factory.noneOf(1);
        x8_upper.add(factory.tuple("State$0"));
        x8_upper.add(factory.tuple("State$1"));
        x8_upper.add(factory.tuple("State$2"));
        x8_upper.add(factory.tuple("State$3"));
        x8_upper.add(factory.tuple("State$4"));
        bounds.boundExactly(x8, x8_upper);

        TupleSet x9_upper = factory.noneOf(1);
        x9_upper.add(factory.tuple("so/Ord$0"));
        bounds.boundExactly(x9, x9_upper);

        TupleSet x10_upper = factory.noneOf(1);
        x10_upper.add(factory.tuple("mo/Ord$0"));
        bounds.boundExactly(x10, x10_upper);

        TupleSet x11_upper = factory.noneOf(3);
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$0").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$1").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$2").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$3").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$3")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$0")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$1")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$2")));
        x11_upper.add(factory.tuple("State$4").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$3")));
        bounds.bound(x11, x11_upper);

        TupleSet x12_upper = factory.noneOf(3);
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$0").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$1").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$2").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$3").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$0")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$1")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$2")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$3")).product(factory.tuple("Mutex$3")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$0")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$1")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$2")));
        x12_upper.add(factory.tuple("State$4").product(factory.tuple("Process$4")).product(factory.tuple("Mutex$3")));
        bounds.bound(x12, x12_upper);

        TupleSet x13_upper = factory.noneOf(1);
        x13_upper.add(factory.tuple("State$0"));
        x13_upper.add(factory.tuple("State$1"));
        x13_upper.add(factory.tuple("State$2"));
        x13_upper.add(factory.tuple("State$3"));
        x13_upper.add(factory.tuple("State$4"));
        bounds.bound(x13, x13_upper);

        TupleSet x14_upper = factory.noneOf(2);
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("State$0")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("State$1")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("State$2")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("State$3")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("State$4")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("State$0")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("State$1")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("State$2")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("State$3")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("State$4")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("State$0")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("State$1")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("State$2")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("State$3")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("State$4")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("State$0")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("State$1")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("State$2")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("State$3")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("State$4")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("State$0")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("State$1")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("State$2")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("State$3")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("State$4")));
        bounds.bound(x14, x14_upper);

        TupleSet x15_upper = factory.noneOf(1);
        x15_upper.add(factory.tuple("Mutex$0"));
        x15_upper.add(factory.tuple("Mutex$1"));
        x15_upper.add(factory.tuple("Mutex$2"));
        x15_upper.add(factory.tuple("Mutex$3"));
        bounds.bound(x15, x15_upper);

        TupleSet x16_upper = factory.noneOf(2);
        x16_upper.add(factory.tuple("Mutex$0").product(factory.tuple("Mutex$0")));
        x16_upper.add(factory.tuple("Mutex$0").product(factory.tuple("Mutex$1")));
        x16_upper.add(factory.tuple("Mutex$0").product(factory.tuple("Mutex$2")));
        x16_upper.add(factory.tuple("Mutex$0").product(factory.tuple("Mutex$3")));
        x16_upper.add(factory.tuple("Mutex$1").product(factory.tuple("Mutex$0")));
        x16_upper.add(factory.tuple("Mutex$1").product(factory.tuple("Mutex$1")));
        x16_upper.add(factory.tuple("Mutex$1").product(factory.tuple("Mutex$2")));
        x16_upper.add(factory.tuple("Mutex$1").product(factory.tuple("Mutex$3")));
        x16_upper.add(factory.tuple("Mutex$2").product(factory.tuple("Mutex$0")));
        x16_upper.add(factory.tuple("Mutex$2").product(factory.tuple("Mutex$1")));
        x16_upper.add(factory.tuple("Mutex$2").product(factory.tuple("Mutex$2")));
        x16_upper.add(factory.tuple("Mutex$2").product(factory.tuple("Mutex$3")));
        x16_upper.add(factory.tuple("Mutex$3").product(factory.tuple("Mutex$0")));
        x16_upper.add(factory.tuple("Mutex$3").product(factory.tuple("Mutex$1")));
        x16_upper.add(factory.tuple("Mutex$3").product(factory.tuple("Mutex$2")));
        x16_upper.add(factory.tuple("Mutex$3").product(factory.tuple("Mutex$3")));
        bounds.bound(x16, x16_upper);

        TupleSet x17_upper = factory.noneOf(1);
        x17_upper.add(factory.tuple("State$0"));
        x17_upper.add(factory.tuple("State$1"));
        x17_upper.add(factory.tuple("State$2"));
        x17_upper.add(factory.tuple("State$3"));
        x17_upper.add(factory.tuple("State$4"));
        bounds.bound(x17, x17_upper);

        TupleSet x18_upper = factory.noneOf(1);
        x18_upper.add(factory.tuple("Mutex$0"));
        x18_upper.add(factory.tuple("Mutex$1"));
        x18_upper.add(factory.tuple("Mutex$2"));
        x18_upper.add(factory.tuple("Mutex$3"));
        bounds.bound(x18, x18_upper);

        bounds.boundExactly(-8,factory.range(factory.tuple("-8"),factory.tuple("-8")));
        bounds.boundExactly(-7,factory.range(factory.tuple("-7"),factory.tuple("-7")));
        bounds.boundExactly(-6,factory.range(factory.tuple("-6"),factory.tuple("-6")));
        bounds.boundExactly(-5,factory.range(factory.tuple("-5"),factory.tuple("-5")));
        bounds.boundExactly(-4,factory.range(factory.tuple("-4"),factory.tuple("-4")));
        bounds.boundExactly(-3,factory.range(factory.tuple("-3"),factory.tuple("-3")));
        bounds.boundExactly(-2,factory.range(factory.tuple("-2"),factory.tuple("-2")));
        bounds.boundExactly(-1,factory.range(factory.tuple("-1"),factory.tuple("-1")));
        bounds.boundExactly(0,factory.range(factory.tuple("0"),factory.tuple("0")));
        bounds.boundExactly(1,factory.range(factory.tuple("1"),factory.tuple("1")));
        bounds.boundExactly(2,factory.range(factory.tuple("2"),factory.tuple("2")));
        bounds.boundExactly(3,factory.range(factory.tuple("3"),factory.tuple("3")));
        bounds.boundExactly(4,factory.range(factory.tuple("4"),factory.tuple("4")));
        bounds.boundExactly(5,factory.range(factory.tuple("5"),factory.tuple("5")));
        bounds.boundExactly(6,factory.range(factory.tuple("6"),factory.tuple("6")));
        bounds.boundExactly(7,factory.range(factory.tuple("7"),factory.tuple("7")));

        Variable x22=Variable.unary("DijkstraPreventsDeadlocks_this");
        Decls x21=x22.oneOf(x8);
        Expression x24=x22.join(x11);
        Expression x25=x6.product(x7);
        Formula x23=x24.in(x25);
        Formula x20=x23.forAll(x21);
        Expression x28=x11.join(Expression.UNIV);
        Expression x27=x28.join(Expression.UNIV);
        Formula x26=x27.in(x8);
        Variable x32=Variable.unary("DijkstraPreventsDeadlocks_this");
        Decls x31=x32.oneOf(x8);
        Expression x34=x32.join(x12);
        Expression x35=x6.product(x7);
        Formula x33=x34.in(x35);
        Formula x30=x33.forAll(x31);
        Expression x38=x12.join(Expression.UNIV);
        Expression x37=x38.join(Expression.UNIV);
        Formula x36=x37.in(x8);
        Expression x41=x9.product(x13);
        Expression x40=x9.join(x41);
        Formula x39=x40.in(x8);
        Expression x44=x9.product(x14);
        Expression x43=x9.join(x44);
        Expression x45=x8.product(x8);
        Formula x42=x43.in(x45);
        Formula x46=x14.totalOrder(x8,x13,x17);
        Expression x49=x10.product(x15);
        Expression x48=x10.join(x49);
        Formula x47=x48.in(x7);
        Expression x52=x10.product(x16);
        Expression x51=x10.join(x52);
        Expression x53=x7.product(x7);
        Formula x50=x51.in(x53);
        Formula x54=x16.totalOrder(x7,x15,x18);
        Expression x61=x13.join(x11);
        Expression x62=x13.join(x12);
        Expression x60=x61.union(x62);
        Formula x59=x60.no();
        Variable x65=Variable.unary("GrabOrRelease_pre");
        Expression x68=x14.join(x8);
        Expression x67=x8.difference(x68);
        Expression x66=x8.difference(x67);
        Decls x64=x65.oneOf(x66);
        Expression x74=x65.join(x14);
        Expression x73=x74.join(x11);
        Expression x75=x65.join(x11);
        Formula x72=x73.eq(x75);
        Expression x77=x74.join(x12);
        Expression x78=x65.join(x12);
        Formula x76=x77.eq(x78);
        Formula x71=x72.and(x76);
        Variable x82=Variable.unary("GrabOrRelease_p");
        Decls x81=x82.oneOf(x6);
        Variable x84=Variable.unary("GrabOrRelease_m");
        Decls x83=x84.oneOf(x7);
        Decls x80=x81.and(x83);
        Expression x90=x65.join(x12);
        Expression x89=x82.join(x90);
        Formula x88=x89.some();
        Formula x87=x88.not();
        Expression x96=x65.join(x11);
        Expression x95=x82.join(x96);
        Formula x94=x84.in(x95);
        Formula x93=x94.not();
        Expression x102=x65.join(x11);
        Expression x101=x102.transpose();
        Expression x100=x84.join(x101);
        Formula x99=x100.no();
        Expression x106=x74.join(x11);
        Expression x105=x82.join(x106);
        Expression x109=x65.join(x11);
        Expression x108=x82.join(x109);
        Expression x107=x108.union(x84);
        Formula x104=x105.eq(x107);
        Expression x112=x74.join(x12);
        Expression x111=x82.join(x112);
        Formula x110=x111.no();
        Formula x103=x104.and(x110);
        Formula x98=x99.implies(x103);
        Formula x114=x99.not();
        Expression x118=x74.join(x11);
        Expression x117=x82.join(x118);
        Expression x120=x65.join(x11);
        Expression x119=x82.join(x120);
        Formula x116=x117.eq(x119);
        Expression x123=x74.join(x12);
        Expression x122=x82.join(x123);
        Formula x121=x122.eq(x84);
        Formula x115=x116.and(x121);
        Formula x113=x114.implies(x115);
        Formula x97=x98.and(x113);
        Formula x92=x93.and(x97);
        Variable x126=Variable.unary("GrabMutex_otherProc");
        Expression x127=x6.difference(x82);
        Decls x125=x126.oneOf(x127);
        Expression x131=x74.join(x11);
        Expression x130=x126.join(x131);
        Expression x133=x65.join(x11);
        Expression x132=x126.join(x133);
        Formula x129=x130.eq(x132);
        Expression x136=x74.join(x12);
        Expression x135=x126.join(x136);
        Expression x138=x65.join(x12);
        Expression x137=x126.join(x138);
        Formula x134=x135.eq(x137);
        Formula x128=x129.and(x134);
        Formula x124=x128.forAll(x125);
        Formula x91=x92.and(x124);
        Formula x86=x87.and(x91);
        Variable x141=Variable.unary("GrabMutex_m'");
        Expression x143=x65.join(x11);
        Expression x142=x82.join(x143);
        Decls x140=x141.oneOf(x142);
        Expression x147=x16.transpose();
        Expression x146=x147.closure();
        Expression x145=x84.join(x146);
        Formula x144=x141.in(x145);
        Formula x139=x144.forAll(x140);
        Formula x85=x86.and(x139);
        Formula x79=x85.forSome(x80);
        Formula x70=x71.or(x79);
        Variable x151=Variable.unary("GrabOrRelease_p");
        Decls x150=x151.oneOf(x6);
        Variable x153=Variable.unary("GrabOrRelease_m");
        Decls x152=x153.oneOf(x7);
        Decls x149=x150.and(x152);
        Expression x159=x65.join(x12);
        Expression x158=x151.join(x159);
        Formula x157=x158.some();
        Formula x156=x157.not();
        Expression x164=x65.join(x11);
        Expression x163=x151.join(x164);
        Formula x162=x153.in(x163);
        Expression x167=x74.join(x12);
        Expression x166=x151.join(x167);
        Formula x165=x166.no();
        Formula x161=x162.and(x165);
        Expression x173=x65.join(x12);
        Expression x172=x173.transpose();
        Expression x171=x153.join(x172);
        Formula x170=x171.no();
        Expression x178=x74.join(x11);
        Expression x177=x178.transpose();
        Expression x176=x153.join(x177);
        Formula x175=x176.no();
        Expression x182=x74.join(x12);
        Expression x181=x182.transpose();
        Expression x180=x153.join(x181);
        Formula x179=x180.no();
        Formula x174=x175.and(x179);
        Formula x169=x170.implies(x174);
        Formula x184=x170.not();
        Variable x187=Variable.unary("ReleaseMutex_lucky");
        Expression x190=x65.join(x12);
        Expression x189=x190.transpose();
        Expression x188=x153.join(x189);
        Decls x186=x187.oneOf(x188);
        Expression x195=x74.join(x12);
        Expression x194=x195.transpose();
        Expression x193=x153.join(x194);
        Expression x199=x65.join(x12);
        Expression x198=x199.transpose();
        Expression x197=x153.join(x198);
        Expression x196=x197.difference(x187);
        Formula x192=x193.eq(x196);
        Expression x203=x74.join(x11);
        Expression x202=x203.transpose();
        Expression x201=x153.join(x202);
        Formula x200=x201.eq(x187);
        Formula x191=x192.and(x200);
        Formula x185=x191.forSome(x186);
        Formula x183=x184.implies(x185);
        Formula x168=x169.and(x183);
        Formula x160=x161.and(x168);
        Formula x155=x156.and(x160);
        Expression x207=x74.join(x11);
        Expression x206=x151.join(x207);
        Expression x210=x65.join(x11);
        Expression x209=x151.join(x210);
        Expression x208=x209.difference(x153);
        Formula x205=x206.eq(x208);
        Variable x213=Variable.unary("ReleaseMutex_mu");
        Expression x214=x7.difference(x153);
        Decls x212=x213.oneOf(x214);
        Expression x219=x74.join(x12);
        Expression x218=x219.transpose();
        Expression x217=x213.join(x218);
        Expression x222=x65.join(x12);
        Expression x221=x222.transpose();
        Expression x220=x213.join(x221);
        Formula x216=x217.eq(x220);
        Expression x226=x74.join(x11);
        Expression x225=x226.transpose();
        Expression x224=x213.join(x225);
        Expression x229=x65.join(x11);
        Expression x228=x229.transpose();
        Expression x227=x213.join(x228);
        Formula x223=x224.eq(x227);
        Formula x215=x216.and(x223);
        Formula x211=x215.forAll(x212);
        Formula x204=x205.and(x211);
        Formula x154=x155.and(x204);
        Formula x148=x154.forSome(x149);
        Formula x69=x70.or(x148);
        Formula x63=x69.forAll(x64);
        Formula x58=x59.and(x63);
        Formula x57=x58.not();
        Formula x232=x6.some();
        Variable x235=Variable.unary("Deadlock_s");
        Decls x234=x235.oneOf(x8);
        Variable x238=Variable.unary("Deadlock_p");
        Decls x237=x238.oneOf(x6);
        Expression x241=x235.join(x12);
        Expression x240=x238.join(x241);
        Formula x239=x240.some();
        Formula x236=x239.forAll(x237);
        Formula x233=x236.forSome(x234);
        Formula x231=x232.and(x233);
        Formula x230=x231.not();
        Formula x56=x57.or(x230);
        Formula x55=x56.not();
        Formula x242=x0.eq(x0);
        Formula x243=x1.eq(x1);
        Formula x244=x2.eq(x2);
        Formula x245=x3.eq(x3);
        Formula x246=x4.eq(x4);
        Formula x247=x5.eq(x5);
        Formula x248=x6.eq(x6);
        Formula x249=x7.eq(x7);
        Formula x250=x8.eq(x8);
        Formula x251=x9.eq(x9);
        Formula x252=x10.eq(x10);
        Formula x253=x11.eq(x11);
        Formula x254=x12.eq(x12);
        Formula x255=x13.eq(x13);
        Formula x256=x14.eq(x14);
        Formula x257=x15.eq(x15);
        Formula x258=x16.eq(x16);
        Formula x259=x17.eq(x17);
        Formula x260=x18.eq(x18);
        Formula x19=Formula.compose(FormulaOperator.AND, x20, x26, x30, x36, x39, x42, x46, x47, x50, x54, x55, x242, x243, x244, x245, x246, x247, x248, x249, x250, x251, x252, x253, x254, x255, x256, x257, x258, x259, x260);

        Solver solver = new Solver();
        solver.options().setSolver(SATFactory.MiniSat);
        solver.options().setBitwidth(4);
        //solver.options().setFlatten(false);
        solver.options().setIntEncoding(Options.IntEncoding.TWOSCOMPLEMENT);
        solver.options().setSymmetryBreaking(20);
        solver.options().setSkolemDepth(0);
        System.out.println("Solving...");
        System.out.flush();
        Solution sol = solver.solve(x19,bounds);
        System.out.println(sol.toString());
    }}