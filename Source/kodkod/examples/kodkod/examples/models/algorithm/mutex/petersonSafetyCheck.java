package kodkod.examples.models.algorithm.mutex;

import java.util.Arrays;
import java.util.List;
import kodkod.ast.*;
import kodkod.ast.operator.*;
import kodkod.examples.ExampleMetadata;
import kodkod.instance.*;
import kodkod.engine.*;
import kodkod.engine.satlab.SATFactory;
import kodkod.engine.config.Options;


@ExampleMetadata(
        Name = "peterson",
        Note = "",
        IsCheck = true,
        PartialModel = true,
        BinaryRelations = 3,
        TernaryRelations = 4,
        NaryRelations = 0,
        HierarchicalTypes = 5,
        NestedRelationalJoins = 41,
        TransitiveClosure = 3,
        NestedQuantifiers = 1,
        SetCardinality = 2,
        Additions = 0,
        Subtractions = 0,
        Comparison = 46,
        OrderedRelations = 2,
        Constraints = 50
)


public final class petersonSafetyCheck {

    public static void main(String[] args) throws Exception {

        Relation x0 = Relation.unary("Int/min");
        Relation x1 = Relation.unary("Int/zero");
        Relation x2 = Relation.unary("Int/max");
        Relation x3 = Relation.nary("Int/next", 2);
        Relation x4 = Relation.unary("seq/Int");
        Relation x5 = Relation.unary("String");
        Relation x6 = Relation.unary("this/pid");
        Relation x7 = Relation.unary("this/priority");
        Relation x8 = Relation.unary("this/L0");
        Relation x9 = Relation.unary("this/L1");
        Relation x10 = Relation.unary("this/L2");
        Relation x11 = Relation.unary("this/L3");
        Relation x12 = Relation.unary("this/L4");
        Relation x13 = Relation.unary("this/State");
        Relation x14 = Relation.unary("po/Ord");
        Relation x15 = Relation.unary("so/Ord");
        Relation x16 = Relation.nary("this/State.P", 3);
        Relation x17 = Relation.nary("this/State.Q", 3);
        Relation x18 = Relation.nary("this/State.turn", 3);
        Relation x19 = Relation.nary("this/State.localj", 3);
        Relation x20 = Relation.unary("po/Ord.First");
        Relation x21 = Relation.nary("po/Ord.Next", 2);
        Relation x22 = Relation.unary("so/Ord.First");
        Relation x23 = Relation.nary("so/Ord.Next", 2);
        Relation x24 = Relation.unary("");
        Relation x25 = Relation.unary("");

        List<String> atomlist = Arrays.asList(
                "-1", "-2", "-3", "-4", "-5",
                "-6", "-7", "-8", "0", "1", "2",
                "3", "4", "5", "6", "7", "L0$0",
                "L1$0", "L2$0", "L3$0", "L4$0", "State$0", "State$1",
                "State$2", "State$3", "State$4", "State$5", "State$6", "State$7",
                "State$8", "State$9", "pid$0", "pid$1", "po/Ord$0", "priority$0",
                "priority$1", "priority$2", "so/Ord$0"
        );

        Universe universe = new Universe(atomlist);
        TupleFactory factory = universe.factory();
        Bounds bounds = new Bounds(universe);

        TupleSet x0_upper = factory.noneOf(1);
        x0_upper.add(factory.tuple("-8"));
        bounds.boundExactly(x0, x0_upper);

        TupleSet x1_upper = factory.noneOf(1);
        x1_upper.add(factory.tuple("0"));
        bounds.boundExactly(x1, x1_upper);

        TupleSet x2_upper = factory.noneOf(1);
        x2_upper.add(factory.tuple("7"));
        bounds.boundExactly(x2, x2_upper);

        TupleSet x3_upper = factory.noneOf(2);
        x3_upper.add(factory.tuple("-8").product(factory.tuple("-7")));
        x3_upper.add(factory.tuple("-7").product(factory.tuple("-6")));
        x3_upper.add(factory.tuple("-6").product(factory.tuple("-5")));
        x3_upper.add(factory.tuple("-5").product(factory.tuple("-4")));
        x3_upper.add(factory.tuple("-4").product(factory.tuple("-3")));
        x3_upper.add(factory.tuple("-3").product(factory.tuple("-2")));
        x3_upper.add(factory.tuple("-2").product(factory.tuple("-1")));
        x3_upper.add(factory.tuple("-1").product(factory.tuple("0")));
        x3_upper.add(factory.tuple("0").product(factory.tuple("1")));
        x3_upper.add(factory.tuple("1").product(factory.tuple("2")));
        x3_upper.add(factory.tuple("2").product(factory.tuple("3")));
        x3_upper.add(factory.tuple("3").product(factory.tuple("4")));
        x3_upper.add(factory.tuple("4").product(factory.tuple("5")));
        x3_upper.add(factory.tuple("5").product(factory.tuple("6")));
        x3_upper.add(factory.tuple("6").product(factory.tuple("7")));
        bounds.boundExactly(x3, x3_upper);

        TupleSet x4_upper = factory.noneOf(1);
        x4_upper.add(factory.tuple("0"));
        x4_upper.add(factory.tuple("1"));
        x4_upper.add(factory.tuple("2"));
        x4_upper.add(factory.tuple("3"));
        x4_upper.add(factory.tuple("4"));
        x4_upper.add(factory.tuple("5"));
        x4_upper.add(factory.tuple("6"));
        bounds.boundExactly(x4, x4_upper);

        TupleSet x5_upper = factory.noneOf(1);
        bounds.boundExactly(x5, x5_upper);

        TupleSet x6_upper = factory.noneOf(1);
        x6_upper.add(factory.tuple("pid$0"));
        x6_upper.add(factory.tuple("pid$1"));
        bounds.bound(x6, x6_upper);

        TupleSet x7_upper = factory.noneOf(1);
        x7_upper.add(factory.tuple("priority$0"));
        x7_upper.add(factory.tuple("priority$1"));
        x7_upper.add(factory.tuple("priority$2"));
        bounds.boundExactly(x7, x7_upper);

        TupleSet x8_upper = factory.noneOf(1);
        x8_upper.add(factory.tuple("L0$0"));
        bounds.boundExactly(x8, x8_upper);

        TupleSet x9_upper = factory.noneOf(1);
        x9_upper.add(factory.tuple("L1$0"));
        bounds.boundExactly(x9, x9_upper);

        TupleSet x10_upper = factory.noneOf(1);
        x10_upper.add(factory.tuple("L2$0"));
        bounds.boundExactly(x10, x10_upper);

        TupleSet x11_upper = factory.noneOf(1);
        x11_upper.add(factory.tuple("L3$0"));
        bounds.boundExactly(x11, x11_upper);

        TupleSet x12_upper = factory.noneOf(1);
        x12_upper.add(factory.tuple("L4$0"));
        bounds.boundExactly(x12, x12_upper);

        TupleSet x13_upper = factory.noneOf(1);
        x13_upper.add(factory.tuple("State$0"));
        x13_upper.add(factory.tuple("State$1"));
        x13_upper.add(factory.tuple("State$2"));
        x13_upper.add(factory.tuple("State$3"));
        x13_upper.add(factory.tuple("State$4"));
        x13_upper.add(factory.tuple("State$5"));
        x13_upper.add(factory.tuple("State$6"));
        x13_upper.add(factory.tuple("State$7"));
        x13_upper.add(factory.tuple("State$8"));
        x13_upper.add(factory.tuple("State$9"));
        bounds.boundExactly(x13, x13_upper);

        TupleSet x14_upper = factory.noneOf(1);
        x14_upper.add(factory.tuple("po/Ord$0"));
        bounds.boundExactly(x14, x14_upper);

        TupleSet x15_upper = factory.noneOf(1);
        x15_upper.add(factory.tuple("so/Ord$0"));
        bounds.boundExactly(x15, x15_upper);

        TupleSet x16_upper = factory.noneOf(3);
        x16_upper.add(factory.tuple("State$0").product(factory.tuple("pid$0")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$0").product(factory.tuple("pid$0")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$0").product(factory.tuple("pid$0")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$0").product(factory.tuple("pid$0")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$0").product(factory.tuple("pid$0")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$0").product(factory.tuple("pid$1")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$0").product(factory.tuple("pid$1")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$0").product(factory.tuple("pid$1")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$0").product(factory.tuple("pid$1")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$0").product(factory.tuple("pid$1")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$1").product(factory.tuple("pid$0")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$1").product(factory.tuple("pid$0")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$1").product(factory.tuple("pid$0")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$1").product(factory.tuple("pid$0")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$1").product(factory.tuple("pid$0")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$1").product(factory.tuple("pid$1")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$1").product(factory.tuple("pid$1")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$1").product(factory.tuple("pid$1")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$1").product(factory.tuple("pid$1")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$1").product(factory.tuple("pid$1")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$2").product(factory.tuple("pid$0")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$2").product(factory.tuple("pid$0")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$2").product(factory.tuple("pid$0")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$2").product(factory.tuple("pid$0")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$2").product(factory.tuple("pid$0")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$2").product(factory.tuple("pid$1")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$2").product(factory.tuple("pid$1")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$2").product(factory.tuple("pid$1")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$2").product(factory.tuple("pid$1")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$2").product(factory.tuple("pid$1")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$3").product(factory.tuple("pid$0")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$3").product(factory.tuple("pid$0")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$3").product(factory.tuple("pid$0")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$3").product(factory.tuple("pid$0")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$3").product(factory.tuple("pid$0")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$3").product(factory.tuple("pid$1")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$3").product(factory.tuple("pid$1")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$3").product(factory.tuple("pid$1")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$3").product(factory.tuple("pid$1")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$3").product(factory.tuple("pid$1")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$4").product(factory.tuple("pid$0")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$4").product(factory.tuple("pid$0")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$4").product(factory.tuple("pid$0")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$4").product(factory.tuple("pid$0")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$4").product(factory.tuple("pid$0")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$4").product(factory.tuple("pid$1")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$4").product(factory.tuple("pid$1")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$4").product(factory.tuple("pid$1")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$4").product(factory.tuple("pid$1")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$4").product(factory.tuple("pid$1")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$5").product(factory.tuple("pid$0")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$5").product(factory.tuple("pid$0")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$5").product(factory.tuple("pid$0")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$5").product(factory.tuple("pid$0")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$5").product(factory.tuple("pid$0")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$5").product(factory.tuple("pid$1")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$5").product(factory.tuple("pid$1")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$5").product(factory.tuple("pid$1")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$5").product(factory.tuple("pid$1")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$5").product(factory.tuple("pid$1")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$6").product(factory.tuple("pid$0")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$6").product(factory.tuple("pid$0")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$6").product(factory.tuple("pid$0")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$6").product(factory.tuple("pid$0")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$6").product(factory.tuple("pid$0")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$6").product(factory.tuple("pid$1")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$6").product(factory.tuple("pid$1")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$6").product(factory.tuple("pid$1")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$6").product(factory.tuple("pid$1")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$6").product(factory.tuple("pid$1")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$7").product(factory.tuple("pid$0")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$7").product(factory.tuple("pid$0")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$7").product(factory.tuple("pid$0")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$7").product(factory.tuple("pid$0")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$7").product(factory.tuple("pid$0")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$7").product(factory.tuple("pid$1")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$7").product(factory.tuple("pid$1")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$7").product(factory.tuple("pid$1")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$7").product(factory.tuple("pid$1")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$7").product(factory.tuple("pid$1")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$8").product(factory.tuple("pid$0")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$8").product(factory.tuple("pid$0")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$8").product(factory.tuple("pid$0")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$8").product(factory.tuple("pid$0")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$8").product(factory.tuple("pid$0")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$8").product(factory.tuple("pid$1")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$8").product(factory.tuple("pid$1")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$8").product(factory.tuple("pid$1")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$8").product(factory.tuple("pid$1")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$8").product(factory.tuple("pid$1")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$9").product(factory.tuple("pid$0")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$9").product(factory.tuple("pid$0")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$9").product(factory.tuple("pid$0")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$9").product(factory.tuple("pid$0")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$9").product(factory.tuple("pid$0")).product(factory.tuple("L4$0")));
        x16_upper.add(factory.tuple("State$9").product(factory.tuple("pid$1")).product(factory.tuple("L0$0")));
        x16_upper.add(factory.tuple("State$9").product(factory.tuple("pid$1")).product(factory.tuple("L1$0")));
        x16_upper.add(factory.tuple("State$9").product(factory.tuple("pid$1")).product(factory.tuple("L2$0")));
        x16_upper.add(factory.tuple("State$9").product(factory.tuple("pid$1")).product(factory.tuple("L3$0")));
        x16_upper.add(factory.tuple("State$9").product(factory.tuple("pid$1")).product(factory.tuple("L4$0")));
        bounds.bound(x16, x16_upper);

        TupleSet x17_upper = factory.noneOf(3);
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$0").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$1").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$2").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$3").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$4").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$4").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$4").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$4").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$4").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$4").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$5").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$5").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$5").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$5").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$5").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$5").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$6").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$6").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$6").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$6").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$6").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$6").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$7").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$7").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$7").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$7").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$7").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$7").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$8").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$8").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$8").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$8").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$8").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$8").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$9").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$9").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$9").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x17_upper.add(factory.tuple("State$9").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x17_upper.add(factory.tuple("State$9").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x17_upper.add(factory.tuple("State$9").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        bounds.bound(x17, x17_upper);

        TupleSet x18_upper = factory.noneOf(3);
        x18_upper.add(factory.tuple("State$0").product(factory.tuple("priority$0")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$0").product(factory.tuple("priority$0")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$0").product(factory.tuple("priority$1")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$0").product(factory.tuple("priority$1")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$0").product(factory.tuple("priority$2")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$0").product(factory.tuple("priority$2")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$1").product(factory.tuple("priority$0")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$1").product(factory.tuple("priority$0")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$1").product(factory.tuple("priority$1")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$1").product(factory.tuple("priority$1")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$1").product(factory.tuple("priority$2")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$1").product(factory.tuple("priority$2")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$2").product(factory.tuple("priority$0")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$2").product(factory.tuple("priority$0")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$2").product(factory.tuple("priority$1")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$2").product(factory.tuple("priority$1")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$2").product(factory.tuple("priority$2")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$2").product(factory.tuple("priority$2")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$3").product(factory.tuple("priority$0")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$3").product(factory.tuple("priority$0")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$3").product(factory.tuple("priority$1")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$3").product(factory.tuple("priority$1")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$3").product(factory.tuple("priority$2")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$3").product(factory.tuple("priority$2")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$4").product(factory.tuple("priority$0")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$4").product(factory.tuple("priority$0")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$4").product(factory.tuple("priority$1")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$4").product(factory.tuple("priority$1")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$4").product(factory.tuple("priority$2")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$4").product(factory.tuple("priority$2")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$5").product(factory.tuple("priority$0")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$5").product(factory.tuple("priority$0")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$5").product(factory.tuple("priority$1")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$5").product(factory.tuple("priority$1")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$5").product(factory.tuple("priority$2")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$5").product(factory.tuple("priority$2")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$6").product(factory.tuple("priority$0")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$6").product(factory.tuple("priority$0")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$6").product(factory.tuple("priority$1")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$6").product(factory.tuple("priority$1")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$6").product(factory.tuple("priority$2")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$6").product(factory.tuple("priority$2")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$7").product(factory.tuple("priority$0")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$7").product(factory.tuple("priority$0")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$7").product(factory.tuple("priority$1")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$7").product(factory.tuple("priority$1")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$7").product(factory.tuple("priority$2")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$7").product(factory.tuple("priority$2")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$8").product(factory.tuple("priority$0")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$8").product(factory.tuple("priority$0")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$8").product(factory.tuple("priority$1")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$8").product(factory.tuple("priority$1")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$8").product(factory.tuple("priority$2")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$8").product(factory.tuple("priority$2")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$9").product(factory.tuple("priority$0")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$9").product(factory.tuple("priority$0")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$9").product(factory.tuple("priority$1")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$9").product(factory.tuple("priority$1")).product(factory.tuple("pid$1")));
        x18_upper.add(factory.tuple("State$9").product(factory.tuple("priority$2")).product(factory.tuple("pid$0")));
        x18_upper.add(factory.tuple("State$9").product(factory.tuple("priority$2")).product(factory.tuple("pid$1")));
        bounds.bound(x18, x18_upper);

        TupleSet x19_upper = factory.noneOf(3);
        x19_upper.add(factory.tuple("State$0").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$0").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$0").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$0").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$0").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$0").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$1").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$1").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$1").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$1").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$1").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$1").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$2").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$2").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$2").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$2").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$2").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$2").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$3").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$3").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$3").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$3").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$3").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$3").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$4").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$4").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$4").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$4").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$4").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$4").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$5").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$5").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$5").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$5").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$5").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$5").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$6").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$6").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$6").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$6").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$6").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$6").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$7").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$7").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$7").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$7").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$7").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$7").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$8").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$8").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$8").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$8").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$8").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$8").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$9").product(factory.tuple("pid$0")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$9").product(factory.tuple("pid$0")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$9").product(factory.tuple("pid$0")).product(factory.tuple("priority$2")));
        x19_upper.add(factory.tuple("State$9").product(factory.tuple("pid$1")).product(factory.tuple("priority$0")));
        x19_upper.add(factory.tuple("State$9").product(factory.tuple("pid$1")).product(factory.tuple("priority$1")));
        x19_upper.add(factory.tuple("State$9").product(factory.tuple("pid$1")).product(factory.tuple("priority$2")));
        bounds.bound(x19, x19_upper);

        TupleSet x20_upper = factory.noneOf(1);
        x20_upper.add(factory.tuple("priority$0"));
        x20_upper.add(factory.tuple("priority$1"));
        x20_upper.add(factory.tuple("priority$2"));
        bounds.bound(x20, x20_upper);

        TupleSet x21_upper = factory.noneOf(2);
        x21_upper.add(factory.tuple("priority$0").product(factory.tuple("priority$0")));
        x21_upper.add(factory.tuple("priority$0").product(factory.tuple("priority$1")));
        x21_upper.add(factory.tuple("priority$0").product(factory.tuple("priority$2")));
        x21_upper.add(factory.tuple("priority$1").product(factory.tuple("priority$0")));
        x21_upper.add(factory.tuple("priority$1").product(factory.tuple("priority$1")));
        x21_upper.add(factory.tuple("priority$1").product(factory.tuple("priority$2")));
        x21_upper.add(factory.tuple("priority$2").product(factory.tuple("priority$0")));
        x21_upper.add(factory.tuple("priority$2").product(factory.tuple("priority$1")));
        x21_upper.add(factory.tuple("priority$2").product(factory.tuple("priority$2")));
        bounds.bound(x21, x21_upper);

        TupleSet x22_upper = factory.noneOf(1);
        x22_upper.add(factory.tuple("State$0"));
        x22_upper.add(factory.tuple("State$1"));
        x22_upper.add(factory.tuple("State$2"));
        x22_upper.add(factory.tuple("State$3"));
        x22_upper.add(factory.tuple("State$4"));
        x22_upper.add(factory.tuple("State$5"));
        x22_upper.add(factory.tuple("State$6"));
        x22_upper.add(factory.tuple("State$7"));
        x22_upper.add(factory.tuple("State$8"));
        x22_upper.add(factory.tuple("State$9"));
        bounds.bound(x22, x22_upper);

        TupleSet x23_upper = factory.noneOf(2);
        x23_upper.add(factory.tuple("State$0").product(factory.tuple("State$0")));
        x23_upper.add(factory.tuple("State$0").product(factory.tuple("State$1")));
        x23_upper.add(factory.tuple("State$0").product(factory.tuple("State$2")));
        x23_upper.add(factory.tuple("State$0").product(factory.tuple("State$3")));
        x23_upper.add(factory.tuple("State$0").product(factory.tuple("State$4")));
        x23_upper.add(factory.tuple("State$0").product(factory.tuple("State$5")));
        x23_upper.add(factory.tuple("State$0").product(factory.tuple("State$6")));
        x23_upper.add(factory.tuple("State$0").product(factory.tuple("State$7")));
        x23_upper.add(factory.tuple("State$0").product(factory.tuple("State$8")));
        x23_upper.add(factory.tuple("State$0").product(factory.tuple("State$9")));
        x23_upper.add(factory.tuple("State$1").product(factory.tuple("State$0")));
        x23_upper.add(factory.tuple("State$1").product(factory.tuple("State$1")));
        x23_upper.add(factory.tuple("State$1").product(factory.tuple("State$2")));
        x23_upper.add(factory.tuple("State$1").product(factory.tuple("State$3")));
        x23_upper.add(factory.tuple("State$1").product(factory.tuple("State$4")));
        x23_upper.add(factory.tuple("State$1").product(factory.tuple("State$5")));
        x23_upper.add(factory.tuple("State$1").product(factory.tuple("State$6")));
        x23_upper.add(factory.tuple("State$1").product(factory.tuple("State$7")));
        x23_upper.add(factory.tuple("State$1").product(factory.tuple("State$8")));
        x23_upper.add(factory.tuple("State$1").product(factory.tuple("State$9")));
        x23_upper.add(factory.tuple("State$2").product(factory.tuple("State$0")));
        x23_upper.add(factory.tuple("State$2").product(factory.tuple("State$1")));
        x23_upper.add(factory.tuple("State$2").product(factory.tuple("State$2")));
        x23_upper.add(factory.tuple("State$2").product(factory.tuple("State$3")));
        x23_upper.add(factory.tuple("State$2").product(factory.tuple("State$4")));
        x23_upper.add(factory.tuple("State$2").product(factory.tuple("State$5")));
        x23_upper.add(factory.tuple("State$2").product(factory.tuple("State$6")));
        x23_upper.add(factory.tuple("State$2").product(factory.tuple("State$7")));
        x23_upper.add(factory.tuple("State$2").product(factory.tuple("State$8")));
        x23_upper.add(factory.tuple("State$2").product(factory.tuple("State$9")));
        x23_upper.add(factory.tuple("State$3").product(factory.tuple("State$0")));
        x23_upper.add(factory.tuple("State$3").product(factory.tuple("State$1")));
        x23_upper.add(factory.tuple("State$3").product(factory.tuple("State$2")));
        x23_upper.add(factory.tuple("State$3").product(factory.tuple("State$3")));
        x23_upper.add(factory.tuple("State$3").product(factory.tuple("State$4")));
        x23_upper.add(factory.tuple("State$3").product(factory.tuple("State$5")));
        x23_upper.add(factory.tuple("State$3").product(factory.tuple("State$6")));
        x23_upper.add(factory.tuple("State$3").product(factory.tuple("State$7")));
        x23_upper.add(factory.tuple("State$3").product(factory.tuple("State$8")));
        x23_upper.add(factory.tuple("State$3").product(factory.tuple("State$9")));
        x23_upper.add(factory.tuple("State$4").product(factory.tuple("State$0")));
        x23_upper.add(factory.tuple("State$4").product(factory.tuple("State$1")));
        x23_upper.add(factory.tuple("State$4").product(factory.tuple("State$2")));
        x23_upper.add(factory.tuple("State$4").product(factory.tuple("State$3")));
        x23_upper.add(factory.tuple("State$4").product(factory.tuple("State$4")));
        x23_upper.add(factory.tuple("State$4").product(factory.tuple("State$5")));
        x23_upper.add(factory.tuple("State$4").product(factory.tuple("State$6")));
        x23_upper.add(factory.tuple("State$4").product(factory.tuple("State$7")));
        x23_upper.add(factory.tuple("State$4").product(factory.tuple("State$8")));
        x23_upper.add(factory.tuple("State$4").product(factory.tuple("State$9")));
        x23_upper.add(factory.tuple("State$5").product(factory.tuple("State$0")));
        x23_upper.add(factory.tuple("State$5").product(factory.tuple("State$1")));
        x23_upper.add(factory.tuple("State$5").product(factory.tuple("State$2")));
        x23_upper.add(factory.tuple("State$5").product(factory.tuple("State$3")));
        x23_upper.add(factory.tuple("State$5").product(factory.tuple("State$4")));
        x23_upper.add(factory.tuple("State$5").product(factory.tuple("State$5")));
        x23_upper.add(factory.tuple("State$5").product(factory.tuple("State$6")));
        x23_upper.add(factory.tuple("State$5").product(factory.tuple("State$7")));
        x23_upper.add(factory.tuple("State$5").product(factory.tuple("State$8")));
        x23_upper.add(factory.tuple("State$5").product(factory.tuple("State$9")));
        x23_upper.add(factory.tuple("State$6").product(factory.tuple("State$0")));
        x23_upper.add(factory.tuple("State$6").product(factory.tuple("State$1")));
        x23_upper.add(factory.tuple("State$6").product(factory.tuple("State$2")));
        x23_upper.add(factory.tuple("State$6").product(factory.tuple("State$3")));
        x23_upper.add(factory.tuple("State$6").product(factory.tuple("State$4")));
        x23_upper.add(factory.tuple("State$6").product(factory.tuple("State$5")));
        x23_upper.add(factory.tuple("State$6").product(factory.tuple("State$6")));
        x23_upper.add(factory.tuple("State$6").product(factory.tuple("State$7")));
        x23_upper.add(factory.tuple("State$6").product(factory.tuple("State$8")));
        x23_upper.add(factory.tuple("State$6").product(factory.tuple("State$9")));
        x23_upper.add(factory.tuple("State$7").product(factory.tuple("State$0")));
        x23_upper.add(factory.tuple("State$7").product(factory.tuple("State$1")));
        x23_upper.add(factory.tuple("State$7").product(factory.tuple("State$2")));
        x23_upper.add(factory.tuple("State$7").product(factory.tuple("State$3")));
        x23_upper.add(factory.tuple("State$7").product(factory.tuple("State$4")));
        x23_upper.add(factory.tuple("State$7").product(factory.tuple("State$5")));
        x23_upper.add(factory.tuple("State$7").product(factory.tuple("State$6")));
        x23_upper.add(factory.tuple("State$7").product(factory.tuple("State$7")));
        x23_upper.add(factory.tuple("State$7").product(factory.tuple("State$8")));
        x23_upper.add(factory.tuple("State$7").product(factory.tuple("State$9")));
        x23_upper.add(factory.tuple("State$8").product(factory.tuple("State$0")));
        x23_upper.add(factory.tuple("State$8").product(factory.tuple("State$1")));
        x23_upper.add(factory.tuple("State$8").product(factory.tuple("State$2")));
        x23_upper.add(factory.tuple("State$8").product(factory.tuple("State$3")));
        x23_upper.add(factory.tuple("State$8").product(factory.tuple("State$4")));
        x23_upper.add(factory.tuple("State$8").product(factory.tuple("State$5")));
        x23_upper.add(factory.tuple("State$8").product(factory.tuple("State$6")));
        x23_upper.add(factory.tuple("State$8").product(factory.tuple("State$7")));
        x23_upper.add(factory.tuple("State$8").product(factory.tuple("State$8")));
        x23_upper.add(factory.tuple("State$8").product(factory.tuple("State$9")));
        x23_upper.add(factory.tuple("State$9").product(factory.tuple("State$0")));
        x23_upper.add(factory.tuple("State$9").product(factory.tuple("State$1")));
        x23_upper.add(factory.tuple("State$9").product(factory.tuple("State$2")));
        x23_upper.add(factory.tuple("State$9").product(factory.tuple("State$3")));
        x23_upper.add(factory.tuple("State$9").product(factory.tuple("State$4")));
        x23_upper.add(factory.tuple("State$9").product(factory.tuple("State$5")));
        x23_upper.add(factory.tuple("State$9").product(factory.tuple("State$6")));
        x23_upper.add(factory.tuple("State$9").product(factory.tuple("State$7")));
        x23_upper.add(factory.tuple("State$9").product(factory.tuple("State$8")));
        x23_upper.add(factory.tuple("State$9").product(factory.tuple("State$9")));
        bounds.bound(x23, x23_upper);

        TupleSet x24_upper = factory.noneOf(1);
        x24_upper.add(factory.tuple("priority$0"));
        x24_upper.add(factory.tuple("priority$1"));
        x24_upper.add(factory.tuple("priority$2"));
        bounds.bound(x24, x24_upper);

        TupleSet x25_upper = factory.noneOf(1);
        x25_upper.add(factory.tuple("State$0"));
        x25_upper.add(factory.tuple("State$1"));
        x25_upper.add(factory.tuple("State$2"));
        x25_upper.add(factory.tuple("State$3"));
        x25_upper.add(factory.tuple("State$4"));
        x25_upper.add(factory.tuple("State$5"));
        x25_upper.add(factory.tuple("State$6"));
        x25_upper.add(factory.tuple("State$7"));
        x25_upper.add(factory.tuple("State$8"));
        x25_upper.add(factory.tuple("State$9"));
        bounds.bound(x25, x25_upper);

        bounds.boundExactly(-8,factory.range(factory.tuple("-8"),factory.tuple("-8")));
        bounds.boundExactly(-7,factory.range(factory.tuple("-7"),factory.tuple("-7")));
        bounds.boundExactly(-6,factory.range(factory.tuple("-6"),factory.tuple("-6")));
        bounds.boundExactly(-5,factory.range(factory.tuple("-5"),factory.tuple("-5")));
        bounds.boundExactly(-4,factory.range(factory.tuple("-4"),factory.tuple("-4")));
        bounds.boundExactly(-3,factory.range(factory.tuple("-3"),factory.tuple("-3")));
        bounds.boundExactly(-2,factory.range(factory.tuple("-2"),factory.tuple("-2")));
        bounds.boundExactly(-1,factory.range(factory.tuple("-1"),factory.tuple("-1")));
        bounds.boundExactly(0,factory.range(factory.tuple("0"),factory.tuple("0")));
        bounds.boundExactly(1,factory.range(factory.tuple("1"),factory.tuple("1")));
        bounds.boundExactly(2,factory.range(factory.tuple("2"),factory.tuple("2")));
        bounds.boundExactly(3,factory.range(factory.tuple("3"),factory.tuple("3")));
        bounds.boundExactly(4,factory.range(factory.tuple("4"),factory.tuple("4")));
        bounds.boundExactly(5,factory.range(factory.tuple("5"),factory.tuple("5")));
        bounds.boundExactly(6,factory.range(factory.tuple("6"),factory.tuple("6")));
        bounds.boundExactly(7,factory.range(factory.tuple("7"),factory.tuple("7")));

        Expression x28=x8.intersection(x9);
        Formula x27=x28.no();
        Expression x31=x8.union(x9);
        Expression x30=x31.intersection(x10);
        Formula x29=x30.no();
        Expression x34=x31.union(x10);
        Expression x33=x34.intersection(x11);
        Formula x32=x33.no();
        Expression x37=x34.union(x11);
        Expression x36=x37.intersection(x12);
        Formula x35=x36.no();
        Variable x40=Variable.unary("Safety_this");
        Decls x39=x40.oneOf(x13);
        Expression x42=x40.join(x16);
        Expression x44=x37.union(x12);
        Expression x43=x6.product(x44);
        Formula x41=x42.in(x43);
        Formula x38=x41.forAll(x39);
        Expression x47=x16.join(Expression.UNIV);
        Expression x46=x47.join(Expression.UNIV);
        Formula x45=x46.in(x13);
        Variable x51=Variable.unary("Safety_this");
        Decls x50=x51.oneOf(x13);
        Expression x53=x51.join(x17);
        Expression x54=x6.product(x7);
        Formula x52=x53.in(x54);
        Formula x49=x52.forAll(x50);
        Expression x57=x17.join(Expression.UNIV);
        Expression x56=x57.join(Expression.UNIV);
        Formula x55=x56.in(x13);
        Variable x60=Variable.unary("Safety_this");
        Decls x59=x60.oneOf(x13);
        Expression x62=x60.join(x18);
        Expression x63=x7.product(x6);
        Formula x61=x62.in(x63);
        Formula x58=x61.forAll(x59);
        Expression x66=x18.join(Expression.UNIV);
        Expression x65=x66.join(Expression.UNIV);
        Formula x64=x65.in(x13);
        Variable x69=Variable.unary("Safety_this");
        Decls x68=x69.oneOf(x13);
        Expression x71=x69.join(x19);
        Expression x72=x6.product(x7);
        Formula x70=x71.in(x72);
        Formula x67=x70.forAll(x68);
        Expression x75=x19.join(Expression.UNIV);
        Expression x74=x75.join(Expression.UNIV);
        Formula x73=x74.in(x13);
        Expression x78=x14.product(x20);
        Expression x77=x14.join(x78);
        Formula x76=x77.in(x7);
        Expression x81=x14.product(x21);
        Expression x80=x14.join(x81);
        Expression x82=x7.product(x7);
        Formula x79=x80.in(x82);
        Formula x83=x21.totalOrder(x7,x20,x24);
        Expression x86=x15.product(x22);
        Expression x85=x15.join(x86);
        Formula x84=x85.in(x13);
        Expression x89=x15.product(x23);
        Expression x88=x15.join(x89);
        Expression x90=x13.product(x13);
        Formula x87=x88.in(x90);
        Formula x91=x23.totalOrder(x13,x22,x25);
        IntExpression x93=x7.count();
        IntExpression x95=x6.count();
        IntExpression x96=IntConstant.constant(1);
        IntExpression x94=x95.plus(x96);
        Formula x92=x93.eq(x94);
        Variable x101=Variable.unary("Safety_i");
        Decls x100=x101.oneOf(x6);
        Expression x105=x22.join(x16);
        Expression x104=x101.join(x105);
        Formula x103=x104.eq(x8);
        Expression x108=x22.join(x17);
        Expression x107=x101.join(x108);
        Formula x106=x107.eq(x20);
        Formula x102=x103.and(x106);
        Formula x99=x102.forAll(x100);
        Expression x110=x22.join(x18);
        Formula x109=x110.no();
        Formula x98=x99.and(x109);
        Expression x112=x22.join(x19);
        Formula x111=x112.no();
        Formula x97=x98.and(x111);
        Variable x115=Variable.unary("Safety_pre");
        Expression x118=x23.join(x13);
        Expression x117=x13.difference(x118);
        Expression x116=x13.difference(x117);
        Decls x114=x115.oneOf(x116);
        Variable x122=Variable.unary("Safety_i");
        Decls x121=x122.oneOf(x6);
        Expression x130=x115.join(x16);
        Expression x129=x122.join(x130);
        Formula x128=x129.eq(x8);
        Expression x136=x115.join(x23);
        Expression x135=x136.join(x19);
        Expression x134=x122.join(x135);
        Expression x137=x20.join(x21);
        Formula x133=x134.eq(x137);
        Expression x140=x136.join(x17);
        Expression x139=x122.join(x140);
        Expression x142=x115.join(x17);
        Expression x141=x122.join(x142);
        Formula x138=x139.eq(x141);
        Formula x132=x133.and(x138);
        Expression x144=x136.join(x18);
        Expression x145=x115.join(x18);
        Formula x143=x144.eq(x145);
        Formula x131=x132.and(x143);
        Formula x127=x128.and(x131);
        Expression x148=x136.join(x16);
        Expression x147=x122.join(x148);
        Formula x146=x147.eq(x9);
        Formula x126=x127.and(x146);
        Expression x155=x115.join(x16);
        Expression x154=x122.join(x155);
        Formula x153=x154.eq(x9);
        Expression x160=x136.join(x19);
        Expression x159=x122.join(x160);
        Expression x162=x115.join(x19);
        Expression x161=x122.join(x162);
        Formula x158=x159.eq(x161);
        Expression x165=x136.join(x16);
        Expression x164=x122.join(x165);
        Formula x163=x164.eq(x10);
        Formula x157=x158.and(x163);
        Expression x167=x136.join(x18);
        Expression x168=x115.join(x18);
        Formula x166=x167.eq(x168);
        Formula x156=x157.and(x166);
        Formula x152=x153.and(x156);
        Expression x171=x136.join(x17);
        Expression x170=x122.join(x171);
        Expression x173=x115.join(x19);
        Expression x172=x122.join(x173);
        Formula x169=x170.eq(x172);
        Formula x151=x152.and(x169);
        Expression x179=x115.join(x16);
        Expression x178=x122.join(x179);
        Formula x177=x178.eq(x11);
        Variable x182=Variable.unary("L3TransPre_k");
        Expression x183=x6.difference(x122);
        Decls x181=x182.oneOf(x183);
        Expression x187=x115.join(x17);
        Expression x186=x182.join(x187);
        Expression x190=x115.join(x19);
        Expression x189=x122.join(x190);
        Expression x192=x21.transpose();
        Expression x191=x192.closure();
        Expression x188=x189.join(x191);
        Formula x185=x186.in(x188);
        Expression x197=x115.join(x19);
        Expression x196=x122.join(x197);
        Expression x198=x115.join(x18);
        Expression x195=x196.join(x198);
        Formula x194=x195.eq(x122);
        Formula x193=x194.not();
        Formula x184=x185.or(x193);
        Formula x180=x184.forAll(x181);
        Formula x176=x177.and(x180);
        Expression x203=x136.join(x19);
        Expression x202=x122.join(x203);
        Expression x206=x115.join(x19);
        Expression x205=x122.join(x206);
        Expression x204=x205.join(x21);
        Formula x201=x202.eq(x204);
        Expression x209=x136.join(x17);
        Expression x208=x122.join(x209);
        Expression x211=x115.join(x17);
        Expression x210=x122.join(x211);
        Formula x207=x208.eq(x210);
        Formula x200=x201.and(x207);
        Expression x213=x136.join(x18);
        Expression x214=x115.join(x18);
        Formula x212=x213.eq(x214);
        Formula x199=x200.and(x212);
        Formula x175=x176.and(x199);
        Expression x219=x136.join(x19);
        Expression x218=x122.join(x219);
        Expression x222=x21.join(x7);
        Expression x221=x7.difference(x222);
        Expression x224=x21.transpose();
        Expression x223=x224.closure();
        Expression x220=x221.join(x223);
        Formula x217=x218.in(x220);
        Expression x227=x136.join(x16);
        Expression x226=x122.join(x227);
        Formula x225=x226.eq(x9);
        Formula x216=x217.implies(x225);
        Formula x229=x217.not();
        Expression x232=x136.join(x16);
        Expression x231=x122.join(x232);
        Formula x230=x231.eq(x12);
        Formula x228=x229.implies(x230);
        Formula x215=x216.and(x228);
        Formula x174=x175.and(x215);
        Formula x150=x151.or(x174);
        Expression x237=x115.join(x16);
        Expression x236=x122.join(x237);
        Formula x235=x236.eq(x12);
        Expression x242=x136.join(x16);
        Expression x241=x122.join(x242);
        Formula x240=x241.eq(x8);
        Expression x245=x136.join(x19);
        Expression x244=x122.join(x245);
        Expression x247=x115.join(x19);
        Expression x246=x122.join(x247);
        Formula x243=x244.eq(x246);
        Formula x239=x240.and(x243);
        Expression x249=x136.join(x18);
        Expression x250=x115.join(x18);
        Formula x248=x249.eq(x250);
        Formula x238=x239.and(x248);
        Formula x234=x235.and(x238);
        Expression x253=x136.join(x17);
        Expression x252=x122.join(x253);
        Formula x251=x252.eq(x20);
        Formula x233=x234.and(x251);
        Formula x149=x150.or(x233);
        Formula x125=x126.or(x149);
        Expression x258=x115.join(x16);
        Expression x257=x122.join(x258);
        Formula x256=x257.eq(x10);
        Expression x263=x136.join(x19);
        Expression x262=x122.join(x263);
        Expression x265=x115.join(x19);
        Expression x264=x122.join(x265);
        Formula x261=x262.eq(x264);
        Expression x268=x136.join(x16);
        Expression x267=x122.join(x268);
        Formula x266=x267.eq(x11);
        Formula x260=x261.and(x266);
        Expression x272=x136.join(x19);
        Expression x271=x122.join(x272);
        Expression x273=x136.join(x18);
        Expression x270=x271.join(x273);
        Formula x269=x270.eq(x122);
        Formula x259=x260.and(x269);
        Formula x255=x256.and(x259);
        Expression x277=x136.join(x17);
        Expression x276=x122.join(x277);
        Expression x279=x115.join(x17);
        Expression x278=x122.join(x279);
        Formula x275=x276.eq(x278);
        Variable x282=Variable.unary("L2Trans_j");
        Expression x285=x136.join(x19);
        Expression x284=x122.join(x285);
        Expression x283=x7.difference(x284);
        Decls x281=x282.oneOf(x283);
        Expression x288=x136.join(x18);
        Expression x287=x282.join(x288);
        Expression x290=x115.join(x18);
        Expression x289=x282.join(x290);
        Formula x286=x287.eq(x289);
        Formula x280=x286.forAll(x281);
        Formula x274=x275.and(x280);
        Formula x254=x255.and(x274);
        Formula x124=x125.or(x254);
        Expression x295=x136.join(x16);
        Expression x294=x122.join(x295);
        Expression x297=x115.join(x16);
        Expression x296=x122.join(x297);
        Formula x293=x294.eq(x296);
        Expression x300=x136.join(x17);
        Expression x299=x122.join(x300);
        Expression x302=x115.join(x17);
        Expression x301=x122.join(x302);
        Formula x298=x299.eq(x301);
        Formula x292=x293.and(x298);
        Expression x305=x136.join(x19);
        Expression x304=x122.join(x305);
        Expression x307=x115.join(x19);
        Expression x306=x122.join(x307);
        Formula x303=x304.eq(x306);
        Formula x291=x292.and(x303);
        Formula x123=x124.or(x291);
        Formula x120=x123.forAll(x121);
        Variable x312=Variable.unary("Safety_i");
        Decls x311=x312.oneOf(x6);
        Expression x317=x136.join(x16);
        Expression x316=x312.join(x317);
        Expression x319=x115.join(x16);
        Expression x318=x312.join(x319);
        Formula x315=x316.eq(x318);
        Expression x322=x136.join(x17);
        Expression x321=x312.join(x322);
        Expression x324=x115.join(x17);
        Expression x323=x312.join(x324);
        Formula x320=x321.eq(x323);
        Formula x314=x315.and(x320);
        Expression x327=x136.join(x19);
        Expression x326=x312.join(x327);
        Expression x329=x115.join(x19);
        Expression x328=x312.join(x329);
        Formula x325=x326.eq(x328);
        Formula x313=x314.and(x325);
        Formula x310=x313.forAll(x311);
        Formula x309=x310.not();
        Variable x333=Variable.unary("Safety_i");
        Decls x332=x333.oneOf(x6);
        Expression x339=x115.join(x16);
        Expression x338=x333.join(x339);
        Formula x337=x338.eq(x8);
        Expression x344=x115.join(x16);
        Expression x343=x333.join(x344);
        Formula x342=x343.eq(x9);
        Expression x348=x115.join(x16);
        Expression x347=x333.join(x348);
        Formula x346=x347.eq(x11);
        Variable x351=Variable.unary("L3TransPre_k");
        Expression x352=x6.difference(x333);
        Decls x350=x351.oneOf(x352);
        Expression x356=x115.join(x17);
        Expression x355=x351.join(x356);
        Expression x359=x115.join(x19);
        Expression x358=x333.join(x359);
        Expression x361=x21.transpose();
        Expression x360=x361.closure();
        Expression x357=x358.join(x360);
        Formula x354=x355.in(x357);
        Expression x366=x115.join(x19);
        Expression x365=x333.join(x366);
        Expression x367=x115.join(x18);
        Expression x364=x365.join(x367);
        Formula x363=x364.eq(x333);
        Formula x362=x363.not();
        Formula x353=x354.or(x362);
        Formula x349=x353.forAll(x350);
        Formula x345=x346.and(x349);
        Formula x341=x342.or(x345);
        Expression x370=x115.join(x16);
        Expression x369=x333.join(x370);
        Formula x368=x369.eq(x12);
        Formula x340=x341.or(x368);
        Formula x336=x337.or(x340);
        Expression x373=x115.join(x16);
        Expression x372=x333.join(x373);
        Formula x371=x372.eq(x10);
        Formula x335=x336.or(x371);
        Formula x334=x335.not();
        Formula x331=x334.forAll(x332);
        Expression x375=x136.join(x18);
        Expression x376=x115.join(x18);
        Formula x374=x375.eq(x376);
        Formula x330=x331.and(x374);
        Formula x308=x309.or(x330);
        Formula x119=x120.and(x308);
        Formula x113=x119.forAll(x114);
        Variable x381=Variable.unary("Safety_i1");
        Decls x380=x381.oneOf(x6);
        Variable x383=Variable.unary("Safety_i2");
        Decls x382=x383.oneOf(x6);
        Variable x385=Variable.unary("Safety_s");
        Decls x384=x385.oneOf(x13);
        Decls x379=x380.and(x382).and(x384);
        Formula x389=x381.eq(x383);
        Formula x388=x389.not();
        Formula x387=x388.not();
        Expression x394=x385.join(x16);
        Expression x393=x381.join(x394);
        Formula x392=x393.eq(x12);
        Expression x397=x385.join(x16);
        Expression x396=x383.join(x397);
        Formula x395=x396.eq(x12);
        Formula x391=x392.and(x395);
        Formula x390=x391.not();
        Formula x386=x387.or(x390);
        Formula x378=x386.forAll(x379);
        Formula x377=x378.not();
        Formula x398=x0.eq(x0);
        Formula x399=x1.eq(x1);
        Formula x400=x2.eq(x2);
        Formula x401=x3.eq(x3);
        Formula x402=x4.eq(x4);
        Formula x403=x5.eq(x5);
        Formula x404=x6.eq(x6);
        Formula x405=x7.eq(x7);
        Formula x406=x8.eq(x8);
        Formula x407=x9.eq(x9);
        Formula x408=x10.eq(x10);
        Formula x409=x11.eq(x11);
        Formula x410=x12.eq(x12);
        Formula x411=x13.eq(x13);
        Formula x412=x14.eq(x14);
        Formula x413=x15.eq(x15);
        Formula x414=x16.eq(x16);
        Formula x415=x17.eq(x17);
        Formula x416=x18.eq(x18);
        Formula x417=x19.eq(x19);
        Formula x418=x20.eq(x20);
        Formula x419=x21.eq(x21);
        Formula x420=x22.eq(x22);
        Formula x421=x23.eq(x23);
        Formula x422=x24.eq(x24);
        Formula x423=x25.eq(x25);
        Formula x26=Formula.compose(FormulaOperator.AND, x27, x29, x32, x35, x38, x45, x49, x55, x58, x64, x67, x73, x76, x79, x83, x84, x87, x91, x92, x97, x113, x377, x398, x399, x400, x401, x402, x403, x404, x405, x406, x407, x408, x409, x410, x411, x412, x413, x414, x415, x416, x417, x418, x419, x420, x421, x422, x423);

        Solver solver = new Solver();
        solver.options().setSolver(SATFactory.MiniSat);
        solver.options().setBitwidth(4);
        //solver.options().setFlatten(false);
        solver.options().setIntEncoding(Options.IntEncoding.TWOSCOMPLEMENT);
        solver.options().setSymmetryBreaking(20);
        solver.options().setSkolemDepth(0);
        System.out.println("Solving...");
        System.out.flush();
        Solution sol = solver.solve(x26,bounds);
        System.out.println(sol.toString());
    }}