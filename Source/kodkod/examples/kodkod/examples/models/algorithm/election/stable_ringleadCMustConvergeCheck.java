package kodkod.examples.models.algorithm.election;

import java.util.Arrays;
import java.util.List;
import kodkod.ast.*;
import kodkod.ast.operator.*;
import kodkod.examples.ExampleMetadata;
import kodkod.instance.*;
import kodkod.engine.*;
import kodkod.engine.satlab.SATFactory;
import kodkod.engine.config.Options;
@ExampleMetadata(
        Name = "stable_ringlead",
        Note = "",
        IsCheck = true,
        PartialModel = true,
        BinaryRelations = 7,
        TernaryRelations =1,
        NaryRelations = 0,
        HierarchicalTypes = 0,
        NestedRelationalJoins = 2,
        TransitiveClosure = 0,
        NestedQuantifiers = 1,
        SetCardinality = 49,
        Additions = 0,
        Subtractions = 1,
        Comparison = 26,
        OrderedRelations = 3,
        Constraints =32
)


public final class stable_ringleadCMustConvergeCheck {

    public static void main(String[] args) throws Exception {

        Relation x0 = Relation.unary("Int/min");
        Relation x1 = Relation.unary("Int/zero");
        Relation x2 = Relation.unary("Int/max");
        Relation x3 = Relation.nary("Int/next", 2);
        Relation x4 = Relation.unary("seq/Int");
        Relation x5 = Relation.unary("String");
        Relation x6 = Relation.unary("this/Process");
        Relation x7 = Relation.unary("this/Val");
        Relation x8 = Relation.unary("this/State");
        Relation x9 = Relation.unary("po/Ord");
        Relation x10 = Relation.unary("vo/Ord");
        Relation x11 = Relation.unary("so/Ord");
        Relation x12 = Relation.nary("this/Process.rightNeighbor", 2);
        Relation x13 = Relation.nary("this/Val.nextVal", 2);
        Relation x14 = Relation.nary("this/State.val", 3);
        Relation x15 = Relation.nary("this/State.running", 2);
        Relation x16 = Relation.unary("po/Ord.First");
        Relation x17 = Relation.nary("po/Ord.Next", 2);
        Relation x18 = Relation.unary("vo/Ord.First");
        Relation x19 = Relation.nary("vo/Ord.Next", 2);
        Relation x20 = Relation.unary("so/Ord.First");
        Relation x21 = Relation.nary("so/Ord.Next", 2);
        Relation x22 = Relation.unary("");
        Relation x23 = Relation.unary("");
        Relation x24 = Relation.unary("");

        List<String> atomlist = Arrays.asList(
                "-1", "-2", "-3", "-4", "-5",
                "-6", "-7", "-8", "0", "1", "2",
                "3", "4", "5", "6", "7", "Process$0",
                "Process$1", "Process$2", "State$0", "State$1", "State$2", "State$3",
                "Val$0", "Val$1", "Val$2", "po/Ord$0", "so/Ord$0", "vo/Ord$0"
        );

        Universe universe = new Universe(atomlist);
        TupleFactory factory = universe.factory();
        Bounds bounds = new Bounds(universe);

        TupleSet x0_upper = factory.noneOf(1);
        x0_upper.add(factory.tuple("-8"));
        bounds.boundExactly(x0, x0_upper);

        TupleSet x1_upper = factory.noneOf(1);
        x1_upper.add(factory.tuple("0"));
        bounds.boundExactly(x1, x1_upper);

        TupleSet x2_upper = factory.noneOf(1);
        x2_upper.add(factory.tuple("7"));
        bounds.boundExactly(x2, x2_upper);

        TupleSet x3_upper = factory.noneOf(2);
        x3_upper.add(factory.tuple("-8").product(factory.tuple("-7")));
        x3_upper.add(factory.tuple("-7").product(factory.tuple("-6")));
        x3_upper.add(factory.tuple("-6").product(factory.tuple("-5")));
        x3_upper.add(factory.tuple("-5").product(factory.tuple("-4")));
        x3_upper.add(factory.tuple("-4").product(factory.tuple("-3")));
        x3_upper.add(factory.tuple("-3").product(factory.tuple("-2")));
        x3_upper.add(factory.tuple("-2").product(factory.tuple("-1")));
        x3_upper.add(factory.tuple("-1").product(factory.tuple("0")));
        x3_upper.add(factory.tuple("0").product(factory.tuple("1")));
        x3_upper.add(factory.tuple("1").product(factory.tuple("2")));
        x3_upper.add(factory.tuple("2").product(factory.tuple("3")));
        x3_upper.add(factory.tuple("3").product(factory.tuple("4")));
        x3_upper.add(factory.tuple("4").product(factory.tuple("5")));
        x3_upper.add(factory.tuple("5").product(factory.tuple("6")));
        x3_upper.add(factory.tuple("6").product(factory.tuple("7")));
        bounds.boundExactly(x3, x3_upper);

        TupleSet x4_upper = factory.noneOf(1);
        x4_upper.add(factory.tuple("0"));
        x4_upper.add(factory.tuple("1"));
        x4_upper.add(factory.tuple("2"));
        bounds.boundExactly(x4, x4_upper);

        TupleSet x5_upper = factory.noneOf(1);
        bounds.boundExactly(x5, x5_upper);

        TupleSet x6_upper = factory.noneOf(1);
        x6_upper.add(factory.tuple("Process$0"));
        x6_upper.add(factory.tuple("Process$1"));
        x6_upper.add(factory.tuple("Process$2"));
        bounds.boundExactly(x6, x6_upper);

        TupleSet x7_upper = factory.noneOf(1);
        x7_upper.add(factory.tuple("Val$0"));
        x7_upper.add(factory.tuple("Val$1"));
        x7_upper.add(factory.tuple("Val$2"));
        bounds.boundExactly(x7, x7_upper);

        TupleSet x8_upper = factory.noneOf(1);
        x8_upper.add(factory.tuple("State$0"));
        x8_upper.add(factory.tuple("State$1"));
        x8_upper.add(factory.tuple("State$2"));
        x8_upper.add(factory.tuple("State$3"));
        bounds.boundExactly(x8, x8_upper);

        TupleSet x9_upper = factory.noneOf(1);
        x9_upper.add(factory.tuple("po/Ord$0"));
        bounds.boundExactly(x9, x9_upper);

        TupleSet x10_upper = factory.noneOf(1);
        x10_upper.add(factory.tuple("vo/Ord$0"));
        bounds.boundExactly(x10, x10_upper);

        TupleSet x11_upper = factory.noneOf(1);
        x11_upper.add(factory.tuple("so/Ord$0"));
        bounds.boundExactly(x11, x11_upper);

        TupleSet x12_upper = factory.noneOf(2);
        x12_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$0")));
        x12_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$1")));
        x12_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$2")));
        x12_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$0")));
        x12_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$1")));
        x12_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$2")));
        x12_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$0")));
        x12_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$1")));
        x12_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$2")));
        bounds.bound(x12, x12_upper);

        TupleSet x13_upper = factory.noneOf(2);
        x13_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$0")));
        x13_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$1")));
        x13_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$2")));
        x13_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$0")));
        x13_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$1")));
        x13_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$2")));
        x13_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$0")));
        x13_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$1")));
        x13_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$2")));
        bounds.bound(x13, x13_upper);

        TupleSet x14_upper = factory.noneOf(3);
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Val$2")));
        bounds.bound(x14, x14_upper);

        TupleSet x15_upper = factory.noneOf(2);
        x15_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")));
        x15_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")));
        x15_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")));
        x15_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")));
        x15_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")));
        x15_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")));
        x15_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")));
        x15_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")));
        x15_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")));
        x15_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")));
        x15_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")));
        x15_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")));
        bounds.bound(x15, x15_upper);

        TupleSet x16_upper = factory.noneOf(1);
        x16_upper.add(factory.tuple("Process$0"));
        x16_upper.add(factory.tuple("Process$1"));
        x16_upper.add(factory.tuple("Process$2"));
        bounds.bound(x16, x16_upper);

        TupleSet x17_upper = factory.noneOf(2);
        x17_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$0")));
        x17_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$1")));
        x17_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$2")));
        x17_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$0")));
        x17_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$1")));
        x17_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$2")));
        x17_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$0")));
        x17_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$1")));
        x17_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$2")));
        bounds.bound(x17, x17_upper);

        TupleSet x18_upper = factory.noneOf(1);
        x18_upper.add(factory.tuple("Val$0"));
        x18_upper.add(factory.tuple("Val$1"));
        x18_upper.add(factory.tuple("Val$2"));
        bounds.bound(x18, x18_upper);

        TupleSet x19_upper = factory.noneOf(2);
        x19_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$0")));
        x19_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$1")));
        x19_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$2")));
        x19_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$0")));
        x19_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$1")));
        x19_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$2")));
        x19_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$0")));
        x19_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$1")));
        x19_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$2")));
        bounds.bound(x19, x19_upper);

        TupleSet x20_upper = factory.noneOf(1);
        x20_upper.add(factory.tuple("State$0"));
        x20_upper.add(factory.tuple("State$1"));
        x20_upper.add(factory.tuple("State$2"));
        x20_upper.add(factory.tuple("State$3"));
        bounds.bound(x20, x20_upper);

        TupleSet x21_upper = factory.noneOf(2);
        x21_upper.add(factory.tuple("State$0").product(factory.tuple("State$0")));
        x21_upper.add(factory.tuple("State$0").product(factory.tuple("State$1")));
        x21_upper.add(factory.tuple("State$0").product(factory.tuple("State$2")));
        x21_upper.add(factory.tuple("State$0").product(factory.tuple("State$3")));
        x21_upper.add(factory.tuple("State$1").product(factory.tuple("State$0")));
        x21_upper.add(factory.tuple("State$1").product(factory.tuple("State$1")));
        x21_upper.add(factory.tuple("State$1").product(factory.tuple("State$2")));
        x21_upper.add(factory.tuple("State$1").product(factory.tuple("State$3")));
        x21_upper.add(factory.tuple("State$2").product(factory.tuple("State$0")));
        x21_upper.add(factory.tuple("State$2").product(factory.tuple("State$1")));
        x21_upper.add(factory.tuple("State$2").product(factory.tuple("State$2")));
        x21_upper.add(factory.tuple("State$2").product(factory.tuple("State$3")));
        x21_upper.add(factory.tuple("State$3").product(factory.tuple("State$0")));
        x21_upper.add(factory.tuple("State$3").product(factory.tuple("State$1")));
        x21_upper.add(factory.tuple("State$3").product(factory.tuple("State$2")));
        x21_upper.add(factory.tuple("State$3").product(factory.tuple("State$3")));
        bounds.bound(x21, x21_upper);

        TupleSet x22_upper = factory.noneOf(1);
        x22_upper.add(factory.tuple("Process$0"));
        x22_upper.add(factory.tuple("Process$1"));
        x22_upper.add(factory.tuple("Process$2"));
        bounds.bound(x22, x22_upper);

        TupleSet x23_upper = factory.noneOf(1);
        x23_upper.add(factory.tuple("Val$0"));
        x23_upper.add(factory.tuple("Val$1"));
        x23_upper.add(factory.tuple("Val$2"));
        bounds.bound(x23, x23_upper);

        TupleSet x24_upper = factory.noneOf(1);
        x24_upper.add(factory.tuple("State$0"));
        x24_upper.add(factory.tuple("State$1"));
        x24_upper.add(factory.tuple("State$2"));
        x24_upper.add(factory.tuple("State$3"));
        bounds.bound(x24, x24_upper);

        bounds.boundExactly(-8,factory.range(factory.tuple("-8"),factory.tuple("-8")));
        bounds.boundExactly(-7,factory.range(factory.tuple("-7"),factory.tuple("-7")));
        bounds.boundExactly(-6,factory.range(factory.tuple("-6"),factory.tuple("-6")));
        bounds.boundExactly(-5,factory.range(factory.tuple("-5"),factory.tuple("-5")));
        bounds.boundExactly(-4,factory.range(factory.tuple("-4"),factory.tuple("-4")));
        bounds.boundExactly(-3,factory.range(factory.tuple("-3"),factory.tuple("-3")));
        bounds.boundExactly(-2,factory.range(factory.tuple("-2"),factory.tuple("-2")));
        bounds.boundExactly(-1,factory.range(factory.tuple("-1"),factory.tuple("-1")));
        bounds.boundExactly(0,factory.range(factory.tuple("0"),factory.tuple("0")));
        bounds.boundExactly(1,factory.range(factory.tuple("1"),factory.tuple("1")));
        bounds.boundExactly(2,factory.range(factory.tuple("2"),factory.tuple("2")));
        bounds.boundExactly(3,factory.range(factory.tuple("3"),factory.tuple("3")));
        bounds.boundExactly(4,factory.range(factory.tuple("4"),factory.tuple("4")));
        bounds.boundExactly(5,factory.range(factory.tuple("5"),factory.tuple("5")));
        bounds.boundExactly(6,factory.range(factory.tuple("6"),factory.tuple("6")));
        bounds.boundExactly(7,factory.range(factory.tuple("7"),factory.tuple("7")));

        Variable x28=Variable.unary("CMustConverge_this");
        Decls x27=x28.oneOf(x6);
        Expression x31=x28.join(x12);
        Formula x30=x31.one();
        Formula x32=x31.in(x6);
        Formula x29=x30.and(x32);
        Formula x26=x29.forAll(x27);
        Expression x34=x12.join(Expression.UNIV);
        Formula x33=x34.in(x6);
        Variable x38=Variable.unary("CMustConverge_this");
        Decls x37=x38.oneOf(x7);
        Expression x41=x38.join(x13);
        Formula x40=x41.one();
        Formula x42=x41.in(x7);
        Formula x39=x40.and(x42);
        Formula x36=x39.forAll(x37);
        Expression x44=x13.join(Expression.UNIV);
        Formula x43=x44.in(x7);
        Variable x47=Variable.unary("CMustConverge_this");
        Decls x46=x47.oneOf(x8);
        Expression x51=x47.join(x14);
        Expression x52=x6.product(x7);
        Formula x50=x51.in(x52);
        Variable x55=Variable.unary("");
        Decls x54=x55.oneOf(x6);
        Expression x58=x55.join(x51);
        Formula x57=x58.one();
        Formula x59=x58.in(x7);
        Formula x56=x57.and(x59);
        Formula x53=x56.forAll(x54);
        Formula x49=x50.and(x53);
        Variable x62=Variable.unary("");
        Decls x61=x62.oneOf(x7);
        Expression x64=x51.join(x62);
        Formula x63=x64.in(x6);
        Formula x60=x63.forAll(x61);
        Formula x48=x49.and(x60);
        Formula x45=x48.forAll(x46);
        Expression x67=x14.join(Expression.UNIV);
        Expression x66=x67.join(Expression.UNIV);
        Formula x65=x66.in(x8);
        Variable x70=Variable.unary("CMustConverge_this");
        Decls x69=x70.oneOf(x8);
        Expression x72=x70.join(x15);
        Formula x71=x72.in(x6);
        Formula x68=x71.forAll(x69);
        Expression x74=x15.join(Expression.UNIV);
        Formula x73=x74.in(x8);
        Expression x77=x9.product(x16);
        Expression x76=x9.join(x77);
        Formula x75=x76.in(x6);
        Expression x80=x9.product(x17);
        Expression x79=x9.join(x80);
        Expression x81=x6.product(x6);
        Formula x78=x79.in(x81);
        Formula x82=x17.totalOrder(x6,x16,x22);
        Expression x85=x10.product(x18);
        Expression x84=x10.join(x85);
        Formula x83=x84.in(x7);
        Expression x88=x10.product(x19);
        Expression x87=x10.join(x88);
        Expression x89=x7.product(x7);
        Formula x86=x87.in(x89);
        Formula x90=x19.totalOrder(x7,x18,x23);
        Expression x93=x11.product(x20);
        Expression x92=x11.join(x93);
        Formula x91=x92.in(x8);
        Expression x96=x11.product(x21);
        Expression x95=x11.join(x96);
        Expression x97=x8.product(x8);
        Formula x94=x95.in(x97);
        Formula x98=x21.totalOrder(x8,x20,x24);
        Variable x101=Variable.unary("ring_n");
        Decls x100=x101.oneOf(x6);
        Expression x104=x101.join(x12);
        Formula x103=x104.one();
        Expression x108=x12.closure();
        Expression x118=Expression.INTS.union(x5);
        Expression x117=x118.union(x6);
        Expression x116=x117.union(x7);
        Expression x115=x116.union(x8);
        Expression x114=x115.union(x9);
        Expression x113=x114.union(x10);
        Expression x112=x113.union(x11);
        Expression x111=x112.product(Expression.UNIV);
        Expression x109=Expression.IDEN.intersection(x111);
        Expression x107=x108.union(x109);
        Expression x106=x101.join(x107);
        Formula x105=x6.in(x106);
        Formula x102=x103.and(x105);
        Formula x99=x102.forAll(x100);
        Expression x124=x19.join(x7);
        Expression x123=x7.difference(x124);
        Expression x122=x123.product(x18);
        Expression x121=x19.union(x122);
        Formula x120=x121.eq(x13);
        IntExpression x126=x7.count();
        IntExpression x127=x6.count();
        Formula x125=x126.eq(x127);
        Expression x131=x21.join(x8);
        Expression x130=x8.difference(x131);
        Expression x129=x130.join(x15);
        Formula x128=x129.no();
        Variable x138=Variable.unary("OneAtATimeTrans_tp");
        Expression x139=x8.difference(x130);
        Decls x137=x138.oneOf(x139);
        Variable x142=Variable.unary("OneAtATimeTrans_p");
        Decls x141=x142.oneOf(x6);
        Expression x146=x138.join(x15);
        Formula x145=x146.eq(x142);
        Expression x150=x138.join(x21);
        Expression x149=x150.join(x14);
        Expression x148=x142.join(x149);
        Expression x160=x12.transpose();
        Expression x159=x142.join(x160);
        Expression x161=x138.join(x14);
        Expression x158=x159.join(x161);
        Expression x163=x138.join(x14);
        Expression x162=x142.join(x163);
        Formula x157=x158.eq(x162);
        IntExpression x165=x7.count();
        Expression x164=x165.toExpression();
        Formula x168=x162.eq(x158);
        IntExpression x169=IntConstant.constant(0);
        Expression x173=x19.closure();
        Expression x172=x158.join(x173);
        Formula x171=x162.in(x172);
        Expression x178=x19.closure();
        Expression x177=x158.join(x178);
        Expression x181=x19.transpose();
        Expression x180=x181.closure();
        Expression x179=x162.join(x180);
        Expression x176=x177.intersection(x179);
        Expression x175=x176.union(x162);
        IntExpression x174=x175.count();
        Expression x187=x19.closure();
        Expression x186=x162.join(x187);
        Expression x190=x19.transpose();
        Expression x189=x190.closure();
        Expression x188=x158.join(x189);
        Expression x185=x186.intersection(x188);
        Expression x184=x185.union(x162);
        Expression x183=x7.difference(x184);
        IntExpression x182=x183.count();
        IntExpression x170=x171.thenElse(x174,x182);
        IntExpression x167=x168.thenElse(x169,x170);
        Expression x166=x167.toExpression();
        Expression x156=x157.thenElse(x164,x166);
        IntExpression x155=x156.sum();
        Expression x195=x138.join(x14);
        Expression x194=x142.join(x195);
        Expression x197=x142.join(x12);
        Expression x198=x138.join(x14);
        Expression x196=x197.join(x198);
        Formula x193=x194.eq(x196);
        IntExpression x200=x7.count();
        Expression x199=x200.toExpression();
        Formula x203=x196.eq(x194);
        IntExpression x204=IntConstant.constant(0);
        Expression x208=x19.closure();
        Expression x207=x194.join(x208);
        Formula x206=x196.in(x207);
        Expression x213=x19.closure();
        Expression x212=x194.join(x213);
        Expression x216=x19.transpose();
        Expression x215=x216.closure();
        Expression x214=x196.join(x215);
        Expression x211=x212.intersection(x214);
        Expression x210=x211.union(x196);
        IntExpression x209=x210.count();
        Expression x222=x19.closure();
        Expression x221=x196.join(x222);
        Expression x225=x19.transpose();
        Expression x224=x225.closure();
        Expression x223=x194.join(x224);
        Expression x220=x221.intersection(x223);
        Expression x219=x220.union(x196);
        Expression x218=x7.difference(x219);
        IntExpression x217=x218.count();
        IntExpression x205=x206.thenElse(x209,x217);
        IntExpression x202=x203.thenElse(x204,x205);
        Expression x201=x202.toExpression();
        Expression x192=x193.thenElse(x199,x201);
        IntExpression x191=x192.sum();
        Formula x154=x155.eq(x191);
        IntExpression x227=x192.sum();
        IntExpression x228=x7.count();
        Formula x226=x227.eq(x228);
        Formula x153=x154.and(x226);
        IntExpression x230=x156.sum();
        IntExpression x231=x192.sum();
        Formula x229=x230.lt(x231);
        Formula x152=x153.or(x229);
        Expression x234=x138.join(x14);
        Expression x233=x142.join(x234);
        Expression x232=x233.join(x13);
        Expression x151=x152.thenElse(x232,x233);
        Formula x147=x148.eq(x151);
        Formula x144=x145.and(x147);
        Variable x237=Variable.unary("OneAtATimeTrans_other");
        Expression x238=x6.difference(x142);
        Decls x236=x237.oneOf(x238);
        Expression x241=x150.join(x14);
        Expression x240=x237.join(x241);
        Expression x243=x138.join(x14);
        Expression x242=x237.join(x243);
        Formula x239=x240.eq(x242);
        Formula x235=x239.forAll(x236);
        Formula x143=x144.and(x235);
        Formula x140=x143.forSome(x141);
        Formula x136=x140.forAll(x137);
        Variable x247=Variable.unary("OnlyFairLoops_s");
        Decls x246=x247.oneOf(x8);
        Variable x249=Variable.unary("OnlyFairLoops_s'");
        Decls x248=x249.oneOf(x8);
        Decls x245=x246.and(x248);
        Expression x255=x21.closure();
        Expression x254=x247.join(x255);
        Formula x253=x249.in(x254);
        Expression x257=x249.join(x14);
        Expression x258=x247.join(x14);
        Formula x256=x257.eq(x258);
        Formula x252=x253.and(x256);
        Formula x251=x252.not();
        Expression x265=x21.closure();
        Expression x264=x247.join(x265);
        Expression x268=x21.transpose();
        Expression x267=x268.closure();
        Expression x266=x249.join(x267);
        Expression x263=x264.intersection(x266);
        Expression x262=x263.union(x247);
        Expression x261=x262.union(x249);
        Expression x260=x261.join(x15);
        Formula x259=x6.in(x260);
        Formula x250=x251.or(x259);
        Formula x244=x250.forAll(x245);
        Formula x135=x136.and(x244);
        Formula x134=x135.not();
        Variable x271=Variable.unary("CMustConverge_s");
        Decls x270=x271.oneOf(x8);
        Variable x277=Variable.unary("LeadersAtState_p");
        Decls x276=x277.oneOf(x6);
        Expression x280=x271.join(x14);
        Expression x279=x277.join(x280);
        Formula x278=x279.eq(x18);
        Expression x275=x278.comprehension(x276);
        Formula x274=x275.one();
        Variable x283=Variable.unary("Legit_p");
        Decls x282=x283.oneOf(x6);
        Expression x291=x12.transpose();
        Expression x290=x283.join(x291);
        Expression x292=x271.join(x14);
        Expression x289=x290.join(x292);
        Expression x294=x271.join(x14);
        Expression x293=x283.join(x294);
        Formula x288=x289.eq(x293);
        IntExpression x296=x7.count();
        Expression x295=x296.toExpression();
        Formula x299=x293.eq(x289);
        IntExpression x300=IntConstant.constant(0);
        Expression x304=x19.closure();
        Expression x303=x289.join(x304);
        Formula x302=x293.in(x303);
        Expression x309=x19.closure();
        Expression x308=x289.join(x309);
        Expression x312=x19.transpose();
        Expression x311=x312.closure();
        Expression x310=x293.join(x311);
        Expression x307=x308.intersection(x310);
        Expression x306=x307.union(x293);
        IntExpression x305=x306.count();
        Expression x318=x19.closure();
        Expression x317=x293.join(x318);
        Expression x321=x19.transpose();
        Expression x320=x321.closure();
        Expression x319=x289.join(x320);
        Expression x316=x317.intersection(x319);
        Expression x315=x316.union(x293);
        Expression x314=x7.difference(x315);
        IntExpression x313=x314.count();
        IntExpression x301=x302.thenElse(x305,x313);
        IntExpression x298=x299.thenElse(x300,x301);
        Expression x297=x298.toExpression();
        Expression x287=x288.thenElse(x295,x297);
        IntExpression x286=x287.sum();
        IntExpression x322=x7.count();
        Formula x285=x286.lt(x322);
        Expression x328=x271.join(x14);
        Expression x327=x283.join(x328);
        Expression x330=x283.join(x12);
        Expression x331=x271.join(x14);
        Expression x329=x330.join(x331);
        Formula x326=x327.eq(x329);
        IntExpression x333=x7.count();
        Expression x332=x333.toExpression();
        Formula x336=x329.eq(x327);
        IntExpression x337=IntConstant.constant(0);
        Expression x341=x19.closure();
        Expression x340=x327.join(x341);
        Formula x339=x329.in(x340);
        Expression x346=x19.closure();
        Expression x345=x327.join(x346);
        Expression x349=x19.transpose();
        Expression x348=x349.closure();
        Expression x347=x329.join(x348);
        Expression x344=x345.intersection(x347);
        Expression x343=x344.union(x329);
        IntExpression x342=x343.count();
        Expression x355=x19.closure();
        Expression x354=x329.join(x355);
        Expression x358=x19.transpose();
        Expression x357=x358.closure();
        Expression x356=x327.join(x357);
        Expression x353=x354.intersection(x356);
        Expression x352=x353.union(x329);
        Expression x351=x7.difference(x352);
        IntExpression x350=x351.count();
        IntExpression x338=x339.thenElse(x342,x350);
        IntExpression x335=x336.thenElse(x337,x338);
        Expression x334=x335.toExpression();
        Expression x325=x326.thenElse(x332,x334);
        IntExpression x324=x325.sum();
        IntExpression x359=x7.count();
        Formula x323=x324.lt(x359);
        Formula x284=x285.and(x323);
        Formula x281=x284.forAll(x282);
        Formula x273=x274.and(x281);
        Variable x363=Variable.unary("Legit_p");
        Decls x362=x363.oneOf(x6);
        Variable x365=Variable.unary("Legit_p'");
        Decls x364=x365.oneOf(x6);
        Decls x361=x362.and(x364);
        Expression x373=x12.transpose();
        Expression x372=x363.join(x373);
        Expression x374=x271.join(x14);
        Expression x371=x372.join(x374);
        Expression x376=x271.join(x14);
        Expression x375=x363.join(x376);
        Formula x370=x371.eq(x375);
        IntExpression x378=x7.count();
        Expression x377=x378.toExpression();
        Formula x381=x375.eq(x371);
        IntExpression x382=IntConstant.constant(0);
        Expression x386=x19.closure();
        Expression x385=x371.join(x386);
        Formula x384=x375.in(x385);
        Expression x391=x19.closure();
        Expression x390=x371.join(x391);
        Expression x394=x19.transpose();
        Expression x393=x394.closure();
        Expression x392=x375.join(x393);
        Expression x389=x390.intersection(x392);
        Expression x388=x389.union(x375);
        IntExpression x387=x388.count();
        Expression x400=x19.closure();
        Expression x399=x375.join(x400);
        Expression x403=x19.transpose();
        Expression x402=x403.closure();
        Expression x401=x371.join(x402);
        Expression x398=x399.intersection(x401);
        Expression x397=x398.union(x375);
        Expression x396=x7.difference(x397);
        IntExpression x395=x396.count();
        IntExpression x383=x384.thenElse(x387,x395);
        IntExpression x380=x381.thenElse(x382,x383);
        Expression x379=x380.toExpression();
        Expression x369=x370.thenElse(x377,x379);
        IntExpression x368=x369.sum();
        Expression x409=x12.transpose();
        Expression x408=x365.join(x409);
        Expression x410=x271.join(x14);
        Expression x407=x408.join(x410);
        Expression x412=x271.join(x14);
        Expression x411=x365.join(x412);
        Formula x406=x407.eq(x411);
        IntExpression x414=x7.count();
        Expression x413=x414.toExpression();
        Formula x417=x411.eq(x407);
        IntExpression x418=IntConstant.constant(0);
        Expression x422=x19.closure();
        Expression x421=x407.join(x422);
        Formula x420=x411.in(x421);
        Expression x427=x19.closure();
        Expression x426=x407.join(x427);
        Expression x430=x19.transpose();
        Expression x429=x430.closure();
        Expression x428=x411.join(x429);
        Expression x425=x426.intersection(x428);
        Expression x424=x425.union(x411);
        IntExpression x423=x424.count();
        Expression x436=x19.closure();
        Expression x435=x411.join(x436);
        Expression x439=x19.transpose();
        Expression x438=x439.closure();
        Expression x437=x407.join(x438);
        Expression x434=x435.intersection(x437);
        Expression x433=x434.union(x411);
        Expression x432=x7.difference(x433);
        IntExpression x431=x432.count();
        IntExpression x419=x420.thenElse(x423,x431);
        IntExpression x416=x417.thenElse(x418,x419);
        Expression x415=x416.toExpression();
        Expression x405=x406.thenElse(x413,x415);
        IntExpression x404=x405.sum();
        Formula x367=x368.eq(x404);
        Expression x445=x271.join(x14);
        Expression x444=x363.join(x445);
        Expression x447=x363.join(x12);
        Expression x448=x271.join(x14);
        Expression x446=x447.join(x448);
        Formula x443=x444.eq(x446);
        IntExpression x450=x7.count();
        Expression x449=x450.toExpression();
        Formula x453=x446.eq(x444);
        IntExpression x454=IntConstant.constant(0);
        Expression x458=x19.closure();
        Expression x457=x444.join(x458);
        Formula x456=x446.in(x457);
        Expression x463=x19.closure();
        Expression x462=x444.join(x463);
        Expression x466=x19.transpose();
        Expression x465=x466.closure();
        Expression x464=x446.join(x465);
        Expression x461=x462.intersection(x464);
        Expression x460=x461.union(x446);
        IntExpression x459=x460.count();
        Expression x472=x19.closure();
        Expression x471=x446.join(x472);
        Expression x475=x19.transpose();
        Expression x474=x475.closure();
        Expression x473=x444.join(x474);
        Expression x470=x471.intersection(x473);
        Expression x469=x470.union(x446);
        Expression x468=x7.difference(x469);
        IntExpression x467=x468.count();
        IntExpression x455=x456.thenElse(x459,x467);
        IntExpression x452=x453.thenElse(x454,x455);
        Expression x451=x452.toExpression();
        Expression x442=x443.thenElse(x449,x451);
        IntExpression x441=x442.sum();
        Expression x480=x271.join(x14);
        Expression x479=x365.join(x480);
        Expression x482=x365.join(x12);
        Expression x483=x271.join(x14);
        Expression x481=x482.join(x483);
        Formula x478=x479.eq(x481);
        IntExpression x485=x7.count();
        Expression x484=x485.toExpression();
        Formula x488=x481.eq(x479);
        IntExpression x489=IntConstant.constant(0);
        Expression x493=x19.closure();
        Expression x492=x479.join(x493);
        Formula x491=x481.in(x492);
        Expression x498=x19.closure();
        Expression x497=x479.join(x498);
        Expression x501=x19.transpose();
        Expression x500=x501.closure();
        Expression x499=x481.join(x500);
        Expression x496=x497.intersection(x499);
        Expression x495=x496.union(x481);
        IntExpression x494=x495.count();
        Expression x507=x19.closure();
        Expression x506=x481.join(x507);
        Expression x510=x19.transpose();
        Expression x509=x510.closure();
        Expression x508=x479.join(x509);
        Expression x505=x506.intersection(x508);
        Expression x504=x505.union(x481);
        Expression x503=x7.difference(x504);
        IntExpression x502=x503.count();
        IntExpression x490=x491.thenElse(x494,x502);
        IntExpression x487=x488.thenElse(x489,x490);
        Expression x486=x487.toExpression();
        Expression x477=x478.thenElse(x484,x486);
        IntExpression x476=x477.sum();
        Formula x440=x441.eq(x476);
        Formula x366=x367.and(x440);
        Formula x360=x366.forAll(x361);
        Formula x272=x273.and(x360);
        Formula x269=x272.forSome(x270);
        Formula x133=x134.or(x269);
        Formula x132=x133.not();
        Formula x511=x0.eq(x0);
        Formula x512=x1.eq(x1);
        Formula x513=x2.eq(x2);
        Formula x514=x3.eq(x3);
        Formula x515=x4.eq(x4);
        Formula x516=x5.eq(x5);
        Formula x517=x6.eq(x6);
        Formula x518=x7.eq(x7);
        Formula x519=x8.eq(x8);
        Formula x520=x9.eq(x9);
        Formula x521=x10.eq(x10);
        Formula x522=x11.eq(x11);
        Formula x523=x12.eq(x12);
        Formula x524=x13.eq(x13);
        Formula x525=x14.eq(x14);
        Formula x526=x15.eq(x15);
        Formula x527=x16.eq(x16);
        Formula x528=x17.eq(x17);
        Formula x529=x18.eq(x18);
        Formula x530=x19.eq(x19);
        Formula x531=x20.eq(x20);
        Formula x532=x21.eq(x21);
        Formula x533=x22.eq(x22);
        Formula x534=x23.eq(x23);
        Formula x535=x24.eq(x24);
        Formula x25=Formula.compose(FormulaOperator.AND, x26, x33, x36, x43, x45, x65, x68, x73, x75, x78, x82, x83, x86, x90, x91, x94, x98, x99, x120, x125, x128, x132, x511, x512, x513, x514, x515, x516, x517, x518, x519, x520, x521, x522, x523, x524, x525, x526, x527, x528, x529, x530, x531, x532, x533, x534, x535);

        Solver solver = new Solver();
        solver.options().setSolver(SATFactory.MiniSat);
        solver.options().setBitwidth(4);
        //solver.options().setFlatten(false);
        solver.options().setIntEncoding(Options.IntEncoding.TWOSCOMPLEMENT);
        solver.options().setSymmetryBreaking(20);
        solver.options().setSkolemDepth(0);
        System.out.println("Solving...");
        System.out.flush();
        Solution sol = solver.solve(x25,bounds);
        System.out.println(sol.toString());
    }}