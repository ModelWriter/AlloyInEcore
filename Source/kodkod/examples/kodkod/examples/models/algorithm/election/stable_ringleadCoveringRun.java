package kodkod.examples.models.algorithm.election;

import java.util.Arrays;
import java.util.List;
import kodkod.ast.*;
import kodkod.ast.operator.*;
import kodkod.examples.ExampleMetadata;
import kodkod.instance.*;
import kodkod.engine.*;
import kodkod.engine.satlab.SATFactory;
import kodkod.engine.config.Options;

@ExampleMetadata(
        Name = "stable_ringlead",
        Note = "",
        IsCheck = true,
        PartialModel = true,
        BinaryRelations = 7,
        TernaryRelations =1,
        NaryRelations = 0,
        HierarchicalTypes = 0,
        NestedRelationalJoins = 2,
        TransitiveClosure = 0,
        NestedQuantifiers = 1,
        SetCardinality = 49,
        Additions = 0,
        Subtractions = 1,
        Comparison = 26,
        OrderedRelations = 3,
        Constraints =32
)



public final class stable_ringleadCoveringRun {


    public static void main(String[] args) throws Exception {

        Relation x0 = Relation.unary("Int/min");
        Relation x1 = Relation.unary("Int/zero");
        Relation x2 = Relation.unary("Int/max");
        Relation x3 = Relation.nary("Int/next", 2);
        Relation x4 = Relation.unary("seq/Int");
        Relation x5 = Relation.unary("String");
        Relation x6 = Relation.unary("this/Process");
        Relation x7 = Relation.unary("this/Val");
        Relation x8 = Relation.unary("this/State");
        Relation x9 = Relation.unary("po/Ord");
        Relation x10 = Relation.unary("vo/Ord");
        Relation x11 = Relation.unary("so/Ord");
        Relation x12 = Relation.nary("this/Process.rightNeighbor", 2);
        Relation x13 = Relation.nary("this/Val.nextVal", 2);
        Relation x14 = Relation.nary("this/State.val", 3);
        Relation x15 = Relation.nary("this/State.running", 2);
        Relation x16 = Relation.unary("po/Ord.First");
        Relation x17 = Relation.nary("po/Ord.Next", 2);
        Relation x18 = Relation.unary("vo/Ord.First");
        Relation x19 = Relation.nary("vo/Ord.Next", 2);
        Relation x20 = Relation.unary("so/Ord.First");
        Relation x21 = Relation.nary("so/Ord.Next", 2);
        Relation x22 = Relation.unary("");
        Relation x23 = Relation.unary("");
        Relation x24 = Relation.unary("");

        List<String> atomlist = Arrays.asList(
                "-1", "-2", "-3", "-4", "-5",
                "-6", "-7", "-8", "0", "1", "2",
                "3", "4", "5", "6", "7", "Process$0",
                "Process$1", "Process$2", "State$0", "State$1", "State$2", "State$3",
                "Val$0", "Val$1", "Val$2", "po/Ord$0", "so/Ord$0", "vo/Ord$0"
        );

        Universe universe = new Universe(atomlist);
        TupleFactory factory = universe.factory();
        Bounds bounds = new Bounds(universe);

        TupleSet x0_upper = factory.noneOf(1);
        x0_upper.add(factory.tuple("-8"));
        bounds.boundExactly(x0, x0_upper);

        TupleSet x1_upper = factory.noneOf(1);
        x1_upper.add(factory.tuple("0"));
        bounds.boundExactly(x1, x1_upper);

        TupleSet x2_upper = factory.noneOf(1);
        x2_upper.add(factory.tuple("7"));
        bounds.boundExactly(x2, x2_upper);

        TupleSet x3_upper = factory.noneOf(2);
        x3_upper.add(factory.tuple("-8").product(factory.tuple("-7")));
        x3_upper.add(factory.tuple("-7").product(factory.tuple("-6")));
        x3_upper.add(factory.tuple("-6").product(factory.tuple("-5")));
        x3_upper.add(factory.tuple("-5").product(factory.tuple("-4")));
        x3_upper.add(factory.tuple("-4").product(factory.tuple("-3")));
        x3_upper.add(factory.tuple("-3").product(factory.tuple("-2")));
        x3_upper.add(factory.tuple("-2").product(factory.tuple("-1")));
        x3_upper.add(factory.tuple("-1").product(factory.tuple("0")));
        x3_upper.add(factory.tuple("0").product(factory.tuple("1")));
        x3_upper.add(factory.tuple("1").product(factory.tuple("2")));
        x3_upper.add(factory.tuple("2").product(factory.tuple("3")));
        x3_upper.add(factory.tuple("3").product(factory.tuple("4")));
        x3_upper.add(factory.tuple("4").product(factory.tuple("5")));
        x3_upper.add(factory.tuple("5").product(factory.tuple("6")));
        x3_upper.add(factory.tuple("6").product(factory.tuple("7")));
        bounds.boundExactly(x3, x3_upper);

        TupleSet x4_upper = factory.noneOf(1);
        x4_upper.add(factory.tuple("0"));
        x4_upper.add(factory.tuple("1"));
        x4_upper.add(factory.tuple("2"));
        bounds.boundExactly(x4, x4_upper);

        TupleSet x5_upper = factory.noneOf(1);
        bounds.boundExactly(x5, x5_upper);

        TupleSet x6_upper = factory.noneOf(1);
        x6_upper.add(factory.tuple("Process$0"));
        x6_upper.add(factory.tuple("Process$1"));
        x6_upper.add(factory.tuple("Process$2"));
        bounds.boundExactly(x6, x6_upper);

        TupleSet x7_upper = factory.noneOf(1);
        x7_upper.add(factory.tuple("Val$0"));
        x7_upper.add(factory.tuple("Val$1"));
        x7_upper.add(factory.tuple("Val$2"));
        bounds.boundExactly(x7, x7_upper);

        TupleSet x8_upper = factory.noneOf(1);
        x8_upper.add(factory.tuple("State$0"));
        x8_upper.add(factory.tuple("State$1"));
        x8_upper.add(factory.tuple("State$2"));
        x8_upper.add(factory.tuple("State$3"));
        bounds.boundExactly(x8, x8_upper);

        TupleSet x9_upper = factory.noneOf(1);
        x9_upper.add(factory.tuple("po/Ord$0"));
        bounds.boundExactly(x9, x9_upper);

        TupleSet x10_upper = factory.noneOf(1);
        x10_upper.add(factory.tuple("vo/Ord$0"));
        bounds.boundExactly(x10, x10_upper);

        TupleSet x11_upper = factory.noneOf(1);
        x11_upper.add(factory.tuple("so/Ord$0"));
        bounds.boundExactly(x11, x11_upper);

        TupleSet x12_upper = factory.noneOf(2);
        x12_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$0")));
        x12_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$1")));
        x12_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$2")));
        x12_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$0")));
        x12_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$1")));
        x12_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$2")));
        x12_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$0")));
        x12_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$1")));
        x12_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$2")));
        bounds.bound(x12, x12_upper);

        TupleSet x13_upper = factory.noneOf(2);
        x13_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$0")));
        x13_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$1")));
        x13_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$2")));
        x13_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$0")));
        x13_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$1")));
        x13_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$2")));
        x13_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$0")));
        x13_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$1")));
        x13_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$2")));
        bounds.bound(x13, x13_upper);

        TupleSet x14_upper = factory.noneOf(3);
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Val$2")));
        bounds.bound(x14, x14_upper);

        TupleSet x15_upper = factory.noneOf(2);
        x15_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")));
        x15_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")));
        x15_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")));
        x15_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")));
        x15_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")));
        x15_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")));
        x15_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")));
        x15_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")));
        x15_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")));
        x15_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")));
        x15_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")));
        x15_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")));
        bounds.bound(x15, x15_upper);

        TupleSet x16_upper = factory.noneOf(1);
        x16_upper.add(factory.tuple("Process$0"));
        x16_upper.add(factory.tuple("Process$1"));
        x16_upper.add(factory.tuple("Process$2"));
        bounds.bound(x16, x16_upper);

        TupleSet x17_upper = factory.noneOf(2);
        x17_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$0")));
        x17_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$1")));
        x17_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$2")));
        x17_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$0")));
        x17_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$1")));
        x17_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$2")));
        x17_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$0")));
        x17_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$1")));
        x17_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$2")));
        bounds.bound(x17, x17_upper);

        TupleSet x18_upper = factory.noneOf(1);
        x18_upper.add(factory.tuple("Val$0"));
        x18_upper.add(factory.tuple("Val$1"));
        x18_upper.add(factory.tuple("Val$2"));
        bounds.bound(x18, x18_upper);

        TupleSet x19_upper = factory.noneOf(2);
        x19_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$0")));
        x19_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$1")));
        x19_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$2")));
        x19_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$0")));
        x19_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$1")));
        x19_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$2")));
        x19_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$0")));
        x19_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$1")));
        x19_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$2")));
        bounds.bound(x19, x19_upper);

        TupleSet x20_upper = factory.noneOf(1);
        x20_upper.add(factory.tuple("State$0"));
        x20_upper.add(factory.tuple("State$1"));
        x20_upper.add(factory.tuple("State$2"));
        x20_upper.add(factory.tuple("State$3"));
        bounds.bound(x20, x20_upper);

        TupleSet x21_upper = factory.noneOf(2);
        x21_upper.add(factory.tuple("State$0").product(factory.tuple("State$0")));
        x21_upper.add(factory.tuple("State$0").product(factory.tuple("State$1")));
        x21_upper.add(factory.tuple("State$0").product(factory.tuple("State$2")));
        x21_upper.add(factory.tuple("State$0").product(factory.tuple("State$3")));
        x21_upper.add(factory.tuple("State$1").product(factory.tuple("State$0")));
        x21_upper.add(factory.tuple("State$1").product(factory.tuple("State$1")));
        x21_upper.add(factory.tuple("State$1").product(factory.tuple("State$2")));
        x21_upper.add(factory.tuple("State$1").product(factory.tuple("State$3")));
        x21_upper.add(factory.tuple("State$2").product(factory.tuple("State$0")));
        x21_upper.add(factory.tuple("State$2").product(factory.tuple("State$1")));
        x21_upper.add(factory.tuple("State$2").product(factory.tuple("State$2")));
        x21_upper.add(factory.tuple("State$2").product(factory.tuple("State$3")));
        x21_upper.add(factory.tuple("State$3").product(factory.tuple("State$0")));
        x21_upper.add(factory.tuple("State$3").product(factory.tuple("State$1")));
        x21_upper.add(factory.tuple("State$3").product(factory.tuple("State$2")));
        x21_upper.add(factory.tuple("State$3").product(factory.tuple("State$3")));
        bounds.bound(x21, x21_upper);

        TupleSet x22_upper = factory.noneOf(1);
        x22_upper.add(factory.tuple("Process$0"));
        x22_upper.add(factory.tuple("Process$1"));
        x22_upper.add(factory.tuple("Process$2"));
        bounds.bound(x22, x22_upper);

        TupleSet x23_upper = factory.noneOf(1);
        x23_upper.add(factory.tuple("Val$0"));
        x23_upper.add(factory.tuple("Val$1"));
        x23_upper.add(factory.tuple("Val$2"));
        bounds.bound(x23, x23_upper);

        TupleSet x24_upper = factory.noneOf(1);
        x24_upper.add(factory.tuple("State$0"));
        x24_upper.add(factory.tuple("State$1"));
        x24_upper.add(factory.tuple("State$2"));
        x24_upper.add(factory.tuple("State$3"));
        bounds.bound(x24, x24_upper);

        bounds.boundExactly(-8,factory.range(factory.tuple("-8"),factory.tuple("-8")));
        bounds.boundExactly(-7,factory.range(factory.tuple("-7"),factory.tuple("-7")));
        bounds.boundExactly(-6,factory.range(factory.tuple("-6"),factory.tuple("-6")));
        bounds.boundExactly(-5,factory.range(factory.tuple("-5"),factory.tuple("-5")));
        bounds.boundExactly(-4,factory.range(factory.tuple("-4"),factory.tuple("-4")));
        bounds.boundExactly(-3,factory.range(factory.tuple("-3"),factory.tuple("-3")));
        bounds.boundExactly(-2,factory.range(factory.tuple("-2"),factory.tuple("-2")));
        bounds.boundExactly(-1,factory.range(factory.tuple("-1"),factory.tuple("-1")));
        bounds.boundExactly(0,factory.range(factory.tuple("0"),factory.tuple("0")));
        bounds.boundExactly(1,factory.range(factory.tuple("1"),factory.tuple("1")));
        bounds.boundExactly(2,factory.range(factory.tuple("2"),factory.tuple("2")));
        bounds.boundExactly(3,factory.range(factory.tuple("3"),factory.tuple("3")));
        bounds.boundExactly(4,factory.range(factory.tuple("4"),factory.tuple("4")));
        bounds.boundExactly(5,factory.range(factory.tuple("5"),factory.tuple("5")));
        bounds.boundExactly(6,factory.range(factory.tuple("6"),factory.tuple("6")));
        bounds.boundExactly(7,factory.range(factory.tuple("7"),factory.tuple("7")));

        Variable x28=Variable.unary("ConvergingRun_this");
        Decls x27=x28.oneOf(x6);
        Expression x31=x28.join(x12);
        Formula x30=x31.one();
        Formula x32=x31.in(x6);
        Formula x29=x30.and(x32);
        Formula x26=x29.forAll(x27);
        Expression x34=x12.join(Expression.UNIV);
        Formula x33=x34.in(x6);
        Variable x38=Variable.unary("ConvergingRun_this");
        Decls x37=x38.oneOf(x7);
        Expression x41=x38.join(x13);
        Formula x40=x41.one();
        Formula x42=x41.in(x7);
        Formula x39=x40.and(x42);
        Formula x36=x39.forAll(x37);
        Expression x44=x13.join(Expression.UNIV);
        Formula x43=x44.in(x7);
        Variable x47=Variable.unary("ConvergingRun_this");
        Decls x46=x47.oneOf(x8);
        Expression x51=x47.join(x14);
        Expression x52=x6.product(x7);
        Formula x50=x51.in(x52);
        Variable x55=Variable.unary("");
        Decls x54=x55.oneOf(x6);
        Expression x58=x55.join(x51);
        Formula x57=x58.one();
        Formula x59=x58.in(x7);
        Formula x56=x57.and(x59);
        Formula x53=x56.forAll(x54);
        Formula x49=x50.and(x53);
        Variable x62=Variable.unary("");
        Decls x61=x62.oneOf(x7);
        Expression x64=x51.join(x62);
        Formula x63=x64.in(x6);
        Formula x60=x63.forAll(x61);
        Formula x48=x49.and(x60);
        Formula x45=x48.forAll(x46);
        Expression x67=x14.join(Expression.UNIV);
        Expression x66=x67.join(Expression.UNIV);
        Formula x65=x66.in(x8);
        Variable x70=Variable.unary("ConvergingRun_this");
        Decls x69=x70.oneOf(x8);
        Expression x72=x70.join(x15);
        Formula x71=x72.in(x6);
        Formula x68=x71.forAll(x69);
        Expression x74=x15.join(Expression.UNIV);
        Formula x73=x74.in(x8);
        Expression x77=x9.product(x16);
        Expression x76=x9.join(x77);
        Formula x75=x76.in(x6);
        Expression x80=x9.product(x17);
        Expression x79=x9.join(x80);
        Expression x81=x6.product(x6);
        Formula x78=x79.in(x81);
        Formula x82=x17.totalOrder(x6,x16,x22);
        Expression x85=x10.product(x18);
        Expression x84=x10.join(x85);
        Formula x83=x84.in(x7);
        Expression x88=x10.product(x19);
        Expression x87=x10.join(x88);
        Expression x89=x7.product(x7);
        Formula x86=x87.in(x89);
        Formula x90=x19.totalOrder(x7,x18,x23);
        Expression x93=x11.product(x20);
        Expression x92=x11.join(x93);
        Formula x91=x92.in(x8);
        Expression x96=x11.product(x21);
        Expression x95=x11.join(x96);
        Expression x97=x8.product(x8);
        Formula x94=x95.in(x97);
        Formula x98=x21.totalOrder(x8,x20,x24);
        Variable x101=Variable.unary("ring_n");
        Decls x100=x101.oneOf(x6);
        Expression x104=x101.join(x12);
        Formula x103=x104.one();
        Expression x108=x12.closure();
        Expression x118=Expression.INTS.union(x5);
        Expression x117=x118.union(x6);
        Expression x116=x117.union(x7);
        Expression x115=x116.union(x8);
        Expression x114=x115.union(x9);
        Expression x113=x114.union(x10);
        Expression x112=x113.union(x11);
        Expression x111=x112.product(Expression.UNIV);
        Expression x109=Expression.IDEN.intersection(x111);
        Expression x107=x108.union(x109);
        Expression x106=x101.join(x107);
        Formula x105=x6.in(x106);
        Formula x102=x103.and(x105);
        Formula x99=x102.forAll(x100);
        Expression x124=x19.join(x7);
        Expression x123=x7.difference(x124);
        Expression x122=x123.product(x18);
        Expression x121=x19.union(x122);
        Formula x120=x121.eq(x13);
        IntExpression x126=x7.count();
        IntExpression x127=x6.count();
        Formula x125=x126.eq(x127);
        Expression x131=x21.join(x8);
        Expression x130=x8.difference(x131);
        Expression x129=x130.join(x15);
        Formula x128=x129.no();
        Variable x134=Variable.unary("OneAtATimeTrans_tp");
        Expression x135=x8.difference(x130);
        Decls x133=x134.oneOf(x135);
        Variable x138=Variable.unary("OneAtATimeTrans_p");
        Decls x137=x138.oneOf(x6);
        Expression x142=x134.join(x15);
        Formula x141=x142.eq(x138);
        Expression x146=x134.join(x21);
        Expression x145=x146.join(x14);
        Expression x144=x138.join(x145);
        Expression x156=x12.transpose();
        Expression x155=x138.join(x156);
        Expression x157=x134.join(x14);
        Expression x154=x155.join(x157);
        Expression x159=x134.join(x14);
        Expression x158=x138.join(x159);
        Formula x153=x154.eq(x158);
        IntExpression x161=x7.count();
        Expression x160=x161.toExpression();
        Formula x164=x158.eq(x154);
        IntExpression x165=IntConstant.constant(0);
        Expression x169=x19.closure();
        Expression x168=x154.join(x169);
        Formula x167=x158.in(x168);
        Expression x174=x19.closure();
        Expression x173=x154.join(x174);
        Expression x177=x19.transpose();
        Expression x176=x177.closure();
        Expression x175=x158.join(x176);
        Expression x172=x173.intersection(x175);
        Expression x171=x172.union(x158);
        IntExpression x170=x171.count();
        Expression x183=x19.closure();
        Expression x182=x158.join(x183);
        Expression x186=x19.transpose();
        Expression x185=x186.closure();
        Expression x184=x154.join(x185);
        Expression x181=x182.intersection(x184);
        Expression x180=x181.union(x158);
        Expression x179=x7.difference(x180);
        IntExpression x178=x179.count();
        IntExpression x166=x167.thenElse(x170,x178);
        IntExpression x163=x164.thenElse(x165,x166);
        Expression x162=x163.toExpression();
        Expression x152=x153.thenElse(x160,x162);
        IntExpression x151=x152.sum();
        Expression x191=x134.join(x14);
        Expression x190=x138.join(x191);
        Expression x193=x138.join(x12);
        Expression x194=x134.join(x14);
        Expression x192=x193.join(x194);
        Formula x189=x190.eq(x192);
        IntExpression x196=x7.count();
        Expression x195=x196.toExpression();
        Formula x199=x192.eq(x190);
        IntExpression x200=IntConstant.constant(0);
        Expression x204=x19.closure();
        Expression x203=x190.join(x204);
        Formula x202=x192.in(x203);
        Expression x209=x19.closure();
        Expression x208=x190.join(x209);
        Expression x212=x19.transpose();
        Expression x211=x212.closure();
        Expression x210=x192.join(x211);
        Expression x207=x208.intersection(x210);
        Expression x206=x207.union(x192);
        IntExpression x205=x206.count();
        Expression x218=x19.closure();
        Expression x217=x192.join(x218);
        Expression x221=x19.transpose();
        Expression x220=x221.closure();
        Expression x219=x190.join(x220);
        Expression x216=x217.intersection(x219);
        Expression x215=x216.union(x192);
        Expression x214=x7.difference(x215);
        IntExpression x213=x214.count();
        IntExpression x201=x202.thenElse(x205,x213);
        IntExpression x198=x199.thenElse(x200,x201);
        Expression x197=x198.toExpression();
        Expression x188=x189.thenElse(x195,x197);
        IntExpression x187=x188.sum();
        Formula x150=x151.eq(x187);
        IntExpression x223=x188.sum();
        IntExpression x224=x7.count();
        Formula x222=x223.eq(x224);
        Formula x149=x150.and(x222);
        IntExpression x226=x152.sum();
        IntExpression x227=x188.sum();
        Formula x225=x226.lt(x227);
        Formula x148=x149.or(x225);
        Expression x230=x134.join(x14);
        Expression x229=x138.join(x230);
        Expression x228=x229.join(x13);
        Expression x147=x148.thenElse(x228,x229);
        Formula x143=x144.eq(x147);
        Formula x140=x141.and(x143);
        Variable x233=Variable.unary("OneAtATimeTrans_other");
        Expression x234=x6.difference(x138);
        Decls x232=x233.oneOf(x234);
        Expression x237=x146.join(x14);
        Expression x236=x233.join(x237);
        Expression x239=x134.join(x14);
        Expression x238=x233.join(x239);
        Formula x235=x236.eq(x238);
        Formula x231=x235.forAll(x232);
        Formula x139=x140.and(x231);
        Formula x136=x139.forSome(x137);
        Formula x132=x136.forAll(x133);
        Variable x246=Variable.unary("LeadersAtState_p");
        Decls x245=x246.oneOf(x6);
        Expression x249=x20.join(x14);
        Expression x248=x246.join(x249);
        Formula x247=x248.eq(x18);
        Expression x244=x247.comprehension(x245);
        Formula x243=x244.one();
        Variable x252=Variable.unary("Legit_p");
        Decls x251=x252.oneOf(x6);
        Expression x260=x12.transpose();
        Expression x259=x252.join(x260);
        Expression x261=x20.join(x14);
        Expression x258=x259.join(x261);
        Expression x263=x20.join(x14);
        Expression x262=x252.join(x263);
        Formula x257=x258.eq(x262);
        IntExpression x265=x7.count();
        Expression x264=x265.toExpression();
        Formula x268=x262.eq(x258);
        IntExpression x269=IntConstant.constant(0);
        Expression x273=x19.closure();
        Expression x272=x258.join(x273);
        Formula x271=x262.in(x272);
        Expression x278=x19.closure();
        Expression x277=x258.join(x278);
        Expression x281=x19.transpose();
        Expression x280=x281.closure();
        Expression x279=x262.join(x280);
        Expression x276=x277.intersection(x279);
        Expression x275=x276.union(x262);
        IntExpression x274=x275.count();
        Expression x287=x19.closure();
        Expression x286=x262.join(x287);
        Expression x290=x19.transpose();
        Expression x289=x290.closure();
        Expression x288=x258.join(x289);
        Expression x285=x286.intersection(x288);
        Expression x284=x285.union(x262);
        Expression x283=x7.difference(x284);
        IntExpression x282=x283.count();
        IntExpression x270=x271.thenElse(x274,x282);
        IntExpression x267=x268.thenElse(x269,x270);
        Expression x266=x267.toExpression();
        Expression x256=x257.thenElse(x264,x266);
        IntExpression x255=x256.sum();
        IntExpression x291=x7.count();
        Formula x254=x255.lt(x291);
        Expression x297=x20.join(x14);
        Expression x296=x252.join(x297);
        Expression x299=x252.join(x12);
        Expression x300=x20.join(x14);
        Expression x298=x299.join(x300);
        Formula x295=x296.eq(x298);
        IntExpression x302=x7.count();
        Expression x301=x302.toExpression();
        Formula x305=x298.eq(x296);
        IntExpression x306=IntConstant.constant(0);
        Expression x310=x19.closure();
        Expression x309=x296.join(x310);
        Formula x308=x298.in(x309);
        Expression x315=x19.closure();
        Expression x314=x296.join(x315);
        Expression x318=x19.transpose();
        Expression x317=x318.closure();
        Expression x316=x298.join(x317);
        Expression x313=x314.intersection(x316);
        Expression x312=x313.union(x298);
        IntExpression x311=x312.count();
        Expression x324=x19.closure();
        Expression x323=x298.join(x324);
        Expression x327=x19.transpose();
        Expression x326=x327.closure();
        Expression x325=x296.join(x326);
        Expression x322=x323.intersection(x325);
        Expression x321=x322.union(x298);
        Expression x320=x7.difference(x321);
        IntExpression x319=x320.count();
        IntExpression x307=x308.thenElse(x311,x319);
        IntExpression x304=x305.thenElse(x306,x307);
        Expression x303=x304.toExpression();
        Expression x294=x295.thenElse(x301,x303);
        IntExpression x293=x294.sum();
        IntExpression x328=x7.count();
        Formula x292=x293.lt(x328);
        Formula x253=x254.and(x292);
        Formula x250=x253.forAll(x251);
        Formula x242=x243.and(x250);
        Variable x332=Variable.unary("Legit_p");
        Decls x331=x332.oneOf(x6);
        Variable x334=Variable.unary("Legit_p'");
        Decls x333=x334.oneOf(x6);
        Decls x330=x331.and(x333);
        Expression x342=x12.transpose();
        Expression x341=x332.join(x342);
        Expression x343=x20.join(x14);
        Expression x340=x341.join(x343);
        Expression x345=x20.join(x14);
        Expression x344=x332.join(x345);
        Formula x339=x340.eq(x344);
        IntExpression x347=x7.count();
        Expression x346=x347.toExpression();
        Formula x350=x344.eq(x340);
        IntExpression x351=IntConstant.constant(0);
        Expression x355=x19.closure();
        Expression x354=x340.join(x355);
        Formula x353=x344.in(x354);
        Expression x360=x19.closure();
        Expression x359=x340.join(x360);
        Expression x363=x19.transpose();
        Expression x362=x363.closure();
        Expression x361=x344.join(x362);
        Expression x358=x359.intersection(x361);
        Expression x357=x358.union(x344);
        IntExpression x356=x357.count();
        Expression x369=x19.closure();
        Expression x368=x344.join(x369);
        Expression x372=x19.transpose();
        Expression x371=x372.closure();
        Expression x370=x340.join(x371);
        Expression x367=x368.intersection(x370);
        Expression x366=x367.union(x344);
        Expression x365=x7.difference(x366);
        IntExpression x364=x365.count();
        IntExpression x352=x353.thenElse(x356,x364);
        IntExpression x349=x350.thenElse(x351,x352);
        Expression x348=x349.toExpression();
        Expression x338=x339.thenElse(x346,x348);
        IntExpression x337=x338.sum();
        Expression x378=x12.transpose();
        Expression x377=x334.join(x378);
        Expression x379=x20.join(x14);
        Expression x376=x377.join(x379);
        Expression x381=x20.join(x14);
        Expression x380=x334.join(x381);
        Formula x375=x376.eq(x380);
        IntExpression x383=x7.count();
        Expression x382=x383.toExpression();
        Formula x386=x380.eq(x376);
        IntExpression x387=IntConstant.constant(0);
        Expression x391=x19.closure();
        Expression x390=x376.join(x391);
        Formula x389=x380.in(x390);
        Expression x396=x19.closure();
        Expression x395=x376.join(x396);
        Expression x399=x19.transpose();
        Expression x398=x399.closure();
        Expression x397=x380.join(x398);
        Expression x394=x395.intersection(x397);
        Expression x393=x394.union(x380);
        IntExpression x392=x393.count();
        Expression x405=x19.closure();
        Expression x404=x380.join(x405);
        Expression x408=x19.transpose();
        Expression x407=x408.closure();
        Expression x406=x376.join(x407);
        Expression x403=x404.intersection(x406);
        Expression x402=x403.union(x380);
        Expression x401=x7.difference(x402);
        IntExpression x400=x401.count();
        IntExpression x388=x389.thenElse(x392,x400);
        IntExpression x385=x386.thenElse(x387,x388);
        Expression x384=x385.toExpression();
        Expression x374=x375.thenElse(x382,x384);
        IntExpression x373=x374.sum();
        Formula x336=x337.eq(x373);
        Expression x414=x20.join(x14);
        Expression x413=x332.join(x414);
        Expression x416=x332.join(x12);
        Expression x417=x20.join(x14);
        Expression x415=x416.join(x417);
        Formula x412=x413.eq(x415);
        IntExpression x419=x7.count();
        Expression x418=x419.toExpression();
        Formula x422=x415.eq(x413);
        IntExpression x423=IntConstant.constant(0);
        Expression x427=x19.closure();
        Expression x426=x413.join(x427);
        Formula x425=x415.in(x426);
        Expression x432=x19.closure();
        Expression x431=x413.join(x432);
        Expression x435=x19.transpose();
        Expression x434=x435.closure();
        Expression x433=x415.join(x434);
        Expression x430=x431.intersection(x433);
        Expression x429=x430.union(x415);
        IntExpression x428=x429.count();
        Expression x441=x19.closure();
        Expression x440=x415.join(x441);
        Expression x444=x19.transpose();
        Expression x443=x444.closure();
        Expression x442=x413.join(x443);
        Expression x439=x440.intersection(x442);
        Expression x438=x439.union(x415);
        Expression x437=x7.difference(x438);
        IntExpression x436=x437.count();
        IntExpression x424=x425.thenElse(x428,x436);
        IntExpression x421=x422.thenElse(x423,x424);
        Expression x420=x421.toExpression();
        Expression x411=x412.thenElse(x418,x420);
        IntExpression x410=x411.sum();
        Expression x449=x20.join(x14);
        Expression x448=x334.join(x449);
        Expression x451=x334.join(x12);
        Expression x452=x20.join(x14);
        Expression x450=x451.join(x452);
        Formula x447=x448.eq(x450);
        IntExpression x454=x7.count();
        Expression x453=x454.toExpression();
        Formula x457=x450.eq(x448);
        IntExpression x458=IntConstant.constant(0);
        Expression x462=x19.closure();
        Expression x461=x448.join(x462);
        Formula x460=x450.in(x461);
        Expression x467=x19.closure();
        Expression x466=x448.join(x467);
        Expression x470=x19.transpose();
        Expression x469=x470.closure();
        Expression x468=x450.join(x469);
        Expression x465=x466.intersection(x468);
        Expression x464=x465.union(x450);
        IntExpression x463=x464.count();
        Expression x476=x19.closure();
        Expression x475=x450.join(x476);
        Expression x479=x19.transpose();
        Expression x478=x479.closure();
        Expression x477=x448.join(x478);
        Expression x474=x475.intersection(x477);
        Expression x473=x474.union(x450);
        Expression x472=x7.difference(x473);
        IntExpression x471=x472.count();
        IntExpression x459=x460.thenElse(x463,x471);
        IntExpression x456=x457.thenElse(x458,x459);
        Expression x455=x456.toExpression();
        Expression x446=x447.thenElse(x453,x455);
        IntExpression x445=x446.sum();
        Formula x409=x410.eq(x445);
        Formula x335=x336.and(x409);
        Formula x329=x335.forAll(x330);
        Formula x241=x242.and(x329);
        Formula x240=x241.not();
        Variable x482=Variable.unary("ConvergingRun_t");
        Decls x481=x482.oneOf(x8);
        Variable x488=Variable.unary("LeadersAtState_p");
        Decls x487=x488.oneOf(x6);
        Expression x491=x482.join(x14);
        Expression x490=x488.join(x491);
        Formula x489=x490.eq(x18);
        Expression x486=x489.comprehension(x487);
        Formula x485=x486.one();
        Variable x494=Variable.unary("Legit_p");
        Decls x493=x494.oneOf(x6);
        Expression x502=x12.transpose();
        Expression x501=x494.join(x502);
        Expression x503=x482.join(x14);
        Expression x500=x501.join(x503);
        Expression x505=x482.join(x14);
        Expression x504=x494.join(x505);
        Formula x499=x500.eq(x504);
        IntExpression x507=x7.count();
        Expression x506=x507.toExpression();
        Formula x510=x504.eq(x500);
        IntExpression x511=IntConstant.constant(0);
        Expression x515=x19.closure();
        Expression x514=x500.join(x515);
        Formula x513=x504.in(x514);
        Expression x520=x19.closure();
        Expression x519=x500.join(x520);
        Expression x523=x19.transpose();
        Expression x522=x523.closure();
        Expression x521=x504.join(x522);
        Expression x518=x519.intersection(x521);
        Expression x517=x518.union(x504);
        IntExpression x516=x517.count();
        Expression x529=x19.closure();
        Expression x528=x504.join(x529);
        Expression x532=x19.transpose();
        Expression x531=x532.closure();
        Expression x530=x500.join(x531);
        Expression x527=x528.intersection(x530);
        Expression x526=x527.union(x504);
        Expression x525=x7.difference(x526);
        IntExpression x524=x525.count();
        IntExpression x512=x513.thenElse(x516,x524);
        IntExpression x509=x510.thenElse(x511,x512);
        Expression x508=x509.toExpression();
        Expression x498=x499.thenElse(x506,x508);
        IntExpression x497=x498.sum();
        IntExpression x533=x7.count();
        Formula x496=x497.lt(x533);
        Expression x539=x482.join(x14);
        Expression x538=x494.join(x539);
        Expression x541=x494.join(x12);
        Expression x542=x482.join(x14);
        Expression x540=x541.join(x542);
        Formula x537=x538.eq(x540);
        IntExpression x544=x7.count();
        Expression x543=x544.toExpression();
        Formula x547=x540.eq(x538);
        IntExpression x548=IntConstant.constant(0);
        Expression x552=x19.closure();
        Expression x551=x538.join(x552);
        Formula x550=x540.in(x551);
        Expression x557=x19.closure();
        Expression x556=x538.join(x557);
        Expression x560=x19.transpose();
        Expression x559=x560.closure();
        Expression x558=x540.join(x559);
        Expression x555=x556.intersection(x558);
        Expression x554=x555.union(x540);
        IntExpression x553=x554.count();
        Expression x566=x19.closure();
        Expression x565=x540.join(x566);
        Expression x569=x19.transpose();
        Expression x568=x569.closure();
        Expression x567=x538.join(x568);
        Expression x564=x565.intersection(x567);
        Expression x563=x564.union(x540);
        Expression x562=x7.difference(x563);
        IntExpression x561=x562.count();
        IntExpression x549=x550.thenElse(x553,x561);
        IntExpression x546=x547.thenElse(x548,x549);
        Expression x545=x546.toExpression();
        Expression x536=x537.thenElse(x543,x545);
        IntExpression x535=x536.sum();
        IntExpression x570=x7.count();
        Formula x534=x535.lt(x570);
        Formula x495=x496.and(x534);
        Formula x492=x495.forAll(x493);
        Formula x484=x485.and(x492);
        Variable x574=Variable.unary("Legit_p");
        Decls x573=x574.oneOf(x6);
        Variable x576=Variable.unary("Legit_p'");
        Decls x575=x576.oneOf(x6);
        Decls x572=x573.and(x575);
        Expression x584=x12.transpose();
        Expression x583=x574.join(x584);
        Expression x585=x482.join(x14);
        Expression x582=x583.join(x585);
        Expression x587=x482.join(x14);
        Expression x586=x574.join(x587);
        Formula x581=x582.eq(x586);
        IntExpression x589=x7.count();
        Expression x588=x589.toExpression();
        Formula x592=x586.eq(x582);
        IntExpression x593=IntConstant.constant(0);
        Expression x597=x19.closure();
        Expression x596=x582.join(x597);
        Formula x595=x586.in(x596);
        Expression x602=x19.closure();
        Expression x601=x582.join(x602);
        Expression x605=x19.transpose();
        Expression x604=x605.closure();
        Expression x603=x586.join(x604);
        Expression x600=x601.intersection(x603);
        Expression x599=x600.union(x586);
        IntExpression x598=x599.count();
        Expression x611=x19.closure();
        Expression x610=x586.join(x611);
        Expression x614=x19.transpose();
        Expression x613=x614.closure();
        Expression x612=x582.join(x613);
        Expression x609=x610.intersection(x612);
        Expression x608=x609.union(x586);
        Expression x607=x7.difference(x608);
        IntExpression x606=x607.count();
        IntExpression x594=x595.thenElse(x598,x606);
        IntExpression x591=x592.thenElse(x593,x594);
        Expression x590=x591.toExpression();
        Expression x580=x581.thenElse(x588,x590);
        IntExpression x579=x580.sum();
        Expression x620=x12.transpose();
        Expression x619=x576.join(x620);
        Expression x621=x482.join(x14);
        Expression x618=x619.join(x621);
        Expression x623=x482.join(x14);
        Expression x622=x576.join(x623);
        Formula x617=x618.eq(x622);
        IntExpression x625=x7.count();
        Expression x624=x625.toExpression();
        Formula x628=x622.eq(x618);
        IntExpression x629=IntConstant.constant(0);
        Expression x633=x19.closure();
        Expression x632=x618.join(x633);
        Formula x631=x622.in(x632);
        Expression x638=x19.closure();
        Expression x637=x618.join(x638);
        Expression x641=x19.transpose();
        Expression x640=x641.closure();
        Expression x639=x622.join(x640);
        Expression x636=x637.intersection(x639);
        Expression x635=x636.union(x622);
        IntExpression x634=x635.count();
        Expression x647=x19.closure();
        Expression x646=x622.join(x647);
        Expression x650=x19.transpose();
        Expression x649=x650.closure();
        Expression x648=x618.join(x649);
        Expression x645=x646.intersection(x648);
        Expression x644=x645.union(x622);
        Expression x643=x7.difference(x644);
        IntExpression x642=x643.count();
        IntExpression x630=x631.thenElse(x634,x642);
        IntExpression x627=x628.thenElse(x629,x630);
        Expression x626=x627.toExpression();
        Expression x616=x617.thenElse(x624,x626);
        IntExpression x615=x616.sum();
        Formula x578=x579.eq(x615);
        Expression x656=x482.join(x14);
        Expression x655=x574.join(x656);
        Expression x658=x574.join(x12);
        Expression x659=x482.join(x14);
        Expression x657=x658.join(x659);
        Formula x654=x655.eq(x657);
        IntExpression x661=x7.count();
        Expression x660=x661.toExpression();
        Formula x664=x657.eq(x655);
        IntExpression x665=IntConstant.constant(0);
        Expression x669=x19.closure();
        Expression x668=x655.join(x669);
        Formula x667=x657.in(x668);
        Expression x674=x19.closure();
        Expression x673=x655.join(x674);
        Expression x677=x19.transpose();
        Expression x676=x677.closure();
        Expression x675=x657.join(x676);
        Expression x672=x673.intersection(x675);
        Expression x671=x672.union(x657);
        IntExpression x670=x671.count();
        Expression x683=x19.closure();
        Expression x682=x657.join(x683);
        Expression x686=x19.transpose();
        Expression x685=x686.closure();
        Expression x684=x655.join(x685);
        Expression x681=x682.intersection(x684);
        Expression x680=x681.union(x657);
        Expression x679=x7.difference(x680);
        IntExpression x678=x679.count();
        IntExpression x666=x667.thenElse(x670,x678);
        IntExpression x663=x664.thenElse(x665,x666);
        Expression x662=x663.toExpression();
        Expression x653=x654.thenElse(x660,x662);
        IntExpression x652=x653.sum();
        Expression x691=x482.join(x14);
        Expression x690=x576.join(x691);
        Expression x693=x576.join(x12);
        Expression x694=x482.join(x14);
        Expression x692=x693.join(x694);
        Formula x689=x690.eq(x692);
        IntExpression x696=x7.count();
        Expression x695=x696.toExpression();
        Formula x699=x692.eq(x690);
        IntExpression x700=IntConstant.constant(0);
        Expression x704=x19.closure();
        Expression x703=x690.join(x704);
        Formula x702=x692.in(x703);
        Expression x709=x19.closure();
        Expression x708=x690.join(x709);
        Expression x712=x19.transpose();
        Expression x711=x712.closure();
        Expression x710=x692.join(x711);
        Expression x707=x708.intersection(x710);
        Expression x706=x707.union(x692);
        IntExpression x705=x706.count();
        Expression x718=x19.closure();
        Expression x717=x692.join(x718);
        Expression x721=x19.transpose();
        Expression x720=x721.closure();
        Expression x719=x690.join(x720);
        Expression x716=x717.intersection(x719);
        Expression x715=x716.union(x692);
        Expression x714=x7.difference(x715);
        IntExpression x713=x714.count();
        IntExpression x701=x702.thenElse(x705,x713);
        IntExpression x698=x699.thenElse(x700,x701);
        Expression x697=x698.toExpression();
        Expression x688=x689.thenElse(x695,x697);
        IntExpression x687=x688.sum();
        Formula x651=x652.eq(x687);
        Formula x577=x578.and(x651);
        Formula x571=x577.forAll(x572);
        Formula x483=x484.and(x571);
        Formula x480=x483.forSome(x481);
        Formula x722=x0.eq(x0);
        Formula x723=x1.eq(x1);
        Formula x724=x2.eq(x2);
        Formula x725=x3.eq(x3);
        Formula x726=x4.eq(x4);
        Formula x727=x5.eq(x5);
        Formula x728=x6.eq(x6);
        Formula x729=x7.eq(x7);
        Formula x730=x8.eq(x8);
        Formula x731=x9.eq(x9);
        Formula x732=x10.eq(x10);
        Formula x733=x11.eq(x11);
        Formula x734=x12.eq(x12);
        Formula x735=x13.eq(x13);
        Formula x736=x14.eq(x14);
        Formula x737=x15.eq(x15);
        Formula x738=x16.eq(x16);
        Formula x739=x17.eq(x17);
        Formula x740=x18.eq(x18);
        Formula x741=x19.eq(x19);
        Formula x742=x20.eq(x20);
        Formula x743=x21.eq(x21);
        Formula x744=x22.eq(x22);
        Formula x745=x23.eq(x23);
        Formula x746=x24.eq(x24);
        Formula x25=Formula.compose(FormulaOperator.AND, x26, x33, x36, x43, x45, x65, x68, x73, x75, x78, x82, x83, x86, x90, x91, x94, x98, x99, x120, x125, x128, x132, x240, x480, x722, x723, x724, x725, x726, x727, x728, x729, x730, x731, x732, x733, x734, x735, x736, x737, x738, x739, x740, x741, x742, x743, x744, x745, x746);

        Solver solver = new Solver();
        solver.options().setSolver(SATFactory.MiniSat);
        solver.options().setBitwidth(4);
        //solver.options().setFlatten(false);
        solver.options().setIntEncoding(Options.IntEncoding.TWOSCOMPLEMENT);
        solver.options().setSymmetryBreaking(20);
        solver.options().setSkolemDepth(0);
        System.out.println("Solving...");
        System.out.flush();
        Solution sol = solver.solve(x25,bounds);
        System.out.println(sol.toString());
    }}