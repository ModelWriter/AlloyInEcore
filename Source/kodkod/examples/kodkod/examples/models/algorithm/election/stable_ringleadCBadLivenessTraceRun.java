package kodkod.examples.models.algorithm.election;

import java.util.Arrays;
import java.util.List;
import kodkod.ast.*;
import kodkod.ast.operator.*;
import kodkod.examples.ExampleMetadata;
import kodkod.instance.*;
import kodkod.engine.*;
import kodkod.engine.satlab.SATFactory;
import kodkod.engine.config.Options;
@ExampleMetadata(
        Name = "stable_ringlead",
        Note = "",
        IsCheck = true,
        PartialModel = true,
        BinaryRelations = 7,
        TernaryRelations =1,
        NaryRelations = 0,
        HierarchicalTypes = 0,
        NestedRelationalJoins = 2,
        TransitiveClosure = 0,
        NestedQuantifiers = 1,
        SetCardinality = 49,
        Additions = 0,
        Subtractions = 1,
        Comparison = 26,
        OrderedRelations = 3,
        Constraints =32
)

public final class stable_ringleadCBadLivenessTraceRun {

    public static void main(String[] args) throws Exception {

        Relation x0 = Relation.unary("Int/min");
        Relation x1 = Relation.unary("Int/zero");
        Relation x2 = Relation.unary("Int/max");
        Relation x3 = Relation.nary("Int/next", 2);
        Relation x4 = Relation.unary("seq/Int");
        Relation x5 = Relation.unary("String");
        Relation x6 = Relation.unary("this/Process");
        Relation x7 = Relation.unary("this/Val");
        Relation x8 = Relation.unary("this/State");
        Relation x9 = Relation.unary("po/Ord");
        Relation x10 = Relation.unary("vo/Ord");
        Relation x11 = Relation.unary("so/Ord");
        Relation x12 = Relation.nary("this/Process.rightNeighbor", 2);
        Relation x13 = Relation.nary("this/Val.nextVal", 2);
        Relation x14 = Relation.nary("this/State.val", 3);
        Relation x15 = Relation.nary("this/State.running", 2);
        Relation x16 = Relation.unary("po/Ord.First");
        Relation x17 = Relation.nary("po/Ord.Next", 2);
        Relation x18 = Relation.unary("vo/Ord.First");
        Relation x19 = Relation.nary("vo/Ord.Next", 2);
        Relation x20 = Relation.unary("so/Ord.First");
        Relation x21 = Relation.nary("so/Ord.Next", 2);
        Relation x22 = Relation.unary("");
        Relation x23 = Relation.unary("");
        Relation x24 = Relation.unary("");

        List<String> atomlist = Arrays.asList(
                "-1", "-2", "-3", "-4", "-5",
                "-6", "-7", "-8", "0", "1", "2",
                "3", "4", "5", "6", "7", "Process$0",
                "Process$1", "Process$2", "Process$3", "State$0", "State$1", "State$2",
                "State$3", "State$4", "Val$0", "Val$1", "Val$2", "Val$3",
                "po/Ord$0", "so/Ord$0", "vo/Ord$0"
        );

        Universe universe = new Universe(atomlist);
        TupleFactory factory = universe.factory();
        Bounds bounds = new Bounds(universe);

        TupleSet x0_upper = factory.noneOf(1);
        x0_upper.add(factory.tuple("-8"));
        bounds.boundExactly(x0, x0_upper);

        TupleSet x1_upper = factory.noneOf(1);
        x1_upper.add(factory.tuple("0"));
        bounds.boundExactly(x1, x1_upper);

        TupleSet x2_upper = factory.noneOf(1);
        x2_upper.add(factory.tuple("7"));
        bounds.boundExactly(x2, x2_upper);

        TupleSet x3_upper = factory.noneOf(2);
        x3_upper.add(factory.tuple("-8").product(factory.tuple("-7")));
        x3_upper.add(factory.tuple("-7").product(factory.tuple("-6")));
        x3_upper.add(factory.tuple("-6").product(factory.tuple("-5")));
        x3_upper.add(factory.tuple("-5").product(factory.tuple("-4")));
        x3_upper.add(factory.tuple("-4").product(factory.tuple("-3")));
        x3_upper.add(factory.tuple("-3").product(factory.tuple("-2")));
        x3_upper.add(factory.tuple("-2").product(factory.tuple("-1")));
        x3_upper.add(factory.tuple("-1").product(factory.tuple("0")));
        x3_upper.add(factory.tuple("0").product(factory.tuple("1")));
        x3_upper.add(factory.tuple("1").product(factory.tuple("2")));
        x3_upper.add(factory.tuple("2").product(factory.tuple("3")));
        x3_upper.add(factory.tuple("3").product(factory.tuple("4")));
        x3_upper.add(factory.tuple("4").product(factory.tuple("5")));
        x3_upper.add(factory.tuple("5").product(factory.tuple("6")));
        x3_upper.add(factory.tuple("6").product(factory.tuple("7")));
        bounds.boundExactly(x3, x3_upper);

        TupleSet x4_upper = factory.noneOf(1);
        x4_upper.add(factory.tuple("0"));
        x4_upper.add(factory.tuple("1"));
        x4_upper.add(factory.tuple("2"));
        x4_upper.add(factory.tuple("3"));
        bounds.boundExactly(x4, x4_upper);

        TupleSet x5_upper = factory.noneOf(1);
        bounds.boundExactly(x5, x5_upper);

        TupleSet x6_upper = factory.noneOf(1);
        x6_upper.add(factory.tuple("Process$0"));
        x6_upper.add(factory.tuple("Process$1"));
        x6_upper.add(factory.tuple("Process$2"));
        x6_upper.add(factory.tuple("Process$3"));
        bounds.boundExactly(x6, x6_upper);

        TupleSet x7_upper = factory.noneOf(1);
        x7_upper.add(factory.tuple("Val$0"));
        x7_upper.add(factory.tuple("Val$1"));
        x7_upper.add(factory.tuple("Val$2"));
        x7_upper.add(factory.tuple("Val$3"));
        bounds.boundExactly(x7, x7_upper);

        TupleSet x8_upper = factory.noneOf(1);
        x8_upper.add(factory.tuple("State$0"));
        x8_upper.add(factory.tuple("State$1"));
        x8_upper.add(factory.tuple("State$2"));
        x8_upper.add(factory.tuple("State$3"));
        x8_upper.add(factory.tuple("State$4"));
        bounds.boundExactly(x8, x8_upper);

        TupleSet x9_upper = factory.noneOf(1);
        x9_upper.add(factory.tuple("po/Ord$0"));
        bounds.boundExactly(x9, x9_upper);

        TupleSet x10_upper = factory.noneOf(1);
        x10_upper.add(factory.tuple("vo/Ord$0"));
        bounds.boundExactly(x10, x10_upper);

        TupleSet x11_upper = factory.noneOf(1);
        x11_upper.add(factory.tuple("so/Ord$0"));
        bounds.boundExactly(x11, x11_upper);

        TupleSet x12_upper = factory.noneOf(2);
        x12_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$0")));
        x12_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$1")));
        x12_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$2")));
        x12_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$3")));
        x12_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$0")));
        x12_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$1")));
        x12_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$2")));
        x12_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$3")));
        x12_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$0")));
        x12_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$1")));
        x12_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$2")));
        x12_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$3")));
        x12_upper.add(factory.tuple("Process$3").product(factory.tuple("Process$0")));
        x12_upper.add(factory.tuple("Process$3").product(factory.tuple("Process$1")));
        x12_upper.add(factory.tuple("Process$3").product(factory.tuple("Process$2")));
        x12_upper.add(factory.tuple("Process$3").product(factory.tuple("Process$3")));
        bounds.bound(x12, x12_upper);

        TupleSet x13_upper = factory.noneOf(2);
        x13_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$0")));
        x13_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$1")));
        x13_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$2")));
        x13_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$3")));
        x13_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$0")));
        x13_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$1")));
        x13_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$2")));
        x13_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$3")));
        x13_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$0")));
        x13_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$1")));
        x13_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$2")));
        x13_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$3")));
        x13_upper.add(factory.tuple("Val$3").product(factory.tuple("Val$0")));
        x13_upper.add(factory.tuple("Val$3").product(factory.tuple("Val$1")));
        x13_upper.add(factory.tuple("Val$3").product(factory.tuple("Val$2")));
        x13_upper.add(factory.tuple("Val$3").product(factory.tuple("Val$3")));
        bounds.bound(x13, x13_upper);

        TupleSet x14_upper = factory.noneOf(3);
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$3")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$3")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$3")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$0").product(factory.tuple("Process$3")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$3")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$3")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$3")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$1").product(factory.tuple("Process$3")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$3")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$3")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$3")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$2").product(factory.tuple("Process$3")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$3")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$3")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$3")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$3").product(factory.tuple("Process$3")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("Process$0")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("Process$0")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("Process$0")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("Process$0")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("Process$1")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("Process$1")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("Process$1")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("Process$1")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("Process$2")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("Process$2")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("Process$2")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("Process$2")).product(factory.tuple("Val$3")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("Process$3")).product(factory.tuple("Val$0")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("Process$3")).product(factory.tuple("Val$1")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("Process$3")).product(factory.tuple("Val$2")));
        x14_upper.add(factory.tuple("State$4").product(factory.tuple("Process$3")).product(factory.tuple("Val$3")));
        bounds.bound(x14, x14_upper);

        TupleSet x15_upper = factory.noneOf(2);
        x15_upper.add(factory.tuple("State$0").product(factory.tuple("Process$0")));
        x15_upper.add(factory.tuple("State$0").product(factory.tuple("Process$1")));
        x15_upper.add(factory.tuple("State$0").product(factory.tuple("Process$2")));
        x15_upper.add(factory.tuple("State$0").product(factory.tuple("Process$3")));
        x15_upper.add(factory.tuple("State$1").product(factory.tuple("Process$0")));
        x15_upper.add(factory.tuple("State$1").product(factory.tuple("Process$1")));
        x15_upper.add(factory.tuple("State$1").product(factory.tuple("Process$2")));
        x15_upper.add(factory.tuple("State$1").product(factory.tuple("Process$3")));
        x15_upper.add(factory.tuple("State$2").product(factory.tuple("Process$0")));
        x15_upper.add(factory.tuple("State$2").product(factory.tuple("Process$1")));
        x15_upper.add(factory.tuple("State$2").product(factory.tuple("Process$2")));
        x15_upper.add(factory.tuple("State$2").product(factory.tuple("Process$3")));
        x15_upper.add(factory.tuple("State$3").product(factory.tuple("Process$0")));
        x15_upper.add(factory.tuple("State$3").product(factory.tuple("Process$1")));
        x15_upper.add(factory.tuple("State$3").product(factory.tuple("Process$2")));
        x15_upper.add(factory.tuple("State$3").product(factory.tuple("Process$3")));
        x15_upper.add(factory.tuple("State$4").product(factory.tuple("Process$0")));
        x15_upper.add(factory.tuple("State$4").product(factory.tuple("Process$1")));
        x15_upper.add(factory.tuple("State$4").product(factory.tuple("Process$2")));
        x15_upper.add(factory.tuple("State$4").product(factory.tuple("Process$3")));
        bounds.bound(x15, x15_upper);

        TupleSet x16_upper = factory.noneOf(1);
        x16_upper.add(factory.tuple("Process$0"));
        x16_upper.add(factory.tuple("Process$1"));
        x16_upper.add(factory.tuple("Process$2"));
        x16_upper.add(factory.tuple("Process$3"));
        bounds.bound(x16, x16_upper);

        TupleSet x17_upper = factory.noneOf(2);
        x17_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$0")));
        x17_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$1")));
        x17_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$2")));
        x17_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$3")));
        x17_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$0")));
        x17_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$1")));
        x17_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$2")));
        x17_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$3")));
        x17_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$0")));
        x17_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$1")));
        x17_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$2")));
        x17_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$3")));
        x17_upper.add(factory.tuple("Process$3").product(factory.tuple("Process$0")));
        x17_upper.add(factory.tuple("Process$3").product(factory.tuple("Process$1")));
        x17_upper.add(factory.tuple("Process$3").product(factory.tuple("Process$2")));
        x17_upper.add(factory.tuple("Process$3").product(factory.tuple("Process$3")));
        bounds.bound(x17, x17_upper);

        TupleSet x18_upper = factory.noneOf(1);
        x18_upper.add(factory.tuple("Val$0"));
        x18_upper.add(factory.tuple("Val$1"));
        x18_upper.add(factory.tuple("Val$2"));
        x18_upper.add(factory.tuple("Val$3"));
        bounds.bound(x18, x18_upper);

        TupleSet x19_upper = factory.noneOf(2);
        x19_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$0")));
        x19_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$1")));
        x19_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$2")));
        x19_upper.add(factory.tuple("Val$0").product(factory.tuple("Val$3")));
        x19_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$0")));
        x19_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$1")));
        x19_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$2")));
        x19_upper.add(factory.tuple("Val$1").product(factory.tuple("Val$3")));
        x19_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$0")));
        x19_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$1")));
        x19_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$2")));
        x19_upper.add(factory.tuple("Val$2").product(factory.tuple("Val$3")));
        x19_upper.add(factory.tuple("Val$3").product(factory.tuple("Val$0")));
        x19_upper.add(factory.tuple("Val$3").product(factory.tuple("Val$1")));
        x19_upper.add(factory.tuple("Val$3").product(factory.tuple("Val$2")));
        x19_upper.add(factory.tuple("Val$3").product(factory.tuple("Val$3")));
        bounds.bound(x19, x19_upper);

        TupleSet x20_upper = factory.noneOf(1);
        x20_upper.add(factory.tuple("State$0"));
        x20_upper.add(factory.tuple("State$1"));
        x20_upper.add(factory.tuple("State$2"));
        x20_upper.add(factory.tuple("State$3"));
        x20_upper.add(factory.tuple("State$4"));
        bounds.bound(x20, x20_upper);

        TupleSet x21_upper = factory.noneOf(2);
        x21_upper.add(factory.tuple("State$0").product(factory.tuple("State$0")));
        x21_upper.add(factory.tuple("State$0").product(factory.tuple("State$1")));
        x21_upper.add(factory.tuple("State$0").product(factory.tuple("State$2")));
        x21_upper.add(factory.tuple("State$0").product(factory.tuple("State$3")));
        x21_upper.add(factory.tuple("State$0").product(factory.tuple("State$4")));
        x21_upper.add(factory.tuple("State$1").product(factory.tuple("State$0")));
        x21_upper.add(factory.tuple("State$1").product(factory.tuple("State$1")));
        x21_upper.add(factory.tuple("State$1").product(factory.tuple("State$2")));
        x21_upper.add(factory.tuple("State$1").product(factory.tuple("State$3")));
        x21_upper.add(factory.tuple("State$1").product(factory.tuple("State$4")));
        x21_upper.add(factory.tuple("State$2").product(factory.tuple("State$0")));
        x21_upper.add(factory.tuple("State$2").product(factory.tuple("State$1")));
        x21_upper.add(factory.tuple("State$2").product(factory.tuple("State$2")));
        x21_upper.add(factory.tuple("State$2").product(factory.tuple("State$3")));
        x21_upper.add(factory.tuple("State$2").product(factory.tuple("State$4")));
        x21_upper.add(factory.tuple("State$3").product(factory.tuple("State$0")));
        x21_upper.add(factory.tuple("State$3").product(factory.tuple("State$1")));
        x21_upper.add(factory.tuple("State$3").product(factory.tuple("State$2")));
        x21_upper.add(factory.tuple("State$3").product(factory.tuple("State$3")));
        x21_upper.add(factory.tuple("State$3").product(factory.tuple("State$4")));
        x21_upper.add(factory.tuple("State$4").product(factory.tuple("State$0")));
        x21_upper.add(factory.tuple("State$4").product(factory.tuple("State$1")));
        x21_upper.add(factory.tuple("State$4").product(factory.tuple("State$2")));
        x21_upper.add(factory.tuple("State$4").product(factory.tuple("State$3")));
        x21_upper.add(factory.tuple("State$4").product(factory.tuple("State$4")));
        bounds.bound(x21, x21_upper);

        TupleSet x22_upper = factory.noneOf(1);
        x22_upper.add(factory.tuple("Process$0"));
        x22_upper.add(factory.tuple("Process$1"));
        x22_upper.add(factory.tuple("Process$2"));
        x22_upper.add(factory.tuple("Process$3"));
        bounds.bound(x22, x22_upper);

        TupleSet x23_upper = factory.noneOf(1);
        x23_upper.add(factory.tuple("Val$0"));
        x23_upper.add(factory.tuple("Val$1"));
        x23_upper.add(factory.tuple("Val$2"));
        x23_upper.add(factory.tuple("Val$3"));
        bounds.bound(x23, x23_upper);

        TupleSet x24_upper = factory.noneOf(1);
        x24_upper.add(factory.tuple("State$0"));
        x24_upper.add(factory.tuple("State$1"));
        x24_upper.add(factory.tuple("State$2"));
        x24_upper.add(factory.tuple("State$3"));
        x24_upper.add(factory.tuple("State$4"));
        bounds.bound(x24, x24_upper);

        bounds.boundExactly(-8,factory.range(factory.tuple("-8"),factory.tuple("-8")));
        bounds.boundExactly(-7,factory.range(factory.tuple("-7"),factory.tuple("-7")));
        bounds.boundExactly(-6,factory.range(factory.tuple("-6"),factory.tuple("-6")));
        bounds.boundExactly(-5,factory.range(factory.tuple("-5"),factory.tuple("-5")));
        bounds.boundExactly(-4,factory.range(factory.tuple("-4"),factory.tuple("-4")));
        bounds.boundExactly(-3,factory.range(factory.tuple("-3"),factory.tuple("-3")));
        bounds.boundExactly(-2,factory.range(factory.tuple("-2"),factory.tuple("-2")));
        bounds.boundExactly(-1,factory.range(factory.tuple("-1"),factory.tuple("-1")));
        bounds.boundExactly(0,factory.range(factory.tuple("0"),factory.tuple("0")));
        bounds.boundExactly(1,factory.range(factory.tuple("1"),factory.tuple("1")));
        bounds.boundExactly(2,factory.range(factory.tuple("2"),factory.tuple("2")));
        bounds.boundExactly(3,factory.range(factory.tuple("3"),factory.tuple("3")));
        bounds.boundExactly(4,factory.range(factory.tuple("4"),factory.tuple("4")));
        bounds.boundExactly(5,factory.range(factory.tuple("5"),factory.tuple("5")));
        bounds.boundExactly(6,factory.range(factory.tuple("6"),factory.tuple("6")));
        bounds.boundExactly(7,factory.range(factory.tuple("7"),factory.tuple("7")));

        Variable x28=Variable.unary("CBadLivenessTrace_this");
        Decls x27=x28.oneOf(x6);
        Expression x31=x28.join(x12);
        Formula x30=x31.one();
        Formula x32=x31.in(x6);
        Formula x29=x30.and(x32);
        Formula x26=x29.forAll(x27);
        Expression x34=x12.join(Expression.UNIV);
        Formula x33=x34.in(x6);
        Variable x38=Variable.unary("CBadLivenessTrace_this");
        Decls x37=x38.oneOf(x7);
        Expression x41=x38.join(x13);
        Formula x40=x41.one();
        Formula x42=x41.in(x7);
        Formula x39=x40.and(x42);
        Formula x36=x39.forAll(x37);
        Expression x44=x13.join(Expression.UNIV);
        Formula x43=x44.in(x7);
        Variable x47=Variable.unary("CBadLivenessTrace_this");
        Decls x46=x47.oneOf(x8);
        Expression x51=x47.join(x14);
        Expression x52=x6.product(x7);
        Formula x50=x51.in(x52);
        Variable x55=Variable.unary("");
        Decls x54=x55.oneOf(x6);
        Expression x58=x55.join(x51);
        Formula x57=x58.one();
        Formula x59=x58.in(x7);
        Formula x56=x57.and(x59);
        Formula x53=x56.forAll(x54);
        Formula x49=x50.and(x53);
        Variable x62=Variable.unary("");
        Decls x61=x62.oneOf(x7);
        Expression x64=x51.join(x62);
        Formula x63=x64.in(x6);
        Formula x60=x63.forAll(x61);
        Formula x48=x49.and(x60);
        Formula x45=x48.forAll(x46);
        Expression x67=x14.join(Expression.UNIV);
        Expression x66=x67.join(Expression.UNIV);
        Formula x65=x66.in(x8);
        Variable x70=Variable.unary("CBadLivenessTrace_this");
        Decls x69=x70.oneOf(x8);
        Expression x72=x70.join(x15);
        Formula x71=x72.in(x6);
        Formula x68=x71.forAll(x69);
        Expression x74=x15.join(Expression.UNIV);
        Formula x73=x74.in(x8);
        Expression x77=x9.product(x16);
        Expression x76=x9.join(x77);
        Formula x75=x76.in(x6);
        Expression x80=x9.product(x17);
        Expression x79=x9.join(x80);
        Expression x81=x6.product(x6);
        Formula x78=x79.in(x81);
        Formula x82=x17.totalOrder(x6,x16,x22);
        Expression x85=x10.product(x18);
        Expression x84=x10.join(x85);
        Formula x83=x84.in(x7);
        Expression x88=x10.product(x19);
        Expression x87=x10.join(x88);
        Expression x89=x7.product(x7);
        Formula x86=x87.in(x89);
        Formula x90=x19.totalOrder(x7,x18,x23);
        Expression x93=x11.product(x20);
        Expression x92=x11.join(x93);
        Formula x91=x92.in(x8);
        Expression x96=x11.product(x21);
        Expression x95=x11.join(x96);
        Expression x97=x8.product(x8);
        Formula x94=x95.in(x97);
        Formula x98=x21.totalOrder(x8,x20,x24);
        Variable x101=Variable.unary("ring_n");
        Decls x100=x101.oneOf(x6);
        Expression x104=x101.join(x12);
        Formula x103=x104.one();
        Expression x108=x12.closure();
        Expression x118=Expression.INTS.union(x5);
        Expression x117=x118.union(x6);
        Expression x116=x117.union(x7);
        Expression x115=x116.union(x8);
        Expression x114=x115.union(x9);
        Expression x113=x114.union(x10);
        Expression x112=x113.union(x11);
        Expression x111=x112.product(Expression.UNIV);
        Expression x109=Expression.IDEN.intersection(x111);
        Expression x107=x108.union(x109);
        Expression x106=x101.join(x107);
        Formula x105=x6.in(x106);
        Formula x102=x103.and(x105);
        Formula x99=x102.forAll(x100);
        Expression x124=x19.join(x7);
        Expression x123=x7.difference(x124);
        Expression x122=x123.product(x18);
        Expression x121=x19.union(x122);
        Formula x120=x121.eq(x13);
        IntExpression x126=x7.count();
        IntExpression x127=x6.count();
        Formula x125=x126.eq(x127);
        Expression x131=x21.join(x8);
        Expression x130=x8.difference(x131);
        Expression x129=x130.join(x15);
        Formula x128=x129.no();
        Variable x134=Variable.unary("OneAtATimeTrans_tp");
        Expression x135=x8.difference(x130);
        Decls x133=x134.oneOf(x135);
        Variable x138=Variable.unary("OneAtATimeTrans_p");
        Decls x137=x138.oneOf(x6);
        Expression x142=x134.join(x15);
        Formula x141=x142.eq(x138);
        Expression x146=x134.join(x21);
        Expression x145=x146.join(x14);
        Expression x144=x138.join(x145);
        Expression x156=x12.transpose();
        Expression x155=x138.join(x156);
        Expression x157=x134.join(x14);
        Expression x154=x155.join(x157);
        Expression x159=x134.join(x14);
        Expression x158=x138.join(x159);
        Formula x153=x154.eq(x158);
        IntExpression x161=x7.count();
        Expression x160=x161.toExpression();
        Formula x164=x158.eq(x154);
        IntExpression x165=IntConstant.constant(0);
        Expression x169=x19.closure();
        Expression x168=x154.join(x169);
        Formula x167=x158.in(x168);
        Expression x174=x19.closure();
        Expression x173=x154.join(x174);
        Expression x177=x19.transpose();
        Expression x176=x177.closure();
        Expression x175=x158.join(x176);
        Expression x172=x173.intersection(x175);
        Expression x171=x172.union(x158);
        IntExpression x170=x171.count();
        Expression x183=x19.closure();
        Expression x182=x158.join(x183);
        Expression x186=x19.transpose();
        Expression x185=x186.closure();
        Expression x184=x154.join(x185);
        Expression x181=x182.intersection(x184);
        Expression x180=x181.union(x158);
        Expression x179=x7.difference(x180);
        IntExpression x178=x179.count();
        IntExpression x166=x167.thenElse(x170,x178);
        IntExpression x163=x164.thenElse(x165,x166);
        Expression x162=x163.toExpression();
        Expression x152=x153.thenElse(x160,x162);
        IntExpression x151=x152.sum();
        Expression x191=x134.join(x14);
        Expression x190=x138.join(x191);
        Expression x193=x138.join(x12);
        Expression x194=x134.join(x14);
        Expression x192=x193.join(x194);
        Formula x189=x190.eq(x192);
        IntExpression x196=x7.count();
        Expression x195=x196.toExpression();
        Formula x199=x192.eq(x190);
        IntExpression x200=IntConstant.constant(0);
        Expression x204=x19.closure();
        Expression x203=x190.join(x204);
        Formula x202=x192.in(x203);
        Expression x209=x19.closure();
        Expression x208=x190.join(x209);
        Expression x212=x19.transpose();
        Expression x211=x212.closure();
        Expression x210=x192.join(x211);
        Expression x207=x208.intersection(x210);
        Expression x206=x207.union(x192);
        IntExpression x205=x206.count();
        Expression x218=x19.closure();
        Expression x217=x192.join(x218);
        Expression x221=x19.transpose();
        Expression x220=x221.closure();
        Expression x219=x190.join(x220);
        Expression x216=x217.intersection(x219);
        Expression x215=x216.union(x192);
        Expression x214=x7.difference(x215);
        IntExpression x213=x214.count();
        IntExpression x201=x202.thenElse(x205,x213);
        IntExpression x198=x199.thenElse(x200,x201);
        Expression x197=x198.toExpression();
        Expression x188=x189.thenElse(x195,x197);
        IntExpression x187=x188.sum();
        Formula x150=x151.eq(x187);
        IntExpression x223=x188.sum();
        IntExpression x224=x7.count();
        Formula x222=x223.eq(x224);
        Formula x149=x150.and(x222);
        IntExpression x226=x152.sum();
        IntExpression x227=x188.sum();
        Formula x225=x226.lt(x227);
        Formula x148=x149.or(x225);
        Expression x230=x134.join(x14);
        Expression x229=x138.join(x230);
        Expression x228=x229.join(x13);
        Expression x147=x148.thenElse(x228,x229);
        Formula x143=x144.eq(x147);
        Formula x140=x141.and(x143);
        Variable x233=Variable.unary("OneAtATimeTrans_other");
        Expression x234=x6.difference(x138);
        Decls x232=x233.oneOf(x234);
        Expression x237=x146.join(x14);
        Expression x236=x233.join(x237);
        Expression x239=x134.join(x14);
        Expression x238=x233.join(x239);
        Formula x235=x236.eq(x238);
        Formula x231=x235.forAll(x232);
        Formula x139=x140.and(x231);
        Formula x136=x139.forSome(x137);
        Formula x132=x136.forAll(x133);
        Variable x243=Variable.unary("BadLivenessHelper_s");
        Expression x244=x8.difference(x130);
        Decls x242=x243.oneOf(x244);
        Expression x247=x243.join(x14);
        Expression x248=x130.join(x14);
        Formula x246=x247.eq(x248);
        Expression x254=x21.closure();
        Expression x253=x243.join(x254);
        Expression x252=x253.union(x243);
        Expression x251=x252.difference(x130);
        Expression x250=x251.join(x15);
        Formula x249=x6.in(x250);
        Formula x245=x246.and(x249);
        Formula x241=x245.forSome(x242);
        Variable x257=Variable.unary("BadLivenessHelper_s");
        Decls x256=x257.oneOf(x8);
        Variable x264=Variable.unary("LeadersAtState_p");
        Decls x263=x264.oneOf(x6);
        Expression x267=x257.join(x14);
        Expression x266=x264.join(x267);
        Formula x265=x266.eq(x18);
        Expression x262=x265.comprehension(x263);
        Formula x261=x262.one();
        Variable x270=Variable.unary("Legit_p");
        Decls x269=x270.oneOf(x6);
        Expression x278=x12.transpose();
        Expression x277=x270.join(x278);
        Expression x279=x257.join(x14);
        Expression x276=x277.join(x279);
        Expression x281=x257.join(x14);
        Expression x280=x270.join(x281);
        Formula x275=x276.eq(x280);
        IntExpression x283=x7.count();
        Expression x282=x283.toExpression();
        Formula x286=x280.eq(x276);
        IntExpression x287=IntConstant.constant(0);
        Expression x291=x19.closure();
        Expression x290=x276.join(x291);
        Formula x289=x280.in(x290);
        Expression x296=x19.closure();
        Expression x295=x276.join(x296);
        Expression x299=x19.transpose();
        Expression x298=x299.closure();
        Expression x297=x280.join(x298);
        Expression x294=x295.intersection(x297);
        Expression x293=x294.union(x280);
        IntExpression x292=x293.count();
        Expression x305=x19.closure();
        Expression x304=x280.join(x305);
        Expression x308=x19.transpose();
        Expression x307=x308.closure();
        Expression x306=x276.join(x307);
        Expression x303=x304.intersection(x306);
        Expression x302=x303.union(x280);
        Expression x301=x7.difference(x302);
        IntExpression x300=x301.count();
        IntExpression x288=x289.thenElse(x292,x300);
        IntExpression x285=x286.thenElse(x287,x288);
        Expression x284=x285.toExpression();
        Expression x274=x275.thenElse(x282,x284);
        IntExpression x273=x274.sum();
        IntExpression x309=x7.count();
        Formula x272=x273.lt(x309);
        Expression x315=x257.join(x14);
        Expression x314=x270.join(x315);
        Expression x317=x270.join(x12);
        Expression x318=x257.join(x14);
        Expression x316=x317.join(x318);
        Formula x313=x314.eq(x316);
        IntExpression x320=x7.count();
        Expression x319=x320.toExpression();
        Formula x323=x316.eq(x314);
        IntExpression x324=IntConstant.constant(0);
        Expression x328=x19.closure();
        Expression x327=x314.join(x328);
        Formula x326=x316.in(x327);
        Expression x333=x19.closure();
        Expression x332=x314.join(x333);
        Expression x336=x19.transpose();
        Expression x335=x336.closure();
        Expression x334=x316.join(x335);
        Expression x331=x332.intersection(x334);
        Expression x330=x331.union(x316);
        IntExpression x329=x330.count();
        Expression x342=x19.closure();
        Expression x341=x316.join(x342);
        Expression x345=x19.transpose();
        Expression x344=x345.closure();
        Expression x343=x314.join(x344);
        Expression x340=x341.intersection(x343);
        Expression x339=x340.union(x316);
        Expression x338=x7.difference(x339);
        IntExpression x337=x338.count();
        IntExpression x325=x326.thenElse(x329,x337);
        IntExpression x322=x323.thenElse(x324,x325);
        Expression x321=x322.toExpression();
        Expression x312=x313.thenElse(x319,x321);
        IntExpression x311=x312.sum();
        IntExpression x346=x7.count();
        Formula x310=x311.lt(x346);
        Formula x271=x272.and(x310);
        Formula x268=x271.forAll(x269);
        Formula x260=x261.and(x268);
        Variable x350=Variable.unary("Legit_p");
        Decls x349=x350.oneOf(x6);
        Variable x352=Variable.unary("Legit_p'");
        Decls x351=x352.oneOf(x6);
        Decls x348=x349.and(x351);
        Expression x360=x12.transpose();
        Expression x359=x350.join(x360);
        Expression x361=x257.join(x14);
        Expression x358=x359.join(x361);
        Expression x363=x257.join(x14);
        Expression x362=x350.join(x363);
        Formula x357=x358.eq(x362);
        IntExpression x365=x7.count();
        Expression x364=x365.toExpression();
        Formula x368=x362.eq(x358);
        IntExpression x369=IntConstant.constant(0);
        Expression x373=x19.closure();
        Expression x372=x358.join(x373);
        Formula x371=x362.in(x372);
        Expression x378=x19.closure();
        Expression x377=x358.join(x378);
        Expression x381=x19.transpose();
        Expression x380=x381.closure();
        Expression x379=x362.join(x380);
        Expression x376=x377.intersection(x379);
        Expression x375=x376.union(x362);
        IntExpression x374=x375.count();
        Expression x387=x19.closure();
        Expression x386=x362.join(x387);
        Expression x390=x19.transpose();
        Expression x389=x390.closure();
        Expression x388=x358.join(x389);
        Expression x385=x386.intersection(x388);
        Expression x384=x385.union(x362);
        Expression x383=x7.difference(x384);
        IntExpression x382=x383.count();
        IntExpression x370=x371.thenElse(x374,x382);
        IntExpression x367=x368.thenElse(x369,x370);
        Expression x366=x367.toExpression();
        Expression x356=x357.thenElse(x364,x366);
        IntExpression x355=x356.sum();
        Expression x396=x12.transpose();
        Expression x395=x352.join(x396);
        Expression x397=x257.join(x14);
        Expression x394=x395.join(x397);
        Expression x399=x257.join(x14);
        Expression x398=x352.join(x399);
        Formula x393=x394.eq(x398);
        IntExpression x401=x7.count();
        Expression x400=x401.toExpression();
        Formula x404=x398.eq(x394);
        IntExpression x405=IntConstant.constant(0);
        Expression x409=x19.closure();
        Expression x408=x394.join(x409);
        Formula x407=x398.in(x408);
        Expression x414=x19.closure();
        Expression x413=x394.join(x414);
        Expression x417=x19.transpose();
        Expression x416=x417.closure();
        Expression x415=x398.join(x416);
        Expression x412=x413.intersection(x415);
        Expression x411=x412.union(x398);
        IntExpression x410=x411.count();
        Expression x423=x19.closure();
        Expression x422=x398.join(x423);
        Expression x426=x19.transpose();
        Expression x425=x426.closure();
        Expression x424=x394.join(x425);
        Expression x421=x422.intersection(x424);
        Expression x420=x421.union(x398);
        Expression x419=x7.difference(x420);
        IntExpression x418=x419.count();
        IntExpression x406=x407.thenElse(x410,x418);
        IntExpression x403=x404.thenElse(x405,x406);
        Expression x402=x403.toExpression();
        Expression x392=x393.thenElse(x400,x402);
        IntExpression x391=x392.sum();
        Formula x354=x355.eq(x391);
        Expression x432=x257.join(x14);
        Expression x431=x350.join(x432);
        Expression x434=x350.join(x12);
        Expression x435=x257.join(x14);
        Expression x433=x434.join(x435);
        Formula x430=x431.eq(x433);
        IntExpression x437=x7.count();
        Expression x436=x437.toExpression();
        Formula x440=x433.eq(x431);
        IntExpression x441=IntConstant.constant(0);
        Expression x445=x19.closure();
        Expression x444=x431.join(x445);
        Formula x443=x433.in(x444);
        Expression x450=x19.closure();
        Expression x449=x431.join(x450);
        Expression x453=x19.transpose();
        Expression x452=x453.closure();
        Expression x451=x433.join(x452);
        Expression x448=x449.intersection(x451);
        Expression x447=x448.union(x433);
        IntExpression x446=x447.count();
        Expression x459=x19.closure();
        Expression x458=x433.join(x459);
        Expression x462=x19.transpose();
        Expression x461=x462.closure();
        Expression x460=x431.join(x461);
        Expression x457=x458.intersection(x460);
        Expression x456=x457.union(x433);
        Expression x455=x7.difference(x456);
        IntExpression x454=x455.count();
        IntExpression x442=x443.thenElse(x446,x454);
        IntExpression x439=x440.thenElse(x441,x442);
        Expression x438=x439.toExpression();
        Expression x429=x430.thenElse(x436,x438);
        IntExpression x428=x429.sum();
        Expression x467=x257.join(x14);
        Expression x466=x352.join(x467);
        Expression x469=x352.join(x12);
        Expression x470=x257.join(x14);
        Expression x468=x469.join(x470);
        Formula x465=x466.eq(x468);
        IntExpression x472=x7.count();
        Expression x471=x472.toExpression();
        Formula x475=x468.eq(x466);
        IntExpression x476=IntConstant.constant(0);
        Expression x480=x19.closure();
        Expression x479=x466.join(x480);
        Formula x478=x468.in(x479);
        Expression x485=x19.closure();
        Expression x484=x466.join(x485);
        Expression x488=x19.transpose();
        Expression x487=x488.closure();
        Expression x486=x468.join(x487);
        Expression x483=x484.intersection(x486);
        Expression x482=x483.union(x468);
        IntExpression x481=x482.count();
        Expression x494=x19.closure();
        Expression x493=x468.join(x494);
        Expression x497=x19.transpose();
        Expression x496=x497.closure();
        Expression x495=x466.join(x496);
        Expression x492=x493.intersection(x495);
        Expression x491=x492.union(x468);
        Expression x490=x7.difference(x491);
        IntExpression x489=x490.count();
        IntExpression x477=x478.thenElse(x481,x489);
        IntExpression x474=x475.thenElse(x476,x477);
        Expression x473=x474.toExpression();
        Expression x464=x465.thenElse(x471,x473);
        IntExpression x463=x464.sum();
        Formula x427=x428.eq(x463);
        Formula x353=x354.and(x427);
        Formula x347=x353.forAll(x348);
        Formula x259=x260.and(x347);
        Formula x258=x259.not();
        Formula x255=x258.forAll(x256);
        Formula x240=x241.and(x255);
        Formula x498=x0.eq(x0);
        Formula x499=x1.eq(x1);
        Formula x500=x2.eq(x2);
        Formula x501=x3.eq(x3);
        Formula x502=x4.eq(x4);
        Formula x503=x5.eq(x5);
        Formula x504=x6.eq(x6);
        Formula x505=x7.eq(x7);
        Formula x506=x8.eq(x8);
        Formula x507=x9.eq(x9);
        Formula x508=x10.eq(x10);
        Formula x509=x11.eq(x11);
        Formula x510=x12.eq(x12);
        Formula x511=x13.eq(x13);
        Formula x512=x14.eq(x14);
        Formula x513=x15.eq(x15);
        Formula x514=x16.eq(x16);
        Formula x515=x17.eq(x17);
        Formula x516=x18.eq(x18);
        Formula x517=x19.eq(x19);
        Formula x518=x20.eq(x20);
        Formula x519=x21.eq(x21);
        Formula x520=x22.eq(x22);
        Formula x521=x23.eq(x23);
        Formula x522=x24.eq(x24);
        Formula x25=Formula.compose(FormulaOperator.AND, x26, x33, x36, x43, x45, x65, x68, x73, x75, x78, x82, x83, x86, x90, x91, x94, x98, x99, x120, x125, x128, x132, x240, x498, x499, x500, x501, x502, x503, x504, x505, x506, x507, x508, x509, x510, x511, x512, x513, x514, x515, x516, x517, x518, x519, x520, x521, x522);

        Solver solver = new Solver();
        solver.options().setSolver(SATFactory.MiniSat);
        solver.options().setBitwidth(4);
       // solver.options().setFlatten(false);
        solver.options().setIntEncoding(Options.IntEncoding.TWOSCOMPLEMENT);
        solver.options().setSymmetryBreaking(20);
        solver.options().setSkolemDepth(0);
        System.out.println("Solving...");
        System.out.flush();
        Solution sol = solver.solve(x25,bounds);
        System.out.println(sol.toString());
    }}