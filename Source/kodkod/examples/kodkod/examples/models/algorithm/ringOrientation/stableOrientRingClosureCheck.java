package kodkod.examples.models.algorithm.ringOrientation;

import java.util.Arrays;
import java.util.List;
import kodkod.ast.*;
import kodkod.ast.operator.*;
import kodkod.examples.ExampleMetadata;
import kodkod.instance.*;
import kodkod.engine.*;
import kodkod.engine.satlab.SATFactory;
import kodkod.engine.config.Options;

@ExampleMetadata(
        Name = "stable-orient-ring",
        Note = "",
        IsCheck = true,
        PartialModel = true,
        BinaryRelations = 6,
        TernaryRelations = 4,
        NaryRelations = 0,
        HierarchicalTypes = 0,
        NestedRelationalJoins = 2,
        TransitiveClosure = 3,
        NestedQuantifiers = 1,
        SetCardinality = 0,
        Additions = 0,
        Subtractions = 0,
        Comparison = 35,
        OrderedRelations = 1,
        Constraints = 40
)


public final class stableOrientRingClosureCheck {

    public static void main(String[] args) throws Exception {

        Relation x0 = Relation.unary("Int/min");
        Relation x1 = Relation.unary("Int/zero");
        Relation x2 = Relation.unary("Int/max");
        Relation x3 = Relation.nary("Int/next", 2);
        Relation x4 = Relation.unary("seq/Int");
        Relation x5 = Relation.unary("String");
        Relation x6 = Relation.unary("this/Process");
        Relation x7 = Relation.unary("this/Tick");
        Relation x8 = Relation.unary("bool/True");
        Relation x9 = Relation.unary("bool/False");
        Relation x10 = Relation.unary("ord/Ord");
        Relation x11 = Relation.nary("this/Process.rightNeighbor", 2);
        Relation x12 = Relation.nary("this/Process.AP1", 2);
        Relation x13 = Relation.nary("this/Process.AP2", 2);
        Relation x14 = Relation.nary("this/Tick.runs", 2);
        Relation x15 = Relation.nary("this/Tick.dir", 3);
        Relation x16 = Relation.nary("this/Tick.S", 3);
        Relation x17 = Relation.nary("this/Tick.T", 3);
        Relation x18 = Relation.nary("this/Tick.ring_", 3);
        Relation x19 = Relation.unary("ord/Ord.First");
        Relation x20 = Relation.nary("ord/Ord.Next", 2);
        Relation x21 = Relation.unary("");

        List<String> atomlist = Arrays.asList(
                "-1", "-2", "-3", "-4", "-5",
                "-6", "-7", "-8", "0", "1", "2",
                "3", "4", "5", "6", "7", "Process$0",
                "Process$1", "Process$2", "Tick$0", "Tick$1", "bool/False$0", "bool/True$0",
                "ord/Ord$0"
        );

        Universe universe = new Universe(atomlist);
        TupleFactory factory = universe.factory();
        Bounds bounds = new Bounds(universe);

        TupleSet x0_upper = factory.noneOf(1);
        x0_upper.add(factory.tuple("-8"));
        bounds.boundExactly(x0, x0_upper);

        TupleSet x1_upper = factory.noneOf(1);
        x1_upper.add(factory.tuple("0"));
        bounds.boundExactly(x1, x1_upper);

        TupleSet x2_upper = factory.noneOf(1);
        x2_upper.add(factory.tuple("7"));
        bounds.boundExactly(x2, x2_upper);

        TupleSet x3_upper = factory.noneOf(2);
        x3_upper.add(factory.tuple("-8").product(factory.tuple("-7")));
        x3_upper.add(factory.tuple("-7").product(factory.tuple("-6")));
        x3_upper.add(factory.tuple("-6").product(factory.tuple("-5")));
        x3_upper.add(factory.tuple("-5").product(factory.tuple("-4")));
        x3_upper.add(factory.tuple("-4").product(factory.tuple("-3")));
        x3_upper.add(factory.tuple("-3").product(factory.tuple("-2")));
        x3_upper.add(factory.tuple("-2").product(factory.tuple("-1")));
        x3_upper.add(factory.tuple("-1").product(factory.tuple("0")));
        x3_upper.add(factory.tuple("0").product(factory.tuple("1")));
        x3_upper.add(factory.tuple("1").product(factory.tuple("2")));
        x3_upper.add(factory.tuple("2").product(factory.tuple("3")));
        x3_upper.add(factory.tuple("3").product(factory.tuple("4")));
        x3_upper.add(factory.tuple("4").product(factory.tuple("5")));
        x3_upper.add(factory.tuple("5").product(factory.tuple("6")));
        x3_upper.add(factory.tuple("6").product(factory.tuple("7")));
        bounds.boundExactly(x3, x3_upper);

        TupleSet x4_upper = factory.noneOf(1);
        x4_upper.add(factory.tuple("0"));
        bounds.boundExactly(x4, x4_upper);

        TupleSet x5_upper = factory.noneOf(1);
        bounds.boundExactly(x5, x5_upper);

        TupleSet x6_upper = factory.noneOf(1);
        x6_upper.add(factory.tuple("Process$0"));
        x6_upper.add(factory.tuple("Process$1"));
        x6_upper.add(factory.tuple("Process$2"));
        bounds.bound(x6, x6_upper);

        TupleSet x7_upper = factory.noneOf(1);
        x7_upper.add(factory.tuple("Tick$0"));
        x7_upper.add(factory.tuple("Tick$1"));
        bounds.boundExactly(x7, x7_upper);

        TupleSet x8_upper = factory.noneOf(1);
        x8_upper.add(factory.tuple("bool/True$0"));
        bounds.boundExactly(x8, x8_upper);

        TupleSet x9_upper = factory.noneOf(1);
        x9_upper.add(factory.tuple("bool/False$0"));
        bounds.boundExactly(x9, x9_upper);

        TupleSet x10_upper = factory.noneOf(1);
        x10_upper.add(factory.tuple("ord/Ord$0"));
        bounds.boundExactly(x10, x10_upper);

        TupleSet x11_upper = factory.noneOf(2);
        x11_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$0")));
        x11_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$1")));
        x11_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$2")));
        x11_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$0")));
        x11_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$1")));
        x11_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$2")));
        x11_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$0")));
        x11_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$1")));
        x11_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$2")));
        bounds.bound(x11, x11_upper);

        TupleSet x12_upper = factory.noneOf(2);
        x12_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$0")));
        x12_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$1")));
        x12_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$2")));
        x12_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$0")));
        x12_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$1")));
        x12_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$2")));
        x12_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$0")));
        x12_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$1")));
        x12_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$2")));
        bounds.bound(x12, x12_upper);

        TupleSet x13_upper = factory.noneOf(2);
        x13_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$0")));
        x13_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$1")));
        x13_upper.add(factory.tuple("Process$0").product(factory.tuple("Process$2")));
        x13_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$0")));
        x13_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$1")));
        x13_upper.add(factory.tuple("Process$1").product(factory.tuple("Process$2")));
        x13_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$0")));
        x13_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$1")));
        x13_upper.add(factory.tuple("Process$2").product(factory.tuple("Process$2")));
        bounds.bound(x13, x13_upper);

        TupleSet x14_upper = factory.noneOf(2);
        x14_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$0")));
        x14_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$1")));
        x14_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$2")));
        x14_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$0")));
        x14_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$1")));
        x14_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$2")));
        bounds.bound(x14, x14_upper);

        TupleSet x15_upper = factory.noneOf(3);
        x15_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$0")).product(factory.tuple("bool/True$0")));
        x15_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$0")).product(factory.tuple("bool/False$0")));
        x15_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$1")).product(factory.tuple("bool/True$0")));
        x15_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$1")).product(factory.tuple("bool/False$0")));
        x15_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$2")).product(factory.tuple("bool/True$0")));
        x15_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$2")).product(factory.tuple("bool/False$0")));
        x15_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$0")).product(factory.tuple("bool/True$0")));
        x15_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$0")).product(factory.tuple("bool/False$0")));
        x15_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$1")).product(factory.tuple("bool/True$0")));
        x15_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$1")).product(factory.tuple("bool/False$0")));
        x15_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$2")).product(factory.tuple("bool/True$0")));
        x15_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$2")).product(factory.tuple("bool/False$0")));
        bounds.bound(x15, x15_upper);

        TupleSet x16_upper = factory.noneOf(3);
        x16_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$0")).product(factory.tuple("bool/True$0")));
        x16_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$0")).product(factory.tuple("bool/False$0")));
        x16_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$1")).product(factory.tuple("bool/True$0")));
        x16_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$1")).product(factory.tuple("bool/False$0")));
        x16_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$2")).product(factory.tuple("bool/True$0")));
        x16_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$2")).product(factory.tuple("bool/False$0")));
        x16_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$0")).product(factory.tuple("bool/True$0")));
        x16_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$0")).product(factory.tuple("bool/False$0")));
        x16_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$1")).product(factory.tuple("bool/True$0")));
        x16_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$1")).product(factory.tuple("bool/False$0")));
        x16_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$2")).product(factory.tuple("bool/True$0")));
        x16_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$2")).product(factory.tuple("bool/False$0")));
        bounds.bound(x16, x16_upper);

        TupleSet x17_upper = factory.noneOf(3);
        x17_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$0")).product(factory.tuple("bool/True$0")));
        x17_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$0")).product(factory.tuple("bool/False$0")));
        x17_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$1")).product(factory.tuple("bool/True$0")));
        x17_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$1")).product(factory.tuple("bool/False$0")));
        x17_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$2")).product(factory.tuple("bool/True$0")));
        x17_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$2")).product(factory.tuple("bool/False$0")));
        x17_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$0")).product(factory.tuple("bool/True$0")));
        x17_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$0")).product(factory.tuple("bool/False$0")));
        x17_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$1")).product(factory.tuple("bool/True$0")));
        x17_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$1")).product(factory.tuple("bool/False$0")));
        x17_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$2")).product(factory.tuple("bool/True$0")));
        x17_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$2")).product(factory.tuple("bool/False$0")));
        bounds.bound(x17, x17_upper);

        TupleSet x18_upper = factory.noneOf(3);
        x18_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$0")).product(factory.tuple("Process$0")));
        x18_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$0")).product(factory.tuple("Process$1")));
        x18_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$0")).product(factory.tuple("Process$2")));
        x18_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$1")).product(factory.tuple("Process$0")));
        x18_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$1")).product(factory.tuple("Process$1")));
        x18_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$1")).product(factory.tuple("Process$2")));
        x18_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$2")).product(factory.tuple("Process$0")));
        x18_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$2")).product(factory.tuple("Process$1")));
        x18_upper.add(factory.tuple("Tick$0").product(factory.tuple("Process$2")).product(factory.tuple("Process$2")));
        x18_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$0")).product(factory.tuple("Process$0")));
        x18_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$0")).product(factory.tuple("Process$1")));
        x18_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$0")).product(factory.tuple("Process$2")));
        x18_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$1")).product(factory.tuple("Process$0")));
        x18_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$1")).product(factory.tuple("Process$1")));
        x18_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$1")).product(factory.tuple("Process$2")));
        x18_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$2")).product(factory.tuple("Process$0")));
        x18_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$2")).product(factory.tuple("Process$1")));
        x18_upper.add(factory.tuple("Tick$1").product(factory.tuple("Process$2")).product(factory.tuple("Process$2")));
        bounds.bound(x18, x18_upper);

        TupleSet x19_upper = factory.noneOf(1);
        x19_upper.add(factory.tuple("Tick$0"));
        x19_upper.add(factory.tuple("Tick$1"));
        bounds.bound(x19, x19_upper);

        TupleSet x20_upper = factory.noneOf(2);
        x20_upper.add(factory.tuple("Tick$0").product(factory.tuple("Tick$0")));
        x20_upper.add(factory.tuple("Tick$0").product(factory.tuple("Tick$1")));
        x20_upper.add(factory.tuple("Tick$1").product(factory.tuple("Tick$0")));
        x20_upper.add(factory.tuple("Tick$1").product(factory.tuple("Tick$1")));
        bounds.bound(x20, x20_upper);

        TupleSet x21_upper = factory.noneOf(1);
        x21_upper.add(factory.tuple("Tick$0"));
        x21_upper.add(factory.tuple("Tick$1"));
        bounds.bound(x21, x21_upper);

        bounds.boundExactly(-8,factory.range(factory.tuple("-8"),factory.tuple("-8")));
        bounds.boundExactly(-7,factory.range(factory.tuple("-7"),factory.tuple("-7")));
        bounds.boundExactly(-6,factory.range(factory.tuple("-6"),factory.tuple("-6")));
        bounds.boundExactly(-5,factory.range(factory.tuple("-5"),factory.tuple("-5")));
        bounds.boundExactly(-4,factory.range(factory.tuple("-4"),factory.tuple("-4")));
        bounds.boundExactly(-3,factory.range(factory.tuple("-3"),factory.tuple("-3")));
        bounds.boundExactly(-2,factory.range(factory.tuple("-2"),factory.tuple("-2")));
        bounds.boundExactly(-1,factory.range(factory.tuple("-1"),factory.tuple("-1")));
        bounds.boundExactly(0,factory.range(factory.tuple("0"),factory.tuple("0")));
        bounds.boundExactly(1,factory.range(factory.tuple("1"),factory.tuple("1")));
        bounds.boundExactly(2,factory.range(factory.tuple("2"),factory.tuple("2")));
        bounds.boundExactly(3,factory.range(factory.tuple("3"),factory.tuple("3")));
        bounds.boundExactly(4,factory.range(factory.tuple("4"),factory.tuple("4")));
        bounds.boundExactly(5,factory.range(factory.tuple("5"),factory.tuple("5")));
        bounds.boundExactly(6,factory.range(factory.tuple("6"),factory.tuple("6")));
        bounds.boundExactly(7,factory.range(factory.tuple("7"),factory.tuple("7")));

        Expression x24=x8.intersection(x9);
        Formula x23=x24.no();
        Variable x27=Variable.unary("Closure_this");
        Decls x26=x27.oneOf(x6);
        Expression x30=x27.join(x11);
        Formula x29=x30.one();
        Formula x31=x30.in(x6);
        Formula x28=x29.and(x31);
        Formula x25=x28.forAll(x26);
        Expression x33=x11.join(Expression.UNIV);
        Formula x32=x33.in(x6);
        Variable x37=Variable.unary("Closure_this");
        Decls x36=x37.oneOf(x6);
        Expression x40=x37.join(x12);
        Formula x39=x40.one();
        Formula x41=x40.in(x6);
        Formula x38=x39.and(x41);
        Formula x35=x38.forAll(x36);
        Expression x43=x12.join(Expression.UNIV);
        Formula x42=x43.in(x6);
        Variable x46=Variable.unary("Closure_this");
        Decls x45=x46.oneOf(x6);
        Expression x49=x46.join(x13);
        Formula x48=x49.one();
        Formula x50=x49.in(x6);
        Formula x47=x48.and(x50);
        Formula x44=x47.forAll(x45);
        Expression x52=x13.join(Expression.UNIV);
        Formula x51=x52.in(x6);
        Variable x55=Variable.unary("Closure_this");
        Decls x54=x55.oneOf(x7);
        Expression x57=x55.join(x14);
        Formula x56=x57.in(x6);
        Formula x53=x56.forAll(x54);
        Expression x59=x14.join(Expression.UNIV);
        Formula x58=x59.in(x7);
        Variable x62=Variable.unary("Closure_this");
        Decls x61=x62.oneOf(x7);
        Expression x66=x62.join(x15);
        Expression x68=x8.union(x9);
        Expression x67=x6.product(x68);
        Formula x65=x66.in(x67);
        Variable x71=Variable.unary("");
        Decls x70=x71.oneOf(x6);
        Expression x74=x71.join(x66);
        Formula x73=x74.one();
        Formula x75=x74.in(x68);
        Formula x72=x73.and(x75);
        Formula x69=x72.forAll(x70);
        Formula x64=x65.and(x69);
        Variable x78=Variable.unary("");
        Decls x77=x78.oneOf(x68);
        Expression x80=x66.join(x78);
        Formula x79=x80.in(x6);
        Formula x76=x79.forAll(x77);
        Formula x63=x64.and(x76);
        Formula x60=x63.forAll(x61);
        Expression x83=x15.join(Expression.UNIV);
        Expression x82=x83.join(Expression.UNIV);
        Formula x81=x82.in(x7);
        Variable x86=Variable.unary("Closure_this");
        Decls x85=x86.oneOf(x7);
        Expression x90=x86.join(x16);
        Expression x91=x6.product(x68);
        Formula x89=x90.in(x91);
        Variable x94=Variable.unary("");
        Decls x93=x94.oneOf(x6);
        Expression x97=x94.join(x90);
        Formula x96=x97.one();
        Formula x98=x97.in(x68);
        Formula x95=x96.and(x98);
        Formula x92=x95.forAll(x93);
        Formula x88=x89.and(x92);
        Variable x101=Variable.unary("");
        Decls x100=x101.oneOf(x68);
        Expression x103=x90.join(x101);
        Formula x102=x103.in(x6);
        Formula x99=x102.forAll(x100);
        Formula x87=x88.and(x99);
        Formula x84=x87.forAll(x85);
        Expression x106=x16.join(Expression.UNIV);
        Expression x105=x106.join(Expression.UNIV);
        Formula x104=x105.in(x7);
        Variable x109=Variable.unary("Closure_this");
        Decls x108=x109.oneOf(x7);
        Expression x113=x109.join(x17);
        Expression x114=x6.product(x68);
        Formula x112=x113.in(x114);
        Variable x117=Variable.unary("");
        Decls x116=x117.oneOf(x6);
        Expression x120=x117.join(x113);
        Formula x119=x120.one();
        Formula x121=x120.in(x68);
        Formula x118=x119.and(x121);
        Formula x115=x118.forAll(x116);
        Formula x111=x112.and(x115);
        Variable x124=Variable.unary("");
        Decls x123=x124.oneOf(x68);
        Expression x126=x113.join(x124);
        Formula x125=x126.in(x6);
        Formula x122=x125.forAll(x123);
        Formula x110=x111.and(x122);
        Formula x107=x110.forAll(x108);
        Expression x129=x17.join(Expression.UNIV);
        Expression x128=x129.join(Expression.UNIV);
        Formula x127=x128.in(x7);
        Variable x132=Variable.unary("Closure_this");
        Decls x131=x132.oneOf(x7);
        Expression x134=x132.join(x18);
        Expression x135=x6.product(x6);
        Formula x133=x134.in(x135);
        Formula x130=x133.forAll(x131);
        Expression x138=x18.join(Expression.UNIV);
        Expression x137=x138.join(Expression.UNIV);
        Formula x136=x137.in(x7);
        Variable x141=Variable.unary("Closure_this");
        Decls x140=x141.oneOf(x7);
        Variable x144=Variable.unary("Closure_p");
        Decls x143=x144.oneOf(x6);
        Expression x147=x141.join(x18);
        Expression x146=x144.join(x147);
        Expression x151=x141.join(x15);
        Expression x150=x144.join(x151);
        Formula x149=x150.eq(x8);
        Expression x152=x144.join(x12);
        Expression x153=x144.join(x13);
        Expression x148=x149.thenElse(x152,x153);
        Formula x145=x146.eq(x148);
        Formula x142=x145.forAll(x143);
        Formula x139=x142.forAll(x140);
        Expression x156=x10.product(x19);
        Expression x155=x10.join(x156);
        Formula x154=x155.in(x7);
        Expression x159=x10.product(x20);
        Expression x158=x10.join(x159);
        Expression x160=x7.product(x7);
        Formula x157=x158.in(x160);
        Formula x161=x20.totalOrder(x7,x19,x21);
        Variable x164=Variable.unary("Closure_p");
        Decls x163=x164.oneOf(x6);
        Expression x168=x164.join(x12);
        Expression x169=x164.join(x11);
        Formula x167=x168.eq(x169);
        Expression x171=x164.join(x13);
        Expression x173=x11.transpose();
        Expression x172=x164.join(x173);
        Formula x170=x171.eq(x172);
        Formula x166=x167.and(x170);
        Expression x176=x164.join(x13);
        Expression x177=x164.join(x11);
        Formula x175=x176.eq(x177);
        Expression x179=x164.join(x12);
        Expression x181=x11.transpose();
        Expression x180=x164.join(x181);
        Formula x178=x179.eq(x180);
        Formula x174=x175.and(x178);
        Formula x165=x166.or(x174);
        Formula x162=x165.forAll(x163);
        Variable x184=Variable.unary("ring_n");
        Decls x183=x184.oneOf(x6);
        Expression x187=x184.join(x11);
        Formula x186=x187.one();
        Expression x191=x11.closure();
        Expression x199=Expression.INTS.union(x5);
        Expression x198=x199.union(x6);
        Expression x197=x198.union(x7);
        Expression x196=x197.union(x68);
        Expression x195=x196.union(x10);
        Expression x194=x195.product(Expression.UNIV);
        Expression x192=Expression.IDEN.intersection(x194);
        Expression x190=x191.union(x192);
        Expression x189=x184.join(x190);
        Formula x188=x6.in(x189);
        Formula x185=x186.and(x188);
        Formula x182=x185.forAll(x183);
        Variable x203=Variable.unary("Closure_tp");
        Expression x206=x20.join(x7);
        Expression x205=x7.difference(x206);
        Expression x204=x7.difference(x205);
        Decls x202=x203.oneOf(x204);
        Variable x209=Variable.unary("Closure_p");
        Decls x208=x209.oneOf(x6);
        Expression x214=x203.join(x14);
        Formula x213=x209.in(x214);
        Formula x212=x213.not();
        Expression x220=x203.join(x20);
        Expression x219=x220.join(x16);
        Expression x218=x209.join(x219);
        Expression x222=x203.join(x16);
        Expression x221=x209.join(x222);
        Formula x217=x218.eq(x221);
        Expression x225=x220.join(x17);
        Expression x224=x209.join(x225);
        Expression x227=x203.join(x17);
        Expression x226=x209.join(x227);
        Formula x223=x224.eq(x226);
        Formula x216=x217.and(x223);
        Expression x230=x220.join(x15);
        Expression x229=x209.join(x230);
        Expression x232=x203.join(x15);
        Expression x231=x209.join(x232);
        Formula x228=x229.eq(x231);
        Formula x215=x216.and(x228);
        Formula x211=x212.implies(x215);
        Formula x234=x212.not();
        Expression x239=x209.join(x12);
        Expression x238=x239.join(x222);
        Expression x241=x209.join(x13);
        Expression x240=x241.join(x222);
        Formula x237=x238.eq(x240);
        Expression x245=x68.difference(x238);
        Formula x244=x218.eq(x245);
        Formula x246=x224.eq(x8);
        Formula x243=x244.and(x246);
        Formula x247=x229.eq(x231);
        Formula x242=x243.and(x247);
        Formula x236=x237.implies(x242);
        Formula x249=x237.not();
        Formula x254=x238.eq(x221);
        Expression x256=x68.difference(x240);
        Formula x255=x221.eq(x256);
        Formula x253=x254.and(x255);
        Expression x261=x239.join(x227);
        Expression x260=x68.difference(x261);
        Formula x259=x260.eq(x226);
        Expression x263=x241.join(x227);
        Formula x262=x226.eq(x263);
        Formula x258=x259.and(x262);
        Formula x264=x263.eq(x8);
        Formula x257=x258.and(x264);
        Formula x252=x253.and(x257);
        Expression x268=x68.difference(x221);
        Formula x267=x218.eq(x268);
        Formula x269=x224.eq(x9);
        Formula x266=x267.and(x269);
        Formula x270=x229.eq(x8);
        Formula x265=x266.and(x270);
        Formula x251=x252.implies(x265);
        Formula x272=x252.not();
        Expression x278=x68.difference(x238);
        Formula x277=x278.eq(x221);
        Formula x279=x221.eq(x240);
        Formula x276=x277.and(x279);
        Formula x282=x261.eq(x226);
        Expression x284=x68.difference(x263);
        Formula x283=x226.eq(x284);
        Formula x281=x282.and(x283);
        Formula x285=x284.eq(x8);
        Formula x280=x281.and(x285);
        Formula x275=x276.and(x280);
        Expression x289=x68.difference(x221);
        Formula x288=x218.eq(x289);
        Formula x290=x224.eq(x9);
        Formula x287=x288.and(x290);
        Formula x291=x229.eq(x9);
        Formula x286=x287.and(x291);
        Formula x274=x275.implies(x286);
        Formula x293=x275.not();
        Formula x299=x238.eq(x221);
        Expression x301=x68.difference(x240);
        Formula x300=x221.eq(x301);
        Formula x298=x299.and(x300);
        Formula x302=x261.eq(x226);
        Formula x297=x298.and(x302);
        Expression x306=x68.difference(x238);
        Formula x305=x306.eq(x221);
        Formula x307=x221.eq(x240);
        Formula x304=x305.and(x307);
        Formula x308=x226.eq(x263);
        Formula x303=x304.and(x308);
        Formula x296=x297.or(x303);
        Expression x312=x68.difference(x226);
        Formula x311=x224.eq(x312);
        Formula x313=x218.eq(x221);
        Formula x310=x311.and(x313);
        Formula x314=x229.eq(x231);
        Formula x309=x310.and(x314);
        Formula x295=x296.implies(x309);
        Formula x316=x296.not();
        Formula x319=x218.eq(x221);
        Formula x320=x224.eq(x226);
        Formula x318=x319.and(x320);
        Formula x321=x229.eq(x231);
        Formula x317=x318.and(x321);
        Formula x315=x316.implies(x317);
        Formula x294=x295.and(x315);
        Formula x292=x293.implies(x294);
        Formula x273=x274.and(x292);
        Formula x271=x272.implies(x273);
        Formula x250=x251.and(x271);
        Formula x248=x249.implies(x250);
        Formula x235=x236.and(x248);
        Formula x233=x234.implies(x235);
        Formula x210=x211.and(x233);
        Formula x207=x210.forAll(x208);
        Formula x201=x207.forAll(x202);
        Variable x325=Variable.unary("Closure_t");
        Expression x326=x7.difference(x205);
        Decls x324=x325.oneOf(x326);
        Variable x332=Variable.unary("ring_n");
        Decls x331=x332.oneOf(x6);
        Expression x336=x325.join(x18);
        Expression x335=x332.join(x336);
        Formula x334=x335.one();
        Expression x340=x336.closure();
        Expression x342=x195.product(Expression.UNIV);
        Expression x341=Expression.IDEN.intersection(x342);
        Expression x339=x340.union(x341);
        Expression x338=x332.join(x339);
        Formula x337=x6.in(x338);
        Formula x333=x334.and(x337);
        Formula x330=x333.forAll(x331);
        Variable x345=Variable.unary("ring_n");
        Decls x344=x345.oneOf(x6);
        Expression x349=x336.transpose();
        Expression x348=x345.join(x349);
        Formula x347=x348.one();
        Expression x353=x349.closure();
        Expression x355=x195.product(Expression.UNIV);
        Expression x354=Expression.IDEN.intersection(x355);
        Expression x352=x353.union(x354);
        Expression x351=x345.join(x352);
        Formula x350=x6.in(x351);
        Formula x346=x347.and(x350);
        Formula x343=x346.forAll(x344);
        Formula x329=x330.or(x343);
        Formula x328=x329.not();
        Variable x359=Variable.unary("ring_n");
        Decls x358=x359.oneOf(x6);
        Expression x364=x325.join(x20);
        Expression x363=x364.join(x18);
        Expression x362=x359.join(x363);
        Formula x361=x362.one();
        Expression x368=x363.closure();
        Expression x370=x195.product(Expression.UNIV);
        Expression x369=Expression.IDEN.intersection(x370);
        Expression x367=x368.union(x369);
        Expression x366=x359.join(x367);
        Formula x365=x6.in(x366);
        Formula x360=x361.and(x365);
        Formula x357=x360.forAll(x358);
        Variable x373=Variable.unary("ring_n");
        Decls x372=x373.oneOf(x6);
        Expression x377=x363.transpose();
        Expression x376=x373.join(x377);
        Formula x375=x376.one();
        Expression x381=x377.closure();
        Expression x383=x195.product(Expression.UNIV);
        Expression x382=Expression.IDEN.intersection(x383);
        Expression x380=x381.union(x382);
        Expression x379=x373.join(x380);
        Formula x378=x6.in(x379);
        Formula x374=x375.and(x378);
        Formula x371=x374.forAll(x372);
        Formula x356=x357.or(x371);
        Formula x327=x328.or(x356);
        Formula x323=x327.forAll(x324);
        Formula x322=x323.not();
        Formula x384=x0.eq(x0);
        Formula x385=x1.eq(x1);
        Formula x386=x2.eq(x2);
        Formula x387=x3.eq(x3);
        Formula x388=x4.eq(x4);
        Formula x389=x5.eq(x5);
        Formula x390=x6.eq(x6);
        Formula x391=x7.eq(x7);
        Formula x392=x8.eq(x8);
        Formula x393=x9.eq(x9);
        Formula x394=x10.eq(x10);
        Formula x395=x11.eq(x11);
        Formula x396=x12.eq(x12);
        Formula x397=x13.eq(x13);
        Formula x398=x14.eq(x14);
        Formula x399=x15.eq(x15);
        Formula x400=x16.eq(x16);
        Formula x401=x17.eq(x17);
        Formula x402=x18.eq(x18);
        Formula x403=x19.eq(x19);
        Formula x404=x20.eq(x20);
        Formula x405=x21.eq(x21);
        Formula x22=Formula.compose(FormulaOperator.AND, x23, x25, x32, x35, x42, x44, x51, x53, x58, x60, x81, x84, x104, x107, x127, x130, x136, x139, x154, x157, x161, x162, x182, x201, x322, x384, x385, x386, x387, x388, x389, x390, x391, x392, x393, x394, x395, x396, x397, x398, x399, x400, x401, x402, x403, x404, x405);

        Solver solver = new Solver();
        solver.options().setSolver(SATFactory.MiniSat);
        solver.options().setBitwidth(4);
        //solver.options().setFlatten(false);
        solver.options().setIntEncoding(Options.IntEncoding.TWOSCOMPLEMENT);
        solver.options().setSymmetryBreaking(20);
        solver.options().setSkolemDepth(0);
        System.out.println("Solving...");
        System.out.flush();
        Solution sol = solver.solve(x22,bounds);
        System.out.println(sol.toString());
    }}