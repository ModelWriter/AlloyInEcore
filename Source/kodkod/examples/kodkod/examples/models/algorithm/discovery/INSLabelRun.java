package kodkod.examples.models.algorithm.discovery;

import java.util.Arrays;
import java.util.List;
import kodkod.ast.*;
import kodkod.ast.operator.*;
import kodkod.examples.ExampleMetadata;
import kodkod.instance.*;
import kodkod.engine.*;
import kodkod.engine.satlab.SATFactory;
import kodkod.engine.config.Options;

@ExampleMetadata(
        Name = "INSLabel",
        Note = "",
        IsCheck = true,
        PartialModel = true,
        BinaryRelations = 7,
        TernaryRelations =1,
        NaryRelations = 2,
        HierarchicalTypes = 6,
        NestedRelationalJoins = 24,
        TransitiveClosure = 5,
        NestedQuantifiers = 8,
        SetCardinality = 0,
        Additions = 0,
        Subtractions = 0,
        Comparison = 9,
        OrderedRelations = 0,
        Constraints =41
)
public final class INSLabelRun {

    public static void main(String[] args) throws Exception {

        Relation x0 = Relation.unary("Int/min");
        Relation x1 = Relation.unary("Int/zero");
        Relation x2 = Relation.unary("Int/max");
        Relation x3 = Relation.nary("Int/next", 2);
        Relation x4 = Relation.unary("seq/Int");
        Relation x5 = Relation.unary("String");
        Relation x6 = Relation.unary("this/Record");
        Relation x7 = Relation.unary("this/Attribute");
        Relation x8 = Relation.unary("this/Wildcard");
        Relation x9 = Relation.unary("this/Null");
        Relation x10 = Relation.unary("this/Value remainder");
        Relation x11 = Relation.unary("this/Label remainder");
        Relation x12 = Relation.unary("this/Node");
        Relation x13 = Relation.unary("this/Query");
        Relation x14 = Relation.unary("this/Advertisement");
        Relation x15 = Relation.unary("this/DB");
        Relation x16 = Relation.unary("this/AVTree remainder");
        Relation x17 = Relation.unary("this/LabelTree remainder");
        Relation x18 = Relation.unary("this/State");
        Relation x19 = Relation.nary("this/Node.label", 2);
        Relation x20 = Relation.nary("this/LabelTree.root", 2);
        Relation x21 = Relation.nary("this/LabelTree.nodes", 2);
        Relation x22 = Relation.nary("this/LabelTree.children", 3);
        Relation x23 = Relation.nary("this/AVTree.vnodes", 2);
        Relation x24 = Relation.nary("this/AVTree.anodes", 2);
        Relation x25 = Relation.unary("this/DB.records");
        Relation x26 = Relation.nary("this/DB.recs", 2);
        Relation x27 = Relation.nary("this/State.conforms", 4);
        Relation x28 = Relation.nary("this/State.lookup", 5);

        List<String> atomlist = Arrays.asList(
                "-1", "-2", "-3", "-4", "-5",
                "-6", "-7", "-8", "0", "1", "2",
                "3", "4", "5", "6", "7", "Advertisement$0",
                "DB$0", "Label$0", "Node$0", "Node$1", "Node$2", "Null$0",
                "Query$0", "Record$0", "Record$1", "Record$2", "State$0", "Wildcard$0"
        );

        Universe universe = new Universe(atomlist);
        TupleFactory factory = universe.factory();
        Bounds bounds = new Bounds(universe);

        TupleSet x0_upper = factory.noneOf(1);
        x0_upper.add(factory.tuple("-8"));
        bounds.boundExactly(x0, x0_upper);

        TupleSet x1_upper = factory.noneOf(1);
        x1_upper.add(factory.tuple("0"));
        bounds.boundExactly(x1, x1_upper);

        TupleSet x2_upper = factory.noneOf(1);
        x2_upper.add(factory.tuple("7"));
        bounds.boundExactly(x2, x2_upper);

        TupleSet x3_upper = factory.noneOf(2);
        x3_upper.add(factory.tuple("-8").product(factory.tuple("-7")));
        x3_upper.add(factory.tuple("-7").product(factory.tuple("-6")));
        x3_upper.add(factory.tuple("-6").product(factory.tuple("-5")));
        x3_upper.add(factory.tuple("-5").product(factory.tuple("-4")));
        x3_upper.add(factory.tuple("-4").product(factory.tuple("-3")));
        x3_upper.add(factory.tuple("-3").product(factory.tuple("-2")));
        x3_upper.add(factory.tuple("-2").product(factory.tuple("-1")));
        x3_upper.add(factory.tuple("-1").product(factory.tuple("0")));
        x3_upper.add(factory.tuple("0").product(factory.tuple("1")));
        x3_upper.add(factory.tuple("1").product(factory.tuple("2")));
        x3_upper.add(factory.tuple("2").product(factory.tuple("3")));
        x3_upper.add(factory.tuple("3").product(factory.tuple("4")));
        x3_upper.add(factory.tuple("4").product(factory.tuple("5")));
        x3_upper.add(factory.tuple("5").product(factory.tuple("6")));
        x3_upper.add(factory.tuple("6").product(factory.tuple("7")));
        bounds.boundExactly(x3, x3_upper);

        TupleSet x4_upper = factory.noneOf(1);
        x4_upper.add(factory.tuple("0"));
        x4_upper.add(factory.tuple("1"));
        x4_upper.add(factory.tuple("2"));
        bounds.boundExactly(x4, x4_upper);

        TupleSet x5_upper = factory.noneOf(1);
        bounds.boundExactly(x5, x5_upper);

        TupleSet x6_upper = factory.noneOf(1);
        x6_upper.add(factory.tuple("Record$0"));
        x6_upper.add(factory.tuple("Record$1"));
        x6_upper.add(factory.tuple("Record$2"));
        bounds.bound(x6, x6_upper);

        TupleSet x7_upper = factory.noneOf(1);
        x7_upper.add(factory.tuple("Label$0"));
        bounds.bound(x7, x7_upper);

        TupleSet x8_upper = factory.noneOf(1);
        x8_upper.add(factory.tuple("Wildcard$0"));
        bounds.boundExactly(x8, x8_upper);

        TupleSet x9_upper = factory.noneOf(1);
        x9_upper.add(factory.tuple("Null$0"));
        bounds.boundExactly(x9, x9_upper);

        TupleSet x10_upper = factory.noneOf(1);
        x10_upper.add(factory.tuple("Label$0"));
        bounds.bound(x10, x10_upper);

        TupleSet x11_upper = factory.noneOf(1);
        x11_upper.add(factory.tuple("Label$0"));
        bounds.bound(x11, x11_upper);

        TupleSet x12_upper = factory.noneOf(1);
        x12_upper.add(factory.tuple("Node$0"));
        x12_upper.add(factory.tuple("Node$1"));
        x12_upper.add(factory.tuple("Node$2"));
        bounds.bound(x12, x12_upper);

        TupleSet x13_upper = factory.noneOf(1);
        x13_upper.add(factory.tuple("Query$0"));
        bounds.boundExactly(x13, x13_upper);

        TupleSet x14_upper = factory.noneOf(1);
        x14_upper.add(factory.tuple("Advertisement$0"));
        bounds.boundExactly(x14, x14_upper);

        TupleSet x15_upper = factory.noneOf(1);
        x15_upper.add(factory.tuple("DB$0"));
        bounds.boundExactly(x15, x15_upper);

        TupleSet x16_upper = factory.noneOf(1);
        bounds.boundExactly(x16, x16_upper);

        TupleSet x17_upper = factory.noneOf(1);
        bounds.boundExactly(x17, x17_upper);

        TupleSet x18_upper = factory.noneOf(1);
        x18_upper.add(factory.tuple("State$0"));
        bounds.boundExactly(x18, x18_upper);

        TupleSet x19_upper = factory.noneOf(2);
        x19_upper.add(factory.tuple("Node$0").product(factory.tuple("Wildcard$0")));
        x19_upper.add(factory.tuple("Node$0").product(factory.tuple("Null$0")));
        x19_upper.add(factory.tuple("Node$0").product(factory.tuple("Label$0")));
        x19_upper.add(factory.tuple("Node$1").product(factory.tuple("Wildcard$0")));
        x19_upper.add(factory.tuple("Node$1").product(factory.tuple("Null$0")));
        x19_upper.add(factory.tuple("Node$1").product(factory.tuple("Label$0")));
        x19_upper.add(factory.tuple("Node$2").product(factory.tuple("Wildcard$0")));
        x19_upper.add(factory.tuple("Node$2").product(factory.tuple("Null$0")));
        x19_upper.add(factory.tuple("Node$2").product(factory.tuple("Label$0")));
        bounds.bound(x19, x19_upper);

        TupleSet x20_upper = factory.noneOf(2);
        x20_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$0")));
        x20_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$1")));
        x20_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$2")));
        x20_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$0")));
        x20_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$1")));
        x20_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$2")));
        x20_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$0")));
        x20_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$1")));
        x20_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$2")));
        bounds.bound(x20, x20_upper);

        TupleSet x21_upper = factory.noneOf(2);
        x21_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$0")));
        x21_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$1")));
        x21_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$2")));
        x21_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$0")));
        x21_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$1")));
        x21_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$2")));
        x21_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$0")));
        x21_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$1")));
        x21_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$2")));
        bounds.bound(x21, x21_upper);

        TupleSet x22_upper = factory.noneOf(3);
        x22_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$0")).product(factory.tuple("Node$0")));
        x22_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$0")).product(factory.tuple("Node$1")));
        x22_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$0")).product(factory.tuple("Node$2")));
        x22_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$1")).product(factory.tuple("Node$0")));
        x22_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$1")).product(factory.tuple("Node$1")));
        x22_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$1")).product(factory.tuple("Node$2")));
        x22_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$2")).product(factory.tuple("Node$0")));
        x22_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$2")).product(factory.tuple("Node$1")));
        x22_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$2")).product(factory.tuple("Node$2")));
        x22_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$0")).product(factory.tuple("Node$0")));
        x22_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$0")).product(factory.tuple("Node$1")));
        x22_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$0")).product(factory.tuple("Node$2")));
        x22_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$1")).product(factory.tuple("Node$0")));
        x22_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$1")).product(factory.tuple("Node$1")));
        x22_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$1")).product(factory.tuple("Node$2")));
        x22_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$2")).product(factory.tuple("Node$0")));
        x22_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$2")).product(factory.tuple("Node$1")));
        x22_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$2")).product(factory.tuple("Node$2")));
        x22_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$0")).product(factory.tuple("Node$0")));
        x22_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$0")).product(factory.tuple("Node$1")));
        x22_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$0")).product(factory.tuple("Node$2")));
        x22_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$1")).product(factory.tuple("Node$0")));
        x22_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$1")).product(factory.tuple("Node$1")));
        x22_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$1")).product(factory.tuple("Node$2")));
        x22_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$2")).product(factory.tuple("Node$0")));
        x22_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$2")).product(factory.tuple("Node$1")));
        x22_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$2")).product(factory.tuple("Node$2")));
        bounds.bound(x22, x22_upper);

        TupleSet x23_upper = factory.noneOf(2);
        x23_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$0")));
        x23_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$1")));
        x23_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$2")));
        x23_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$0")));
        x23_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$1")));
        x23_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$2")));
        x23_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$0")));
        x23_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$1")));
        x23_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$2")));
        bounds.bound(x23, x23_upper);

        TupleSet x24_upper = factory.noneOf(2);
        x24_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$0")));
        x24_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$1")));
        x24_upper.add(factory.tuple("Query$0").product(factory.tuple("Node$2")));
        x24_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$0")));
        x24_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$1")));
        x24_upper.add(factory.tuple("Advertisement$0").product(factory.tuple("Node$2")));
        x24_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$0")));
        x24_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$1")));
        x24_upper.add(factory.tuple("DB$0").product(factory.tuple("Node$2")));
        bounds.bound(x24, x24_upper);

        TupleSet x25_upper = factory.noneOf(1);
        x25_upper.add(factory.tuple("Record$0"));
        x25_upper.add(factory.tuple("Record$1"));
        x25_upper.add(factory.tuple("Record$2"));
        bounds.bound(x25, x25_upper);

        TupleSet x26_upper = factory.noneOf(2);
        x26_upper.add(factory.tuple("Node$0").product(factory.tuple("Record$0")));
        x26_upper.add(factory.tuple("Node$0").product(factory.tuple("Record$1")));
        x26_upper.add(factory.tuple("Node$0").product(factory.tuple("Record$2")));
        x26_upper.add(factory.tuple("Node$1").product(factory.tuple("Record$0")));
        x26_upper.add(factory.tuple("Node$1").product(factory.tuple("Record$1")));
        x26_upper.add(factory.tuple("Node$1").product(factory.tuple("Record$2")));
        x26_upper.add(factory.tuple("Node$2").product(factory.tuple("Record$0")));
        x26_upper.add(factory.tuple("Node$2").product(factory.tuple("Record$1")));
        x26_upper.add(factory.tuple("Node$2").product(factory.tuple("Record$2")));
        bounds.bound(x26, x26_upper);

        TupleSet x27_upper = factory.noneOf(4);
        x27_upper.add(factory.tuple("Query$0").product(factory.tuple("Advertisement$0")).product(factory.tuple("Node$0")).product(factory.tuple("Node$0")));
        x27_upper.add(factory.tuple("Query$0").product(factory.tuple("Advertisement$0")).product(factory.tuple("Node$0")).product(factory.tuple("Node$1")));
        x27_upper.add(factory.tuple("Query$0").product(factory.tuple("Advertisement$0")).product(factory.tuple("Node$0")).product(factory.tuple("Node$2")));
        x27_upper.add(factory.tuple("Query$0").product(factory.tuple("Advertisement$0")).product(factory.tuple("Node$1")).product(factory.tuple("Node$0")));
        x27_upper.add(factory.tuple("Query$0").product(factory.tuple("Advertisement$0")).product(factory.tuple("Node$1")).product(factory.tuple("Node$1")));
        x27_upper.add(factory.tuple("Query$0").product(factory.tuple("Advertisement$0")).product(factory.tuple("Node$1")).product(factory.tuple("Node$2")));
        x27_upper.add(factory.tuple("Query$0").product(factory.tuple("Advertisement$0")).product(factory.tuple("Node$2")).product(factory.tuple("Node$0")));
        x27_upper.add(factory.tuple("Query$0").product(factory.tuple("Advertisement$0")).product(factory.tuple("Node$2")).product(factory.tuple("Node$1")));
        x27_upper.add(factory.tuple("Query$0").product(factory.tuple("Advertisement$0")).product(factory.tuple("Node$2")).product(factory.tuple("Node$2")));
        bounds.bound(x27, x27_upper);

        TupleSet x28_upper = factory.noneOf(5);
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$0")).product(factory.tuple("Node$0")).product(factory.tuple("Record$0")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$0")).product(factory.tuple("Node$0")).product(factory.tuple("Record$1")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$0")).product(factory.tuple("Node$0")).product(factory.tuple("Record$2")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$0")).product(factory.tuple("Node$1")).product(factory.tuple("Record$0")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$0")).product(factory.tuple("Node$1")).product(factory.tuple("Record$1")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$0")).product(factory.tuple("Node$1")).product(factory.tuple("Record$2")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$0")).product(factory.tuple("Node$2")).product(factory.tuple("Record$0")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$0")).product(factory.tuple("Node$2")).product(factory.tuple("Record$1")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$0")).product(factory.tuple("Node$2")).product(factory.tuple("Record$2")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$1")).product(factory.tuple("Node$0")).product(factory.tuple("Record$0")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$1")).product(factory.tuple("Node$0")).product(factory.tuple("Record$1")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$1")).product(factory.tuple("Node$0")).product(factory.tuple("Record$2")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$1")).product(factory.tuple("Node$1")).product(factory.tuple("Record$0")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$1")).product(factory.tuple("Node$1")).product(factory.tuple("Record$1")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$1")).product(factory.tuple("Node$1")).product(factory.tuple("Record$2")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$1")).product(factory.tuple("Node$2")).product(factory.tuple("Record$0")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$1")).product(factory.tuple("Node$2")).product(factory.tuple("Record$1")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$1")).product(factory.tuple("Node$2")).product(factory.tuple("Record$2")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$2")).product(factory.tuple("Node$0")).product(factory.tuple("Record$0")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$2")).product(factory.tuple("Node$0")).product(factory.tuple("Record$1")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$2")).product(factory.tuple("Node$0")).product(factory.tuple("Record$2")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$2")).product(factory.tuple("Node$1")).product(factory.tuple("Record$0")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$2")).product(factory.tuple("Node$1")).product(factory.tuple("Record$1")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$2")).product(factory.tuple("Node$1")).product(factory.tuple("Record$2")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$2")).product(factory.tuple("Node$2")).product(factory.tuple("Record$0")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$2")).product(factory.tuple("Node$2")).product(factory.tuple("Record$1")));
        x28_upper.add(factory.tuple("DB$0").product(factory.tuple("Query$0")).product(factory.tuple("Node$2")).product(factory.tuple("Node$2")).product(factory.tuple("Record$2")));
        bounds.bound(x28, x28_upper);

        bounds.boundExactly(-8,factory.range(factory.tuple("-8"),factory.tuple("-8")));
        bounds.boundExactly(-7,factory.range(factory.tuple("-7"),factory.tuple("-7")));
        bounds.boundExactly(-6,factory.range(factory.tuple("-6"),factory.tuple("-6")));
        bounds.boundExactly(-5,factory.range(factory.tuple("-5"),factory.tuple("-5")));
        bounds.boundExactly(-4,factory.range(factory.tuple("-4"),factory.tuple("-4")));
        bounds.boundExactly(-3,factory.range(factory.tuple("-3"),factory.tuple("-3")));
        bounds.boundExactly(-2,factory.range(factory.tuple("-2"),factory.tuple("-2")));
        bounds.boundExactly(-1,factory.range(factory.tuple("-1"),factory.tuple("-1")));
        bounds.boundExactly(0,factory.range(factory.tuple("0"),factory.tuple("0")));
        bounds.boundExactly(1,factory.range(factory.tuple("1"),factory.tuple("1")));
        bounds.boundExactly(2,factory.range(factory.tuple("2"),factory.tuple("2")));
        bounds.boundExactly(3,factory.range(factory.tuple("3"),factory.tuple("3")));
        bounds.boundExactly(4,factory.range(factory.tuple("4"),factory.tuple("4")));
        bounds.boundExactly(5,factory.range(factory.tuple("5"),factory.tuple("5")));
        bounds.boundExactly(6,factory.range(factory.tuple("6"),factory.tuple("6")));
        bounds.boundExactly(7,factory.range(factory.tuple("7"),factory.tuple("7")));

        Expression x31=x8.intersection(x9);
        Formula x30=x31.no();
        Expression x35=x8.union(x9);
        Expression x34=x35.union(x10);
        Expression x33=x7.intersection(x34);
        Formula x32=x33.no();
        Expression x37=x13.intersection(x14);
        Formula x36=x37.no();
        Expression x40=x13.union(x14);
        Expression x39=x40.intersection(x15);
        Formula x38=x39.no();
        Variable x43=Variable.unary("Lookup_this");
        Decls x42=x43.oneOf(x12);
        Expression x46=x43.join(x19);
        Formula x45=x46.one();
        Expression x49=x7.union(x34);
        Expression x48=x49.union(x11);
        Formula x47=x46.in(x48);
        Formula x44=x45.and(x47);
        Formula x41=x44.forAll(x42);
        Expression x51=x19.join(Expression.UNIV);
        Formula x50=x51.in(x12);
        Variable x55=Variable.unary("Lookup_a");
        Expression x56=x13.join(x24);
        Decls x54=x55.oneOf(x56);
        Expression x59=x13.join(x22);
        Expression x58=x55.join(x59);
        Formula x57=x58.one();
        Formula x53=x57.forAll(x54);
        Expression x63=x14.join(x23);
        Expression x62=x63.join(x19);
        Formula x61=x8.in(x62);
        Formula x60=x61.not();
        Expression x66=x15.product(x25);
        Expression x65=x15.join(x66);
        Formula x64=x65.in(x6);
        Expression x71=x15.product(x26);
        Expression x70=x15.join(x71);
        Expression x74=x15.join(x23);
        Expression x75=x15.join(x20);
        Expression x73=x74.difference(x75);
        Expression x76=x15.join(x66);
        Expression x72=x73.product(x76);
        Formula x69=x70.in(x72);
        Variable x79=Variable.unary("");
        Decls x78=x79.oneOf(x73);
        Expression x81=x79.join(x70);
        Expression x82=x15.join(x66);
        Formula x80=x81.in(x82);
        Formula x77=x80.forAll(x78);
        Formula x68=x69.and(x77);
        Variable x85=Variable.unary("");
        Decls x84=x85.oneOf(x76);
        Expression x88=x70.join(x85);
        Formula x87=x88.some();
        Expression x91=x15.join(x23);
        Expression x92=x15.join(x20);
        Expression x90=x91.difference(x92);
        Formula x89=x88.in(x90);
        Formula x86=x87.and(x89);
        Formula x83=x86.forAll(x84);
        Formula x67=x68.and(x83);
        Expression x98=x15.join(x23);
        Expression x97=x98.join(x19);
        Formula x96=x8.in(x97);
        Formula x95=x96.not();
        Variable x102=Variable.unary("Lookup_a");
        Expression x103=x15.join(x24);
        Decls x101=x102.oneOf(x103);
        Expression x105=x102.join(x26);
        Formula x104=x105.no();
        Formula x100=x104.forAll(x101);
        Variable x108=Variable.unary("Lookup_a");
        Expression x109=x15.join(x24);
        Decls x107=x108.oneOf(x109);
        Variable x113=Variable.unary("Lookup_v");
        Expression x115=x15.join(x22);
        Expression x114=x108.join(x115);
        Decls x112=x113.oneOf(x114);
        Variable x117=Variable.unary("Lookup_v'");
        Decls x116=x117.oneOf(x114);
        Decls x111=x112.and(x116);
        Expression x121=x113.intersection(x117);
        Formula x120=x121.no();
        Formula x119=x120.not();
        Expression x128=x15.join(x22);
        Expression x127=x128.closure();
        Expression x137=Expression.INTS.union(x5);
        Expression x136=x137.union(x6);
        Expression x135=x136.union(x48);
        Expression x134=x135.union(x12);
        Expression x141=x40.union(x15);
        Expression x140=x141.union(x16);
        Expression x139=x140.union(x17);
        Expression x133=x134.union(x139);
        Expression x132=x133.union(x18);
        Expression x131=x132.product(Expression.UNIV);
        Expression x129=Expression.IDEN.intersection(x131);
        Expression x126=x127.union(x129);
        Expression x125=x113.join(x126);
        Expression x124=x125.join(x26);
        Expression x146=x15.join(x22);
        Expression x145=x146.closure();
        Expression x148=x132.product(Expression.UNIV);
        Expression x147=Expression.IDEN.intersection(x148);
        Expression x144=x145.union(x147);
        Expression x143=x117.join(x144);
        Expression x142=x143.join(x26);
        Expression x123=x124.intersection(x142);
        Formula x122=x123.no();
        Formula x118=x119.or(x122);
        Formula x110=x118.forAll(x111);
        Formula x106=x110.forAll(x107);
        Formula x99=x100.and(x106);
        Formula x94=x95.and(x99);
        Variable x151=Variable.unary("Lookup_v");
        Expression x152=x15.join(x23);
        Decls x150=x151.oneOf(x152);
        Expression x158=x15.join(x22);
        Expression x157=x151.join(x158);
        Formula x156=x157.no();
        Formula x155=x156.not();
        Expression x160=x151.join(x26);
        Formula x159=x160.some();
        Formula x154=x155.or(x159);
        Expression x163=x151.join(x26);
        Expression x168=x15.join(x22);
        Expression x167=x168.transpose();
        Expression x166=x167.closure();
        Expression x165=x151.join(x166);
        Expression x164=x165.join(x26);
        Expression x162=x163.intersection(x164);
        Formula x161=x162.no();
        Formula x153=x154.and(x161);
        Formula x149=x153.forAll(x150);
        Formula x93=x94.and(x149);
        Variable x171=Variable.unary("Lookup_this");
        Decls x170=x171.oneOf(x140);
        Expression x173=x171.join(x23);
        Expression x174=x171.join(x21);
        Formula x172=x173.in(x174);
        Formula x169=x172.forAll(x170);
        Expression x176=x23.join(Expression.UNIV);
        Formula x175=x176.in(x140);
        Variable x179=Variable.unary("Lookup_this");
        Decls x178=x179.oneOf(x140);
        Expression x181=x179.join(x24);
        Expression x182=x179.join(x21);
        Formula x180=x181.in(x182);
        Formula x177=x180.forAll(x178);
        Expression x184=x24.join(Expression.UNIV);
        Formula x183=x184.in(x140);
        Variable x187=Variable.unary("Lookup_this");
        Decls x186=x187.oneOf(x140);
        Expression x191=x187.join(x20);
        Expression x192=x187.join(x23);
        Formula x190=x191.in(x192);
        Expression x197=x187.join(x20);
        Expression x196=x197.join(x19);
        Formula x195=x196.eq(x9);
        Expression x202=x187.join(x24);
        Expression x201=x202.join(x19);
        Formula x200=x201.in(x7);
        Variable x205=Variable.unary("Lookup_v");
        Expression x206=x187.join(x23);
        Decls x204=x205.oneOf(x206);
        Expression x209=x187.join(x22);
        Expression x208=x205.join(x209);
        Expression x210=x187.join(x24);
        Formula x207=x208.in(x210);
        Formula x203=x207.forAll(x204);
        Formula x199=x200.and(x203);
        Expression x214=x19.transpose();
        Expression x213=x8.join(x214);
        Expression x215=x187.join(x22);
        Expression x212=x213.join(x215);
        Formula x211=x212.no();
        Formula x198=x199.and(x211);
        Formula x194=x195.and(x198);
        Expression x218=x187.join(x23);
        Expression x217=x218.join(x19);
        Formula x216=x217.in(x34);
        Formula x193=x194.and(x216);
        Formula x189=x190.and(x193);
        Expression x226=x187.join(x23);
        Expression x227=x187.join(x20);
        Expression x225=x226.difference(x227);
        Expression x224=x225.join(x19);
        Expression x229=x187.join(x24);
        Expression x228=x229.join(x19);
        Expression x223=x224.union(x228);
        Formula x222=x9.in(x223);
        Formula x221=x222.not();
        Variable x232=Variable.unary("Lookup_n");
        Expression x233=x187.join(x21);
        Decls x231=x232.oneOf(x233);
        Variable x237=Variable.unary("Lookup_c");
        Expression x239=x187.join(x22);
        Expression x238=x232.join(x239);
        Decls x236=x237.oneOf(x238);
        Variable x241=Variable.unary("Lookup_c'");
        Decls x240=x241.oneOf(x238);
        Decls x235=x236.and(x240);
        Expression x244=x237.join(x19);
        Expression x245=x241.join(x19);
        Formula x243=x244.eq(x245);
        Formula x242=x243.not();
        Formula x234=x242.forAll(x235);
        Formula x230=x234.forAll(x231);
        Formula x220=x221.and(x230);
        Variable x248=Variable.unary("Lookup_a");
        Expression x249=x187.join(x24);
        Decls x247=x248.oneOf(x249);
        Expression x253=x187.join(x22);
        Expression x252=x248.join(x253);
        Expression x254=x187.join(x23);
        Formula x251=x252.in(x254);
        Expression x257=x187.join(x22);
        Expression x256=x248.join(x257);
        Formula x255=x256.some();
        Formula x250=x251.and(x255);
        Formula x246=x250.forAll(x247);
        Formula x219=x220.and(x246);
        Formula x188=x189.and(x219);
        Formula x185=x188.forAll(x186);
        Variable x260=Variable.unary("Lookup_this");
        Decls x259=x260.oneOf(x139);
        Expression x263=x260.join(x20);
        Formula x262=x263.one();
        Formula x264=x263.in(x12);
        Formula x261=x262.and(x264);
        Formula x258=x261.forAll(x259);
        Expression x266=x20.join(Expression.UNIV);
        Formula x265=x266.in(x139);
        Variable x269=Variable.unary("Lookup_this");
        Decls x268=x269.oneOf(x139);
        Expression x271=x269.join(x21);
        Formula x270=x271.in(x12);
        Formula x267=x270.forAll(x268);
        Expression x273=x21.join(Expression.UNIV);
        Formula x272=x273.in(x139);
        Variable x276=Variable.unary("Lookup_this");
        Decls x275=x276.oneOf(x139);
        Expression x280=x276.join(x22);
        Expression x282=x276.join(x21);
        Expression x284=x276.join(x21);
        Expression x285=x276.join(x20);
        Expression x283=x284.difference(x285);
        Expression x281=x282.product(x283);
        Formula x279=x280.in(x281);
        Variable x288=Variable.unary("");
        Decls x287=x288.oneOf(x282);
        Expression x290=x288.join(x280);
        Expression x292=x276.join(x21);
        Expression x293=x276.join(x20);
        Expression x291=x292.difference(x293);
        Formula x289=x290.in(x291);
        Formula x286=x289.forAll(x287);
        Formula x278=x279.and(x286);
        Variable x296=Variable.unary("");
        Decls x295=x296.oneOf(x283);
        Expression x299=x280.join(x296);
        Formula x298=x299.one();
        Expression x301=x276.join(x21);
        Formula x300=x299.in(x301);
        Formula x297=x298.and(x300);
        Formula x294=x297.forAll(x295);
        Formula x277=x278.and(x294);
        Formula x274=x277.forAll(x275);
        Expression x304=x22.join(Expression.UNIV);
        Expression x303=x304.join(Expression.UNIV);
        Formula x302=x303.in(x139);
        Variable x307=Variable.unary("Lookup_this");
        Decls x306=x307.oneOf(x139);
        Expression x310=x307.join(x21);
        Expression x312=x307.join(x20);
        Expression x315=x307.join(x22);
        Expression x314=x315.closure();
        Expression x317=x132.product(Expression.UNIV);
        Expression x316=Expression.IDEN.intersection(x317);
        Expression x313=x314.union(x316);
        Expression x311=x312.join(x313);
        Formula x309=x310.eq(x311);
        Expression x320=x307.join(x20);
        Expression x321=x307.join(x22);
        Expression x319=x320.join(x321);
        Formula x318=x319.some();
        Formula x308=x309.and(x318);
        Formula x305=x308.forAll(x306);
        Expression x324=x18.product(x27);
        Expression x323=x18.join(x324);
        Expression x327=x12.product(x12);
        Expression x326=x14.product(x327);
        Expression x325=x13.product(x326);
        Formula x322=x323.in(x325);
        Expression x330=x18.product(x28);
        Expression x329=x18.join(x330);
        Expression x334=x12.product(x6);
        Expression x333=x12.product(x334);
        Expression x332=x13.product(x333);
        Expression x331=x15.product(x332);
        Formula x328=x329.in(x331);
        Variable x337=Variable.unary("Lookup_q");
        Decls x336=x337.oneOf(x13);
        Variable x340=Variable.unary("Lookup_a");
        Decls x339=x340.oneOf(x14);
        Variable x343=Variable.unary("Lookup_nq");
        Decls x342=x343.oneOf(x12);
        Variable x346=Variable.unary("Lookup_na");
        Decls x345=x346.oneOf(x12);
        Expression x351=x337.join(x27);
        Expression x350=x340.join(x351);
        Expression x349=x343.join(x350);
        Formula x348=x346.in(x349);
        Expression x354=x343.join(x19);
        Expression x356=x346.join(x19);
        Expression x355=x8.union(x356);
        Formula x353=x354.in(x355);
        Variable x359=Variable.unary("Lookup_nq'");
        Expression x361=x337.join(x22);
        Expression x360=x343.join(x361);
        Decls x358=x359.oneOf(x360);
        Variable x364=Variable.unary("Lookup_na'");
        Expression x366=x340.join(x22);
        Expression x365=x346.join(x366);
        Decls x363=x364.oneOf(x365);
        Expression x370=x337.join(x27);
        Expression x369=x340.join(x370);
        Expression x368=x359.join(x369);
        Formula x367=x364.in(x368);
        Formula x362=x367.forSome(x363);
        Formula x357=x362.forAll(x358);
        Formula x352=x353.and(x357);
        Formula x347=x348.iff(x352);
        Formula x344=x347.forAll(x345);
        Formula x341=x344.forAll(x342);
        Formula x338=x341.forAll(x339);
        Formula x335=x338.forAll(x336);
        Variable x374=Variable.unary("Lookup_db");
        Decls x373=x374.oneOf(x15);
        Variable x376=Variable.unary("Lookup_q");
        Decls x375=x376.oneOf(x13);
        Variable x378=Variable.unary("Lookup_T");
        Decls x377=x378.oneOf(x12);
        Variable x380=Variable.unary("Lookup_n");
        Decls x379=x380.oneOf(x12);
        Variable x382=Variable.unary("Lookup_r");
        Decls x381=x382.oneOf(x6);
        Decls x372=x373.and(x375).and(x377).and(x379).and(x381);
        Expression x388=x374.join(x28);
        Expression x387=x376.join(x388);
        Expression x386=x378.join(x387);
        Expression x385=x380.join(x386);
        Formula x384=x382.in(x385);
        Variable x391=Variable.unary("Lookup_na");
        Expression x393=x376.join(x22);
        Expression x392=x380.join(x393);
        Decls x390=x391.oneOf(x392);
        Variable x396=Variable.unary("Lookup_nv");
        Expression x398=x376.join(x22);
        Expression x397=x391.join(x398);
        Decls x395=x396.oneOf(x397);
        Variable x401=Variable.unary("Lookup_Ta");
        Expression x403=x374.join(x22);
        Expression x402=x378.join(x403);
        Decls x400=x401.oneOf(x402);
        Expression x406=x401.join(x19);
        Expression x407=x391.join(x19);
        Formula x405=x406.eq(x407);
        Expression x411=x396.join(x19);
        Formula x410=x411.eq(x8);
        Expression x416=x374.join(x22);
        Expression x415=x416.closure();
        Expression x414=x401.join(x415);
        Expression x417=x374.join(x71);
        Expression x413=x414.join(x417);
        Formula x412=x382.in(x413);
        Formula x409=x410.implies(x412);
        Formula x419=x410.not();
        Variable x422=Variable.unary("Lookup_Tv");
        Expression x424=x374.join(x22);
        Expression x423=x401.join(x424);
        Decls x421=x422.oneOf(x423);
        Expression x427=x422.join(x19);
        Expression x428=x396.join(x19);
        Formula x426=x427.eq(x428);
        Expression x433=x376.join(x22);
        Expression x432=x396.join(x433);
        Formula x431=x432.no();
        Expression x439=x374.join(x22);
        Expression x438=x439.closure();
        Expression x441=x132.product(Expression.UNIV);
        Expression x440=Expression.IDEN.intersection(x441);
        Expression x437=x438.union(x440);
        Expression x436=x422.join(x437);
        Expression x442=x374.join(x71);
        Expression x435=x436.join(x442);
        Formula x434=x382.in(x435);
        Formula x430=x431.implies(x434);
        Formula x444=x431.not();
        Expression x449=x374.join(x28);
        Expression x448=x376.join(x449);
        Expression x447=x422.join(x448);
        Expression x446=x396.join(x447);
        Formula x445=x382.in(x446);
        Formula x443=x444.implies(x445);
        Formula x429=x430.and(x443);
        Formula x425=x426.and(x429);
        Formula x420=x425.forSome(x421);
        Formula x418=x419.implies(x420);
        Formula x408=x409.and(x418);
        Formula x404=x405.and(x408);
        Formula x399=x404.forSome(x400);
        Formula x394=x399.forAll(x395);
        Formula x389=x394.forAll(x390);
        Formula x383=x384.iff(x389);
        Formula x371=x383.forAll(x372);
        Variable x453=Variable.unary("Lookup_db");
        Decls x452=x453.oneOf(x15);
        Variable x455=Variable.unary("Lookup_q");
        Decls x454=x455.oneOf(x13);
        Decls x451=x452.and(x454);
        Expression x458=x455.join(x20);
        Expression x460=x453.join(x20);
        Expression x462=x453.join(x28);
        Expression x461=x455.join(x462);
        Expression x459=x460.join(x461);
        Expression x457=x458.join(x459);
        Formula x456=x457.in(x6);
        Formula x450=x456.forSome(x451);
        Formula x463=x0.eq(x0);
        Formula x464=x1.eq(x1);
        Formula x465=x2.eq(x2);
        Formula x466=x3.eq(x3);
        Formula x467=x4.eq(x4);
        Formula x468=x5.eq(x5);
        Formula x469=x6.eq(x6);
        Formula x470=x7.eq(x7);
        Formula x471=x8.eq(x8);
        Formula x472=x9.eq(x9);
        Formula x473=x10.eq(x10);
        Formula x474=x11.eq(x11);
        Formula x475=x12.eq(x12);
        Formula x476=x13.eq(x13);
        Formula x477=x14.eq(x14);
        Formula x478=x15.eq(x15);
        Formula x479=x16.eq(x16);
        Formula x480=x17.eq(x17);
        Formula x481=x18.eq(x18);
        Formula x482=x19.eq(x19);
        Formula x483=x20.eq(x20);
        Formula x484=x21.eq(x21);
        Formula x485=x22.eq(x22);
        Formula x486=x23.eq(x23);
        Formula x487=x24.eq(x24);
        Formula x488=x25.eq(x25);
        Formula x489=x26.eq(x26);
        Formula x490=x27.eq(x27);
        Formula x491=x28.eq(x28);
        Formula x29=Formula.compose(FormulaOperator.AND, x30, x32, x36, x38, x41, x50, x53, x60, x64, x67, x93, x169, x175, x177, x183, x185, x258, x265, x267, x272, x274, x302, x305, x322, x328, x335, x371, x450, x463, x464, x465, x466, x467, x468, x469, x470, x471, x472, x473, x474, x475, x476, x477, x478, x479, x480, x481, x482, x483, x484, x485, x486, x487, x488, x489, x490, x491);

        Solver solver = new Solver();
        solver.options().setSolver(SATFactory.MiniSat);
        solver.options().setBitwidth(4);
        //solver.options().setFlatten(false);
        solver.options().setIntEncoding(Options.IntEncoding.TWOSCOMPLEMENT);
        solver.options().setSymmetryBreaking(20);
        solver.options().setSkolemDepth(0);
        System.out.println("Solving...");
        System.out.flush();
        Solution sol = solver.solve(x29,bounds);
        System.out.println(sol.toString());
    }}