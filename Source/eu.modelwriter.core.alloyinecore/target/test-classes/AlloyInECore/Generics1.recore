import Req : 'Requirements.ecore';
import Ecore : 'http://www.eclipse.org/emf/2002/Ecore';
import Ins : 'Instance.requirements';

package generics : gns = 'eu.modelwriter.generics'
{
    public abstract class List<E>
    {
        private property content : E[*];
        private property iterator : Iterator<E>;
        operation add(element : E);
        invariant quantifier : all d : List | not (d in d.^content);
    }
    public class Iterator<E>
    {
        public operation next() : E[?];
        public operation hasNext() : Boolean
        {
            body : next;
        }
    }
    class ArrayList<V> extends List<V>;
    class Car extends Arc::ArhitecturalElement
    {
        private attribute year : Req::Status;
    }
    abstract class Geometry;
    class Owner<K, V extends Geometry & Car>
    {
        public property cars : ArrayList<Car>[?];
        private property owner : K;
        annotation 'test'
        (
            'key' = 'value'
        );
    }
    abstract class Shape extends Geometry
    {
        attribute Type : ShapeType[?];
    }
    class Canvas<V>
    {
        property ref : List<?>[?];
        operation draw(shapes : List<? super Shape>) : Boolean[?];
        static operation <V> create(name : Canvas<?>) : Ecore::EBoolean;
        operation create(arg : ArrayList<? super Car>[?])
        {
            requires : one ArrayList;
        }
    }
    class MyException<T>;
    enum ShapeType
    {
        literal Arc = 0;
        literal Oval = 1;
        literal Rectangle = 2;
    }
    invariant test1 : contents in Dir -> (Dir + File);
    package test : t = 'test'
    {
        public class ArrayList<V> extends generics::List<V>;
    }
}