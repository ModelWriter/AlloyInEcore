package theoryoflists: tol= 'eu.modelwriter.examples.theoryoflists'
{
	class one Memory
	{
		property vehicles : Vehicle [*] {composes};
		--"list of unknown", that is the supertype of all kinds of lists
		property lists : List<?> [*] {composes};
		-- list of any subclass of Vehicle
		model property heads : List<? extends Vehicle> [1..*];

		invariant : all l: List | no l.~cdr implies l in Memory.heads;
	}

	public abstract class Object
	{
	    ghost attribute identifier : Integer;
	}

	public abstract class List<E> extends Object [5,7]
	{
		property car : E [?];
		property cdr : List<E> [?] {acyclic};

		model property eq : List<E> [*];

		invariant equavalence :
				all a, b: List | a in b.eq iff (a.car = b.car and a.cdr in b.cdr.eq);

--		invariant equavalence :
	--					all a, b: class | a in b.eq iff (a.car = b.car and a.cdr in b.cdr.eq);

		invariant : some disj a, b: List | a in b.eq and #a.^cdr > 3;

		invariant noStrayObjects : all v: Vehicle | some v.~car;
--		invariant noStrayObjects : all e: E | e.~car in List<E>;
		invariant : all e: E | List<E> in List<? extends Vehicle> implies e.~car in List<E>;
--		invariant : List<? extends E> in List<E>;
	}

	class one Nil<V> extends List<V>
	{
		invariant : no Nil.car;
		invariant : no Nil.cdr;
		invariant : all l: List - Nil | some l.cdr && some l.car;
		invariant : all l: List | Nil in l.*cdr;
	}

	class TruckList extends List<EnginedVehicle>;
	class CarList extends List<EnginedVehicle>;
	class BicycleList extends List<NonEnginedVehicle>;

	abstract class Vehicle extends Object [2,4]
	{
		attribute name : String;

		invariant : all disj a, b: Vehicle | a.name != b.name;
		invariant : one v: Vehicle | v.name = "Ferhat";
	}
	class EnginedVehicle extends Vehicle;
	class NonEnginedVehicle extends Vehicle;
}